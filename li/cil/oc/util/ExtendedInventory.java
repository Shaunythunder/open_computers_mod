/*    */ package li.cil.oc.util;
/*    */ 
/*    */ import scala.Function1;
/*    */ import scala.collection.TraversableOnce;
/*    */ 
/*    */ @ScalaSignature(bytes = "\006\001Q;Q!\001\002\t\002-\t\021#\022=uK:$W\rZ%om\026tGo\034:z\025\t\031A!\001\003vi&d'BA\003\007\003\ty7M\003\002\b\021\005\0311-\0337\013\003%\t!\001\\5\004\001A\021A\"D\007\002\005\031)aB\001E\001\037\t\tR\t\037;f]\022,G-\0238wK:$xN]=\024\0055\001\002CA\t\025\033\005\021\"\"A\n\002\013M\034\027\r\\1\n\005U\021\"AB!osJ+g\rC\003\030\033\021\005\001$\001\004=S:LGO\020\013\002\027!)!$\004C\0027\005\tR\r\037;f]\022,G-\0238wK:$xN]=\025\005q\031\006CA\017\037\033\005ia\001\002\b\016\001}\0312A\b\t!!\r\tc\005K\007\002E)\0211\005J\001\b[V$\030M\0317f\025\t)##\001\006d_2dWm\031;j_:L!a\n\022\003\025%sG-\032=fIN+\027\017\005\002*a5\t!F\003\002,Y\005!\021\016^3n\025\tic&A\005nS:,7M]1gi*\tq&A\002oKRL!!\r\026\003\023%#X-\\*uC\016\\\007\002C\032\037\005\013\007I\021\001\033\002\023%tg/\0328u_JLX#A\033\021\005YBT\"A\034\013\005Mb\023BA\0358\005)I\025J\034<f]R|'/\037\005\twy\021\t\021)A\005k\005Q\021N\034<f]R|'/\037\021\t\013]qB\021A\037\025\005qq\004\"B\032=\001\004)\004\"\002!\037\t\003\n\025A\0027f]\036$\b.F\001C!\t\t2)\003\002E%\t\031\021J\034;\t\013\031sB\021I$\002\rU\004H-\031;f)\rA5*\024\t\003#%K!A\023\n\003\tUs\027\016\036\005\006\031\026\003\rAQ\001\004S\022D\b\"\002(F\001\004A\023\001B3mK6DQ\001\025\020\005BE\013Q!\0319qYf$\"\001\013*\t\0131{\005\031\001\"\t\013MJ\002\031A\033")
/*    */ public final class ExtendedInventory {
/*    */   public static ExtendedInventory extendedInventory(IInventory paramIInventory) {
/*    */     return ExtendedInventory$.MODULE$.extendedInventory(paramIInventory);
/*    */   }
/*    */   
/*    */   public static class ExtendedInventory implements IndexedSeq<ItemStack> {
/* 13 */     public GenericCompanion<IndexedSeq> companion() { return IndexedSeq.class.companion(this); } private final IInventory inventory; public IndexedSeq<ItemStack> seq() { return IndexedSeq.class.seq(this); } public IndexedSeq<ItemStack> thisCollection() { return IndexedSeqLike.class.thisCollection((IndexedSeqLike)this); } public IndexedSeq toCollection(Object repr) { return IndexedSeqLike.class.toCollection((IndexedSeqLike)this, repr); } public Object view() { return IndexedSeqLike.class.view((IndexedSeqLike)this); } public IndexedSeqView<ItemStack, IndexedSeq<ItemStack>> view(int from, int until) { return IndexedSeqLike.class.view((IndexedSeqLike)this, from, until); } public int hashCode() { return IndexedSeqLike.class.hashCode((IndexedSeqLike)this); } public Iterator<ItemStack> iterator() { return IndexedSeqLike.class.iterator((IndexedSeqLike)this); } public <A1> Buffer<A1> toBuffer() { return IndexedSeqLike.class.toBuffer((IndexedSeqLike)this); } public Combiner<ItemStack, ParSeq<ItemStack>> parCombiner() { return SeqLike.class.parCombiner((SeqLike)this); } public SeqLike<ItemStack, Seq<ItemStack>> transform(Function1 f) { return SeqLike.class.transform((SeqLike)this, f); } public Object clone() { return Cloneable.class.clone((Cloneable)this); } public int lengthCompare(int len) { return SeqLike.class.lengthCompare((SeqLike)this, len); } public boolean isEmpty() { return SeqLike.class.isEmpty((SeqLike)this); } public int size() { return SeqLike.class.size((SeqLike)this); } public int segmentLength(Function1 p, int from) { return SeqLike.class.segmentLength((SeqLike)this, p, from); } public int indexWhere(Function1 p, int from) { return SeqLike.class.indexWhere((SeqLike)this, p, from); } public int lastIndexWhere(Function1 p, int end) { return SeqLike.class.lastIndexWhere((SeqLike)this, p, end); } public Iterator<IndexedSeq<ItemStack>> permutations() { return SeqLike.class.permutations((SeqLike)this); } public Iterator<IndexedSeq<ItemStack>> combinations(int n) { return SeqLike.class.combinations((SeqLike)this, n); } public Object reverse() { return SeqLike.class.reverse((SeqLike)this); } public <B, That> That reverseMap(Function1 f, CanBuildFrom bf) { return (That)SeqLike.class.reverseMap((SeqLike)this, f, bf); } public Iterator<ItemStack> reverseIterator() { return SeqLike.class.reverseIterator((SeqLike)this); } public <B> boolean startsWith(GenSeq that, int offset) { return SeqLike.class.startsWith((SeqLike)this, that, offset); } public <B> boolean endsWith(GenSeq that) { return SeqLike.class.endsWith((SeqLike)this, that); } public <B> int indexOfSlice(GenSeq that) { return SeqLike.class.indexOfSlice((SeqLike)this, that); } public <B> int indexOfSlice(GenSeq that, int from) { return SeqLike.class.indexOfSlice((SeqLike)this, that, from); } public <B> int lastIndexOfSlice(GenSeq that) { return SeqLike.class.lastIndexOfSlice((SeqLike)this, that); } public <B> int lastIndexOfSlice(GenSeq that, int end) { return SeqLike.class.lastIndexOfSlice((SeqLike)this, that, end); } public <B> boolean containsSlice(GenSeq that) { return SeqLike.class.containsSlice((SeqLike)this, that); } public <A1> boolean contains(Object elem) { return SeqLike.class.contains((SeqLike)this, elem); } public <B, That> That union(GenSeq that, CanBuildFrom bf) { return (That)SeqLike.class.union((SeqLike)this, that, bf); } public Object diff(GenSeq that) { return SeqLike.class.diff((SeqLike)this, that); } public Object intersect(GenSeq that) { return SeqLike.class.intersect((SeqLike)this, that); } public Object distinct() { return SeqLike.class.distinct((SeqLike)this); } public <B, That> That patch(int from, GenSeq patch, int replaced, CanBuildFrom bf) { return (That)SeqLike.class.patch((SeqLike)this, from, patch, replaced, bf); } public <B, That> That updated(int index, Object elem, CanBuildFrom bf) { return (That)SeqLike.class.updated((SeqLike)this, index, elem, bf); } public <B, That> That $plus$colon(Object elem, CanBuildFrom bf) { return (That)SeqLike.class.$plus$colon((SeqLike)this, elem, bf); } public <B, That> That $colon$plus(Object elem, CanBuildFrom bf) { return (That)SeqLike.class.$colon$plus((SeqLike)this, elem, bf); } public <B, That> That padTo(int len, Object elem, CanBuildFrom bf) { return (That)SeqLike.class.padTo((SeqLike)this, len, elem, bf); } public <B> boolean corresponds(GenSeq that, Function2 p) { return SeqLike.class.corresponds((SeqLike)this, that, p); } public Object sortWith(Function2 lt) { return SeqLike.class.sortWith((SeqLike)this, lt); } public Object sortBy(Function1 f, Ordering ord) { return SeqLike.class.sortBy((SeqLike)this, f, ord); } public Object sorted(Ordering ord) { return SeqLike.class.sorted((SeqLike)this, ord); } public Seq<ItemStack> toSeq() { return SeqLike.class.toSeq((SeqLike)this); } public Range indices() { return SeqLike.class.indices((SeqLike)this); } public String toString() { return SeqLike.class.toString((SeqLike)this); } public boolean isDefinedAt(int idx) { return GenSeqLike.class.isDefinedAt((GenSeqLike)this, idx); } public int prefixLength(Function1 p) { return GenSeqLike.class.prefixLength((GenSeqLike)this, p); } public int indexWhere(Function1 p) { return GenSeqLike.class.indexWhere((GenSeqLike)this, p); } public <B> int indexOf(Object elem) { return GenSeqLike.class.indexOf((GenSeqLike)this, elem); } public <B> int indexOf(Object elem, int from) { return GenSeqLike.class.indexOf((GenSeqLike)this, elem, from); } public <B> int lastIndexOf(Object elem) { return GenSeqLike.class.lastIndexOf((GenSeqLike)this, elem); } public <B> int lastIndexOf(Object elem, int end) { return GenSeqLike.class.lastIndexOf((GenSeqLike)this, elem, end); } public int lastIndexWhere(Function1 p) { return GenSeqLike.class.lastIndexWhere((GenSeqLike)this, p); } public <B> boolean startsWith(GenSeq that) { return GenSeqLike.class.startsWith((GenSeqLike)this, that); } public boolean equals(Object that) { return GenSeqLike.class.equals((GenSeqLike)this, that); } public <A1, B1> PartialFunction<A1, B1> orElse(PartialFunction that) { return PartialFunction.class.orElse((PartialFunction)this, that); } public <C> PartialFunction<Object, C> andThen(Function1 k) { return PartialFunction.class.andThen((PartialFunction)this, k); } public Function1<Object, Option<ItemStack>> lift() { return PartialFunction.class.lift((PartialFunction)this); } public Object applyOrElse(Object x, Function1 default) { return PartialFunction.class.applyOrElse((PartialFunction)this, x, default); } public <U> Function1<Object, Object> runWith(Function1 action) { return PartialFunction.class.runWith((PartialFunction)this, action); } public boolean apply$mcZD$sp(double v1) { return Function1.class.apply$mcZD$sp((Function1)this, v1); } public double apply$mcDD$sp(double v1) { return Function1.class.apply$mcDD$sp((Function1)this, v1); } public float apply$mcFD$sp(double v1) { return Function1.class.apply$mcFD$sp((Function1)this, v1); } public int apply$mcID$sp(double v1) { return Function1.class.apply$mcID$sp((Function1)this, v1); } public long apply$mcJD$sp(double v1) { return Function1.class.apply$mcJD$sp((Function1)this, v1); } public void apply$mcVD$sp(double v1) { Function1.class.apply$mcVD$sp((Function1)this, v1); } public boolean apply$mcZF$sp(float v1) { return Function1.class.apply$mcZF$sp((Function1)this, v1); } public double apply$mcDF$sp(float v1) { return Function1.class.apply$mcDF$sp((Function1)this, v1); } public float apply$mcFF$sp(float v1) { return Function1.class.apply$mcFF$sp((Function1)this, v1); } public int apply$mcIF$sp(float v1) { return Function1.class.apply$mcIF$sp((Function1)this, v1); } public long apply$mcJF$sp(float v1) { return Function1.class.apply$mcJF$sp((Function1)this, v1); } public void apply$mcVF$sp(float v1) { Function1.class.apply$mcVF$sp((Function1)this, v1); } public boolean apply$mcZI$sp(int v1) { return Function1.class.apply$mcZI$sp((Function1)this, v1); } public double apply$mcDI$sp(int v1) { return Function1.class.apply$mcDI$sp((Function1)this, v1); } public float apply$mcFI$sp(int v1) { return Function1.class.apply$mcFI$sp((Function1)this, v1); } public int apply$mcII$sp(int v1) { return Function1.class.apply$mcII$sp((Function1)this, v1); } public long apply$mcJI$sp(int v1) { return Function1.class.apply$mcJI$sp((Function1)this, v1); } public void apply$mcVI$sp(int v1) { Function1.class.apply$mcVI$sp((Function1)this, v1); } public boolean apply$mcZJ$sp(long v1) { return Function1.class.apply$mcZJ$sp((Function1)this, v1); } public double apply$mcDJ$sp(long v1) { return Function1.class.apply$mcDJ$sp((Function1)this, v1); } public float apply$mcFJ$sp(long v1) { return Function1.class.apply$mcFJ$sp((Function1)this, v1); } public int apply$mcIJ$sp(long v1) { return Function1.class.apply$mcIJ$sp((Function1)this, v1); } public long apply$mcJJ$sp(long v1) { return Function1.class.apply$mcJJ$sp((Function1)this, v1); } public void apply$mcVJ$sp(long v1) { Function1.class.apply$mcVJ$sp((Function1)this, v1); } public <A> Function1<A, ItemStack> compose(Function1 g) { return Function1.class.compose((Function1)this, g); } public <U> void foreach(Function1 f) { IterableLike.class.foreach((IterableLike)this, f); } public boolean forall(Function1 p) { return IterableLike.class.forall((IterableLike)this, p); } public boolean exists(Function1 p) { return IterableLike.class.exists((IterableLike)this, p); } public Option<ItemStack> find(Function1 p) { return IterableLike.class.find((IterableLike)this, p); } public <B> B foldRight(Object z, Function2 op) { return (B)IterableLike.class.foldRight((IterableLike)this, z, op); } public <B> B reduceRight(Function2 op) { return (B)IterableLike.class.reduceRight((IterableLike)this, op); } public Iterable<ItemStack> toIterable() { return IterableLike.class.toIterable((IterableLike)this); } public Iterator<ItemStack> toIterator() { return IterableLike.class.toIterator((IterableLike)this); } public Object head() { return IterableLike.class.head((IterableLike)this); } public Object slice(int from, int until) { return IterableLike.class.slice((IterableLike)this, from, until); } public Object take(int n) { return IterableLike.class.take((IterableLike)this, n); } public Object drop(int n) { return IterableLike.class.drop((IterableLike)this, n); } public Object takeWhile(Function1 p) { return IterableLike.class.takeWhile((IterableLike)this, p); } public Iterator<IndexedSeq<ItemStack>> grouped(int size) { return IterableLike.class.grouped((IterableLike)this, size); } public Iterator<IndexedSeq<ItemStack>> sliding(int size) { return IterableLike.class.sliding((IterableLike)this, size); } public Iterator<IndexedSeq<ItemStack>> sliding(int size, int step) { return IterableLike.class.sliding((IterableLike)this, size, step); } public Object takeRight(int n) { return IterableLike.class.takeRight((IterableLike)this, n); } public Object dropRight(int n) { return IterableLike.class.dropRight((IterableLike)this, n); } public <B> void copyToArray(Object xs, int start, int len) { IterableLike.class.copyToArray((IterableLike)this, xs, start, len); } public <A1, B, That> That zip(GenIterable that, CanBuildFrom bf) { return (That)IterableLike.class.zip((IterableLike)this, that, bf); } public <B, A1, That> That zipAll(GenIterable that, Object thisElem, Object thatElem, CanBuildFrom bf) { return (That)IterableLike.class.zipAll((IterableLike)this, that, thisElem, thatElem, bf); } public <A1, That> That zipWithIndex(CanBuildFrom bf) { return (That)IterableLike.class.zipWithIndex((IterableLike)this, bf); } public <B> boolean sameElements(GenIterable that) { return IterableLike.class.sameElements((IterableLike)this, that); } public Stream<ItemStack> toStream() { return IterableLike.class.toStream((IterableLike)this); } public boolean canEqual(Object that) { return IterableLike.class.canEqual((IterableLike)this, that); } public Builder<ItemStack, IndexedSeq<ItemStack>> newBuilder() { return GenericTraversableTemplate.class.newBuilder((GenericTraversableTemplate)this); } public <B> Builder<B, IndexedSeq<B>> genericBuilder() { return GenericTraversableTemplate.class.genericBuilder((GenericTraversableTemplate)this); } public <A1, A2> Tuple2<IndexedSeq<A1>, IndexedSeq<A2>> unzip(Function1 asPair) { return GenericTraversableTemplate.class.unzip((GenericTraversableTemplate)this, asPair); } public <A1, A2, A3> Tuple3<IndexedSeq<A1>, IndexedSeq<A2>, IndexedSeq<A3>> unzip3(Function1 asTriple) { return GenericTraversableTemplate.class.unzip3((GenericTraversableTemplate)this, asTriple); } public GenTraversable flatten(Function1 asTraversable) { return GenericTraversableTemplate.class.flatten((GenericTraversableTemplate)this, asTraversable); } public GenTraversable transpose(Function1 asTraversable) { return GenericTraversableTemplate.class.transpose((GenericTraversableTemplate)this, asTraversable); } public Object repr() { return TraversableLike.class.repr((TraversableLike)this); } public final boolean isTraversableAgain() { return TraversableLike.class.isTraversableAgain((TraversableLike)this); } public boolean hasDefiniteSize() { return TraversableLike.class.hasDefiniteSize((TraversableLike)this); } public <B, That> That $plus$plus(GenTraversableOnce that, CanBuildFrom bf) { return (That)TraversableLike.class.$plus$plus((TraversableLike)this, that, bf); } public <B, That> That $plus$plus$colon(TraversableOnce that, CanBuildFrom bf) { return (That)TraversableLike.class.$plus$plus$colon((TraversableLike)this, that, bf); } public <B, That> That $plus$plus$colon(Traversable that, CanBuildFrom bf) { return (That)TraversableLike.class.$plus$plus$colon((TraversableLike)this, that, bf); } public <B, That> That map(Function1 f, CanBuildFrom bf) { return (That)TraversableLike.class.map((TraversableLike)this, f, bf); } public <B, That> That flatMap(Function1 f, CanBuildFrom bf) { return (That)TraversableLike.class.flatMap((TraversableLike)this, f, bf); } public Object filter(Function1 p) { return TraversableLike.class.filter((TraversableLike)this, p); } public Object filterNot(Function1 p) { return TraversableLike.class.filterNot((TraversableLike)this, p); } public <B, That> That collect(PartialFunction pf, CanBuildFrom bf) { return (That)TraversableLike.class.collect((TraversableLike)this, pf, bf); } public Tuple2<IndexedSeq<ItemStack>, IndexedSeq<ItemStack>> partition(Function1 p) { return TraversableLike.class.partition((TraversableLike)this, p); } public <K> Map<K, IndexedSeq<ItemStack>> groupBy(Function1 f) { return TraversableLike.class.groupBy((TraversableLike)this, f); } public <B, That> That scan(Object z, Function2 op, CanBuildFrom cbf) { return (That)TraversableLike.class.scan((TraversableLike)this, z, op, cbf); } public <B, That> That scanLeft(Object z, Function2 op, CanBuildFrom bf) { return (That)TraversableLike.class.scanLeft((TraversableLike)this, z, op, bf); } public <B, That> That scanRight(Object z, Function2 op, CanBuildFrom bf) { return (That)TraversableLike.class.scanRight((TraversableLike)this, z, op, bf); } public Option<ItemStack> headOption() { return TraversableLike.class.headOption((TraversableLike)this); } public Object tail() { return TraversableLike.class.tail((TraversableLike)this); } public Object last() { return TraversableLike.class.last((TraversableLike)this); } public Option<ItemStack> lastOption() { return TraversableLike.class.lastOption((TraversableLike)this); } public Object init() { return TraversableLike.class.init((TraversableLike)this); } public Object sliceWithKnownDelta(int from, int until, int delta) { return TraversableLike.class.sliceWithKnownDelta((TraversableLike)this, from, until, delta); } public Object sliceWithKnownBound(int from, int until) { return TraversableLike.class.sliceWithKnownBound((TraversableLike)this, from, until); } public Object dropWhile(Function1 p) { return TraversableLike.class.dropWhile((TraversableLike)this, p); } public Tuple2<IndexedSeq<ItemStack>, IndexedSeq<ItemStack>> span(Function1 p) { return TraversableLike.class.span((TraversableLike)this, p); } public Tuple2<IndexedSeq<ItemStack>, IndexedSeq<ItemStack>> splitAt(int n) { return TraversableLike.class.splitAt((TraversableLike)this, n); } public Iterator<IndexedSeq<ItemStack>> tails() { return TraversableLike.class.tails((TraversableLike)this); } public Iterator<IndexedSeq<ItemStack>> inits() { return TraversableLike.class.inits((TraversableLike)this); } public Traversable<ItemStack> toTraversable() { return TraversableLike.class.toTraversable((TraversableLike)this); } public <Col> Col to(CanBuildFrom cbf) { return (Col)TraversableLike.class.to((TraversableLike)this, cbf); } public String stringPrefix() { return TraversableLike.class.stringPrefix((TraversableLike)this); } public FilterMonadic<ItemStack, IndexedSeq<ItemStack>> withFilter(Function1 p) { return TraversableLike.class.withFilter((TraversableLike)this, p); } public Parallel par() { return Parallelizable.class.par((Parallelizable)this); } public List<ItemStack> reversed() { return TraversableOnce.class.reversed((TraversableOnce)this); } public boolean nonEmpty() { return TraversableOnce.class.nonEmpty((TraversableOnce)this); } public int count(Function1 p) { return TraversableOnce.class.count((TraversableOnce)this, p); } public <B> Option<B> collectFirst(PartialFunction pf) { return TraversableOnce.class.collectFirst((TraversableOnce)this, pf); } public <B> B $div$colon(Object z, Function2 op) { return (B)TraversableOnce.class.$div$colon((TraversableOnce)this, z, op); } public <B> B $colon$bslash(Object z, Function2 op) { return (B)TraversableOnce.class.$colon$bslash((TraversableOnce)this, z, op); } public <B> B foldLeft(Object z, Function2 op) { return (B)TraversableOnce.class.foldLeft((TraversableOnce)this, z, op); } public <B> B reduceLeft(Function2 op) { return (B)TraversableOnce.class.reduceLeft((TraversableOnce)this, op); } public <B> Option<B> reduceLeftOption(Function2 op) { return TraversableOnce.class.reduceLeftOption((TraversableOnce)this, op); } public <B> Option<B> reduceRightOption(Function2 op) { return TraversableOnce.class.reduceRightOption((TraversableOnce)this, op); } public <A1> A1 reduce(Function2 op) { return (A1)TraversableOnce.class.reduce((TraversableOnce)this, op); } public <A1> Option<A1> reduceOption(Function2 op) { return TraversableOnce.class.reduceOption((TraversableOnce)this, op); } public <A1> A1 fold(Object z, Function2 op) { return (A1)TraversableOnce.class.fold((TraversableOnce)this, z, op); } public <B> B aggregate(Function0 z, Function2 seqop, Function2 combop) { return (B)TraversableOnce.class.aggregate((TraversableOnce)this, z, seqop, combop); } public <B> B sum(Numeric num) { return (B)TraversableOnce.class.sum((TraversableOnce)this, num); } public <B> B product(Numeric num) { return (B)TraversableOnce.class.product((TraversableOnce)this, num); } public Object min(Ordering cmp) { return TraversableOnce.class.min((TraversableOnce)this, cmp); } public Object max(Ordering cmp) { return TraversableOnce.class.max((TraversableOnce)this, cmp); } public Object maxBy(Function1 f, Ordering cmp) { return TraversableOnce.class.maxBy((TraversableOnce)this, f, cmp); } public Object minBy(Function1 f, Ordering cmp) { return TraversableOnce.class.minBy((TraversableOnce)this, f, cmp); } public <B> void copyToBuffer(Buffer dest) { TraversableOnce.class.copyToBuffer((TraversableOnce)this, dest); } public <B> void copyToArray(Object xs, int start) { TraversableOnce.class.copyToArray((TraversableOnce)this, xs, start); } public <B> void copyToArray(Object xs) { TraversableOnce.class.copyToArray((TraversableOnce)this, xs); } public <B> Object toArray(ClassTag evidence$1) { return TraversableOnce.class.toArray((TraversableOnce)this, evidence$1); } public List<ItemStack> toList() { return TraversableOnce.class.toList((TraversableOnce)this); } public IndexedSeq<ItemStack> toIndexedSeq() { return TraversableOnce.class.toIndexedSeq((TraversableOnce)this); } public <B> Set<B> toSet() { return TraversableOnce.class.toSet((TraversableOnce)this); } public Vector<ItemStack> toVector() { return TraversableOnce.class.toVector((TraversableOnce)this); } public <T, U> Map<T, U> toMap(Predef$.less.colon.less ev) { return TraversableOnce.class.toMap((TraversableOnce)this, ev); } public String mkString(String start, String sep, String end) { return TraversableOnce.class.mkString((TraversableOnce)this, start, sep, end); } public String mkString(String sep) { return TraversableOnce.class.mkString((TraversableOnce)this, sep); } public String mkString() { return TraversableOnce.class.mkString((TraversableOnce)this); } public StringBuilder addString(StringBuilder b, String start, String sep, String end) { return TraversableOnce.class.addString((TraversableOnce)this, b, start, sep, end); } public StringBuilder addString(StringBuilder b, String sep) { return TraversableOnce.class.addString((TraversableOnce)this, b, sep); } public StringBuilder addString(StringBuilder b) { return TraversableOnce.class.addString((TraversableOnce)this, b); } public IInventory inventory() { return this.inventory; } public ExtendedInventory(IInventory inventory) { TraversableOnce.class.$init$((TraversableOnce)this); Parallelizable.class.$init$((Parallelizable)this); TraversableLike.class.$init$((TraversableLike)this); GenericTraversableTemplate.class.$init$((GenericTraversableTemplate)this); GenTraversable.class.$init$((GenTraversable)this); Traversable.class.$init$((Traversable)this); Traversable.class.$init$((Traversable)this); GenIterable.class.$init$((GenIterable)this); IterableLike.class.$init$((IterableLike)this); Iterable.class.$init$((Iterable)this); Iterable.class.$init$((Iterable)this); Function1.class.$init$((Function1)this); PartialFunction.class.$init$((PartialFunction)this); GenSeqLike.class.$init$((GenSeqLike)this); GenSeq.class.$init$((GenSeq)this); SeqLike.class.$init$((SeqLike)this); Seq.class.$init$((Seq)this); Cloneable.class.$init$((Cloneable)this); SeqLike.class.$init$((SeqLike)this); Seq.class.$init$((Seq)this); IndexedSeqLike.class.$init$((IndexedSeqLike)this); IndexedSeq.class.$init$((IndexedSeq)this); IndexedSeqLike.class.$init$((IndexedSeqLike)this); IndexedSeq.class.$init$(this); } public int length() {
/* 14 */       return inventory().func_70302_i_();
/*    */     } public void update(int idx, ItemStack elem) {
/* 16 */       inventory().func_70299_a(idx, elem);
/*    */     } public ItemStack apply(int idx) {
/* 18 */       return inventory().func_70301_a(idx);
/*    */     }
/*    */   }
/*    */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\o\\util\ExtendedInventory.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */