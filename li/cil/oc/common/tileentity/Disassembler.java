/*     */ package li.cil.oc.common.tileentity;
/*     */ 
/*     */ import cpw.mods.fml.common.Optional.Method;
/*     */ import li.cil.oc.common.tileentity.traits.TileEntity;
/*     */ import li.cil.oc.common.tileentity.traits.power.AppliedEnergistics2;
/*     */ import li.cil.oc.common.tileentity.traits.power.Factorization;
/*     */ import li.cil.oc.common.tileentity.traits.power.IndustrialCraft2Classic;
/*     */ import li.cil.oc.common.tileentity.traits.power.IndustrialCraft2Experimental;
/*     */ import li.cil.oc.common.tileentity.traits.power.RotaryCraft;
/*     */ import net.minecraft.item.ItemStack;
/*     */ import net.minecraft.nbt.NBTTagCompound;
/*     */ import net.minecraftforge.common.util.ForgeDirection;
/*     */ import scala.Option;
/*     */ 
/*     */ @ScalaSignature(bytes = "\006\001\t]d\001B\001\003\0015\021A\002R5tCN\034X-\0342mKJT!a\001\003\002\025QLG.Z3oi&$\030P\003\002\006\r\00511m\\7n_:T!a\002\005\002\005=\034'BA\005\013\003\r\031\027\016\034\006\002\027\005\021A.[\002\001'!\001abF\017!G\031J\003CA\b\026\033\005\001\"BA\002\022\025\t\0212#A\005nS:,7M]1gi*\tA#A\002oKRL!A\006\t\003\025QKG.Z#oi&$\030\020\005\002\03175\t\021D\003\002\033\005\0051AO]1jiNL!\001H\r\003\027\025sg/\033:p]6,g\016\036\t\0031yI!aH\r\003\033A{w/\032:BG\016,\007\017^8s!\tA\022%\003\002#3\tI\021J\034<f]R|'/\037\t\0031\021J!!J\r\003\025M#\030\r^3Bo\006\024X\r\005\002\031O%\021\001&\007\002\021!2\f\0270\032:J]B,H/Q<be\026\004\"AK\030\016\003-R!\001L\027\002\r\021\024\030N^3s\025\tqc!A\002ba&L!\001M\026\003\025\021+g/[2f\023:4w\016C\0033\001\021\0051'\001\004=S:LGO\020\013\002iA\021Q\007A\007\002\005!9q\007\001b\001\n\003A\024\001\0028pI\026,\022!\017\t\003uuj\021a\017\006\003y5\nqA\\3uo>\0248.\003\002?w\tI1i\0348oK\016$xN\035\005\007\001\002\001\013\021B\035\002\0139|G-\032\021\t\017\t\003\001\031!C\001\007\006A\021n]!di&4X-F\001E!\t)\005*D\001G\025\0059\025!B:dC2\f\027BA%G\005\035\021un\0347fC:Dqa\023\001A\002\023\005A*\001\007jg\006\033G/\033<f?\022*\027\017\006\002N!B\021QIT\005\003\037\032\023A!\0268ji\"9\021KSA\001\002\004!\025a\001=%c!11\013\001Q!\n\021\013\021\"[:BGRLg/\032\021\t\017U\003!\031!C\001-\006)\021/^3vKV\tq\013E\002Y;~k\021!\027\006\0035n\013q!\\;uC\ndWM\003\002]\r\006Q1m\0347mK\016$\030n\0348\n\005yK&aC!se\006L()\0364gKJ\004\"\001Y2\016\003\005T!AY\t\002\t%$X-\\\005\003I\006\024\021\"\023;f[N#\030mY6\t\r\031\004\001\025!\003X\003\031\tX/Z;fA!9\001\016\001a\001\n\003I\027a\005;pi\006d'+Z9vSJ,G-\0228fe\036LX#\0016\021\005\025[\027B\0017G\005\031!u.\0362mK\"9a\016\001a\001\n\003y\027a\006;pi\006d'+Z9vSJ,G-\0228fe\036Lx\fJ3r)\ti\005\017C\004R[\006\005\t\031\0016\t\rI\004\001\025)\003k\003Q!x\016^1m%\026\fX/\033:fI\026sWM]4zA!)A\017\001C!k\0061r-\032;J]Z,g\016^8ssN#\030mY6MS6LG\017F\001w!\t)u/\003\002y\r\n\031\021J\034;\t\017i\004\001\031!C\001S\0061!-\0364gKJDq\001 \001A\002\023\005Q0\001\006ck\0324WM]0%KF$\"!\024@\t\017E[\030\021!a\001U\"9\021\021\001\001!B\023Q\027a\0022vM\032,'\017\t\005\t\003\013\001\001\031!C\001\007\006AB-[:bgN,WN\0317f\035\026DH/\0238ti\006tG\017\\=\t\023\005%\001\0011A\005\002\005-\021\001\b3jg\006\0348/Z7cY\026tU\r\037;J]N$\030M\034;ms~#S-\035\013\004\033\0065\001\002C)\002\b\005\005\t\031\001#\t\017\005E\001\001)Q\005\t\006IB-[:bgN,WN\0317f\035\026DH/\0238ti\006tG\017\\=!\021\031\t)\002\001C\001S\006A\001O]8he\026\0348\017C\004\002\032\001!I!a\007\002\023M,G/Q2uSZ,GcA'\002\036!9\021qDA\f\001\004!\025!\002<bYV,\007BCA\022\001!\025\r\021\"\004\002&\005QA-\032<jG\026LeNZ8\026\005\005\035\002\003CA\025\003_\t\031$a\r\016\005\005-\"bAA\0277\006I\021.\\7vi\006\024G.Z\005\005\003c\tYCA\002NCB\004B!!\016\002@5\021\021q\007\006\005\003s\tY$\001\003mC:<'BAA\037\003\021Q\027M^1\n\t\005\005\023q\007\002\007'R\024\030N\\4\t\025\005\025\003\001#A!B\033\t9#A\006eKZL7-Z%oM>\004\003bBA%\001\021\005\0231J\001\016O\026$H)\032<jG\026LeNZ8\025\005\0055\003\003CA(\003+\n9&a\026\016\005\005E#\002BA*\003w\tA!\036;jY&!\021\021GA)!\021\tI&a\030\017\007\025\013Y&C\002\002^\031\013a\001\025:fI\0264\027\002BA!\003CR1!!\030G\021\035\t)\007\001C)\003O\nA\002[1t\007>tg.Z2u_J$2\001RA5\021!\tY'a\031A\002\0055\024\001B:jI\026\004B!a\034\002z5\021\021\021\017\006\005\003'\n\031HC\002\006\003kR1!a\036\024\0039i\027N\\3de\0064GOZ8sO\026LA!a\037\002r\tqai\034:hK\022K'/Z2uS>t\007\006CA2\003\ny\"a&\021\t\005\005\0251S\007\003\003\007SA!!\"\002\b\006Q!/\0327bk:\034\007.\032:\013\t\005%\0251R\001\004M6d'\002BAG\003\037\013A!\\8eg*\021\021\021S\001\004GB<\030\002BAK\003\007\023\001bU5eK>sG.\037\023\003\0033KA!a'\002\036\00611\tT%F\035RSA!a(\002\004\006!1+\0333f\021\035\t\031\013\001C)\003K\013\021bY8o]\026\034Go\034:\025\t\005\035\026Q\026\t\005\013\006%\026(C\002\002,\032\023aa\0249uS>t\007\002CA6\003C\003\r!!\034\t\r\005E\006\001\"\021j\003A)g.\032:hsRC'o\\;hQB,H\017C\004\0026\002!\t%a.\002\037\035,GoQ;se\026tGo\025;bi\026$\"!!/\021\r\005=\0231XA`\023\021\ti,!\025\003\017\025sW/\\*fiB!\021\021YAe\033\t\t\031M\003\003\002F\006\035\027AC*uCR,\027i^1sK*\031\0211K\027\n\t\005-\0271\031\002\006'R\fG/\032\005\b\003\037\004A\021IAi\003%\031\027M\\+qI\006$X\rF\001E\021\035\t)\016\001C!\003/\fA\"\0369eCR,WI\034;jif$\022!\024\005\b\0037\004A\021AAo\003-!\027n]1tg\026l'\r\\3\025\0135\013y.a9\t\017\005\005\030\021\034a\001?\006)1\017^1dW\"I\021Q]Am!\003\005\r\001R\001\bS:\034H/\0318u\021\035\tI\017\001C\005\003W\fA\001\032:paR\031Q*!<\t\017\005\005\030q\035a\001?\"9\021\021\037\001\005B\005M\030\001\006:fC\0224%o\\7O\005R3uN]*feZ,'\017F\002N\003kD\001\"a>\002p\002\007\021\021`\001\004]\n$\b\003BA~\003l!!!@\013\007\005]\030#\003\003\003\002\005u(A\004(C)R\013wmQ8na>,h\016\032\005\b\005\013\001A\021\tB\004\003M9(/\033;f)>t%\t\026$peN+'O^3s)\ri%\021\002\005\t\003o\024\031\0011\001\002z\"9!Q\002\001\005B\t=\021\001\006:fC\0224%o\\7O\005R3uN]\"mS\026tG\017F\002N\005#A\001\"a>\003\f\001\007\021\021 \025\t\005\027\ty(a\b\002\030\"9!q\003\001\005B\te\021aE<sSR,Gk\034(C)\032{'o\0217jK:$HcA'\003\034!A\021q\037B\013\001\004\tI\020\003\004\003 \001!\t%^\001\021O\026$8+\033>f\023:4XM\034;pefDqAa\t\001\t\003\022)#\001\njg&#X-\034,bY&$gi\034:TY>$H#\002#\003(\t-\002b\002B\025\005C\001\rA^\001\002S\"9\021\021\035B\021\001\004y\006b\002B\030\001\021%!\021G\001\023C2dwn\036#jg\006\0348/Z7cY&tw\rF\002E\005gAq!!9\003.\001\007q\fC\004\0038\001!\tE!\017\0021M,G/\0238wK:$xN]=TY>$8i\0348uK:$8\017F\003N\005w\021y\004C\004\003>\tU\002\031\001<\002\tMdw\016\036\005\b\003C\024)\0041\001`\021\035\021\031\005\001C!\005\013\n!d\0348TKRLeN^3oi>\024\030p\0257pi\016{g\016^3oiN$r!\024B$\0053\022Y\006\003\005\003J\t\005\003\031\001B&\003\031\001H.Y=feB!!Q\nB+\033\t\021yE\003\003\003J\tE#b\001B*#\0051QM\034;jifLAAa\026\003P\taQI\034;jif\004F.Y=fe\"9!Q\bB!\001\0041\bbBAq\005\003\002\ra\030\005\n\005?\002\021\023!C\001\005C\nQ\003Z5tCN\034X-\0342mK\022\"WMZ1vYR$#'\006\002\003d)\032AI!\032,\005\t\035\004\003\002B5\005gj!Aa\033\013\t\t5$qN\001\nk:\034\007.Z2lK\022T1A!\035G\003)\tgN\\8uCRLwN\\\005\005\005k\022YGA\tv]\016DWmY6fIZ\013'/[1oG\026\004")
/*     */ public class Disassembler extends TileEntity implements Environment, PowerAcceptor, Inventory, StateAware, PlayerInputAware, DeviceInfo {
/*     */   private final Connector node;
/*     */   private boolean isActive;
/*     */   private final ArrayBuffer<ItemStack> queue;
/*     */   private double totalRequiredEnergy;
/*     */   private double buffer;
/*     */   private boolean disassembleNextInstantly;
/*     */   private Map<String, String> deviceInfo;
/*     */   private final Option<ItemStack>[] li$cil$oc$common$tileentity$traits$Inventory$$inventory;
/*     */   private int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$omega;
/*     */   private int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$torque;
/*     */   
/*     */   @Method(modid = "BuildCraft|Core")
/*  29 */   public boolean hasWork() { return StateAware.class.hasWork(this); } private long li$cil$oc$common$tileentity$traits$power$RotaryCraft$$power; private int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$alpha; private double li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Classic$$conversionBuffer; private double li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Experimental$$conversionBuffer; private boolean addedToIC2PowerGrid; @Method(modid = "factorization") private final Object li$cil$oc$common$tileentity$traits$power$Factorization$$charge; private Option<Object> li$cil$oc$common$tileentity$traits$power$AppliedEnergistics2$$node; private boolean isChangeScheduled; private boolean moving; private volatile byte bitmap$0; private Option[] li$cil$oc$common$tileentity$traits$Inventory$$inventory$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x2) == 0) { this.li$cil$oc$common$tileentity$traits$Inventory$$inventory = (Option<ItemStack>[])Inventory.class.li$cil$oc$common$tileentity$traits$Inventory$$inventory(this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x2); }  return (Option[])this.li$cil$oc$common$tileentity$traits$Inventory$$inventory; }  } public Option<ItemStack>[] li$cil$oc$common$tileentity$traits$Inventory$$inventory() { return ((byte)(this.bitmap$0 & 0x2) == 0) ? (Option<ItemStack>[])li$cil$oc$common$tileentity$traits$Inventory$$inventory$lzycompute() : this.li$cil$oc$common$tileentity$traits$Inventory$$inventory; } public Option<ItemStack>[] items() { return (Option<ItemStack>[])Inventory.class.items(this); } public boolean func_70300_a(EntityPlayer player) { return Inventory.class.isUseableByPlayer(this, player); } public boolean dropSlot(int slot, int count, Option direction) { return Inventory.class.dropSlot(this, slot, count, direction); } public void dropAllSlots() { Inventory.class.dropAllSlots(this); } public EntityItem spawnStackInWorld(ItemStack stack, Option direction) { return Inventory.class.spawnStackInWorld(this, stack, direction); } public int dropSlot$default$2() { return Inventory.class.dropSlot$default$2(this); } public Option<ForgeDirection> dropSlot$default$3() { return Inventory.class.dropSlot$default$3(this); } public Option<ForgeDirection> spawnStackInWorld$default$2() { return Inventory.class.spawnStackInWorld$default$2(this); } public void updateItems(int slot, ItemStack stack) { Inventory.class.updateItems((Inventory)this, slot, stack); } public ItemStack func_70301_a(int slot) { return Inventory.class.getStackInSlot((Inventory)this, slot); } public String func_145825_b() { return Inventory.class.getInventoryName((Inventory)this); } public String inventoryName() { return Inventory.class.inventoryName((Inventory)this); } public void load(NBTTagCompound nbt) { Inventory.class.load((Inventory)this, nbt); } public void save(NBTTagCompound nbt) { Inventory.class.save((Inventory)this, nbt); } public void onItemAdded(int slot, ItemStack stack) { Inventory.class.onItemAdded((Inventory)this, slot, stack); } public void onItemRemoved(int slot, ItemStack stack) { Inventory.class.onItemRemoved((Inventory)this, slot, stack); } public boolean func_145818_k_() { return SimpleInventory.class.hasCustomInventoryName((SimpleInventory)this); } public int getInventoryStackRequired() { return SimpleInventory.class.getInventoryStackRequired((SimpleInventory)this); } public void func_70295_k_() { SimpleInventory.class.openInventory((SimpleInventory)this); } public void func_70305_f() { SimpleInventory.class.closeInventory((SimpleInventory)this); } public ItemStack func_70298_a(int slot, int amount) { return SimpleInventory.class.decrStackSize((SimpleInventory)this, slot, amount); } public ItemStack func_70304_b(int slot) { return SimpleInventory.class.getStackInSlotOnClosing((SimpleInventory)this, slot); } public int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$omega() { return this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$omega; } public void li$cil$oc$common$tileentity$traits$power$RotaryCraft$$omega_$eq(int x$1) { this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$omega = x$1; } public int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$torque() { return this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$torque; } public void li$cil$oc$common$tileentity$traits$power$RotaryCraft$$torque_$eq(int x$1) { this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$torque = x$1; } public long li$cil$oc$common$tileentity$traits$power$RotaryCraft$$power() { return this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$power; } public void li$cil$oc$common$tileentity$traits$power$RotaryCraft$$power_$eq(long x$1) { this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$power = x$1; } public int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$alpha() { return this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$alpha; } public void li$cil$oc$common$tileentity$traits$power$RotaryCraft$$alpha_$eq(int x$1) { this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$alpha = x$1; } @Method(modid = "RotaryCraft") public int getOmega() { return RotaryCraft.class.getOmega((RotaryCraft)this); } @Method(modid = "RotaryCraft") public int getTorque() { return RotaryCraft.class.getTorque((RotaryCraft)this); } @Method(modid = "RotaryCraft") public long getPower() { return RotaryCraft.class.getPower((RotaryCraft)this); } @Method(modid = "RotaryCraft") public String getName() { return RotaryCraft.class.getName((RotaryCraft)this); } @Method(modid = "RotaryCraft") public int getIORenderAlpha() { return RotaryCraft.class.getIORenderAlpha((RotaryCraft)this); } @Method(modid = "RotaryCraft") public void setIORenderAlpha(int value) { RotaryCraft.class.setIORenderAlpha((RotaryCraft)this, value); } @Method(modid = "RotaryCraft") public void setOmega(int value) { RotaryCraft.class.setOmega((RotaryCraft)this, value); } @Method(modid = "RotaryCraft") public void setTorque(int value) { RotaryCraft.class.setTorque((RotaryCraft)this, value); } @Method(modid = "RotaryCraft") public void setPower(long value) { RotaryCraft.class.setPower((RotaryCraft)this, value); } @Method(modid = "RotaryCraft") public void noInputMachine() { RotaryCraft.class.noInputMachine((RotaryCraft)this); } @Method(modid = "RotaryCraft") public boolean canReadFrom(ForgeDirection forgeDirection) { return RotaryCraft.class.canReadFrom((RotaryCraft)this, forgeDirection); } @Method(modid = "RotaryCraft") public boolean isReceiving() { return RotaryCraft.class.isReceiving((RotaryCraft)this); } @Method(modid = "RotaryCraft") public int getMinTorque(int available) { return RotaryCraft.class.getMinTorque((RotaryCraft)this, available); } @Method(modid = "CoFHAPI|energy") public boolean canConnectEnergy(ForgeDirection from) { return RedstoneFlux.class.canConnectEnergy((RedstoneFlux)this, from); } @Method(modid = "CoFHAPI|energy") public int receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate) { return RedstoneFlux.class.receiveEnergy((RedstoneFlux)this, from, maxReceive, simulate); } @Method(modid = "CoFHAPI|energy") public int getEnergyStored(ForgeDirection from) { return RedstoneFlux.class.getEnergyStored((RedstoneFlux)this, from); } @Method(modid = "CoFHAPI|energy") public int getMaxEnergyStored(ForgeDirection from) { return RedstoneFlux.class.getMaxEnergyStored((RedstoneFlux)this, from); } @Method(modid = "CoFHAPI|energy") public int extractEnergy(ForgeDirection from, int maxExtract, boolean simulate) { return RedstoneFlux.class.extractEnergy((RedstoneFlux)this, from, maxExtract, simulate); } @Method(modid = "Mekanism") public boolean canReceiveEnergy(ForgeDirection side) { return Mekanism.class.canReceiveEnergy((Mekanism)this, side); } @Method(modid = "Mekanism") public double transferEnergyToAcceptor(ForgeDirection side, double amount) { return Mekanism.class.transferEnergyToAcceptor((Mekanism)this, side, amount); } @Method(modid = "Mekanism") public double getMaxEnergy() { return Mekanism.class.getMaxEnergy((Mekanism)this); } @Method(modid = "Mekanism") public double getEnergy() { return Mekanism.class.getEnergy((Mekanism)this); } @Method(modid = "Mekanism") public void setEnergy(double energy) { Mekanism.class.setEnergy((Mekanism)this, energy); } public double li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Classic$$conversionBuffer() { return this.li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Classic$$conversionBuffer; } public void li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Classic$$conversionBuffer_$eq(double x$1) { this.li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Classic$$conversionBuffer = x$1; } public void func_145829_t() { IndustrialCraft2Classic.class.validate((IndustrialCraft2Classic)this); } public void func_145843_s() { IndustrialCraft2Classic.class.invalidate((IndustrialCraft2Classic)this); } public void onChunkUnload() { IndustrialCraft2Classic.class.onChunkUnload((IndustrialCraft2Classic)this); } @Method(modid = "IC2-Classic") public boolean isAddedToEnergyNet() { return IndustrialCraft2Classic.class.isAddedToEnergyNet((IndustrialCraft2Classic)this); } @Method(modid = "IC2-Classic") public int getMaxSafeInput() { return IndustrialCraft2Classic.class.getMaxSafeInput((IndustrialCraft2Classic)this); } @Method(modid = "IC2-Classic") public boolean acceptsEnergyFrom(TileEntity emitter, Direction direction) { return IndustrialCraft2Classic.class.acceptsEnergyFrom((IndustrialCraft2Classic)this, emitter, direction); } @Method(modid = "IC2-Classic") public boolean injectEnergy(Direction directionFrom, int amount) { return IndustrialCraft2Classic.class.injectEnergy((IndustrialCraft2Classic)this, directionFrom, amount); } @Method(modid = "IC2-Classic") public int demandsEnergy() { return IndustrialCraft2Classic.class.demandsEnergy((IndustrialCraft2Classic)this); } public double li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Experimental$$conversionBuffer() { return this.li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Experimental$$conversionBuffer; } public void li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Experimental$$conversionBuffer_$eq(double x$1) { this.li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Experimental$$conversionBuffer = x$1; } @Method(modid = "IC2") public int getSinkTier() { return IndustrialCraft2Experimental.class.getSinkTier((IndustrialCraft2Experimental)this); } @Method(modid = "IC2") public boolean acceptsEnergyFrom(TileEntity emitter, ForgeDirection direction) { return IndustrialCraft2Experimental.class.acceptsEnergyFrom((IndustrialCraft2Experimental)this, emitter, direction); } @Method(modid = "IC2") public double injectEnergy(ForgeDirection directionFrom, double amount, double voltage) { return IndustrialCraft2Experimental.class.injectEnergy((IndustrialCraft2Experimental)this, directionFrom, amount, voltage); } @Method(modid = "IC2") public double getDemandedEnergy() { return IndustrialCraft2Experimental.class.getDemandedEnergy((IndustrialCraft2Experimental)this); } public boolean addedToIC2PowerGrid() { return this.addedToIC2PowerGrid; } public void addedToIC2PowerGrid_$eq(boolean x$1) { this.addedToIC2PowerGrid = x$1; } @Method(modid = "Galacticraft API") public boolean nodeAvailable(EnergySource from) { return Galacticraft.class.nodeAvailable((Galacticraft)this, from); } @Method(modid = "Galacticraft API") public float receiveEnergyGC(EnergySource from, float amount, boolean simulate) { return Galacticraft.class.receiveEnergyGC((Galacticraft)this, from, amount, simulate); } @Method(modid = "Galacticraft API") public float getEnergyStoredGC(EnergySource from) { return Galacticraft.class.getEnergyStoredGC((Galacticraft)this, from); } @Method(modid = "Galacticraft API") public float getMaxEnergyStoredGC(EnergySource from) { return Galacticraft.class.getMaxEnergyStoredGC((Galacticraft)this, from); } @Method(modid = "Galacticraft API") public float extractEnergyGC(EnergySource from, float amount, boolean simulate) { return Galacticraft.class.extractEnergyGC((Galacticraft)this, from, amount, simulate); } @Method(modid = "Galacticraft API") public boolean canConnect(ForgeDirection from, NetworkType networkType) { return Galacticraft.class.canConnect((Galacticraft)this, from, networkType); } private Object li$cil$oc$common$tileentity$traits$power$Factorization$$charge$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x4) == 0) { this.li$cil$oc$common$tileentity$traits$power$Factorization$$charge = Factorization.class.li$cil$oc$common$tileentity$traits$power$Factorization$$charge((Factorization)this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x4); }  return this.li$cil$oc$common$tileentity$traits$power$Factorization$$charge; }  } public Object li$cil$oc$common$tileentity$traits$power$Factorization$$charge() { return ((byte)(this.bitmap$0 & 0x4) == 0) ? li$cil$oc$common$tileentity$traits$power$Factorization$$charge$lzycompute() : this.li$cil$oc$common$tileentity$traits$power$Factorization$$charge; } @Method(modid = "factorization") public Charge getCharge() { return Factorization.class.getCharge((Factorization)this); } @Method(modid = "factorization") public String getInfo() { return Factorization.class.getInfo((Factorization)this); } @Method(modid = "factorization") public Coord getCoord() { return Factorization.class.getCoord((Factorization)this); } public Option<Object> li$cil$oc$common$tileentity$traits$power$AppliedEnergistics2$$node() { return this.li$cil$oc$common$tileentity$traits$power$AppliedEnergistics2$$node; } public void li$cil$oc$common$tileentity$traits$power$AppliedEnergistics2$$node_$eq(Option<Object> x$1) { this.li$cil$oc$common$tileentity$traits$power$AppliedEnergistics2$$node = x$1; } @Method(modid = "appliedenergistics2") public IGridNode getGridNode(ForgeDirection side) { return AppliedEnergistics2.class.getGridNode((AppliedEnergistics2)this, side); } @Method(modid = "appliedenergistics2") public AECableType getCableConnectionType(ForgeDirection side) { return AppliedEnergistics2.class.getCableConnectionType((AppliedEnergistics2)this, side); } @Method(modid = "appliedenergistics2") public void securityBreak() { AppliedEnergistics2.class.securityBreak((AppliedEnergistics2)this); } public void tryAllSides(Function2 provider, Function1 fromOther, Function1 toOther) { Common.class.tryAllSides((Common)this, provider, fromOther, toOther); } public boolean canConnectPower(ForgeDirection side) { return Common.class.canConnectPower((Common)this, side); } public double tryChangeBuffer(ForgeDirection side, double amount, boolean doReceive) { return Common.class.tryChangeBuffer((Common)this, side, amount, doReceive); } public double globalBuffer(ForgeDirection side) { return Common.class.globalBuffer((Common)this, side); } public double globalBufferSize(ForgeDirection side) { return Common.class.globalBufferSize((Common)this, side); } public double globalDemand(ForgeDirection side) { return Common.class.globalDemand((Common)this, side); } public boolean tryChangeBuffer$default$3() { return Common.class.tryChangeBuffer$default$3((Common)this); } public boolean isChangeScheduled() { return this.isChangeScheduled; } public void isChangeScheduled_$eq(boolean x$1) { this.isChangeScheduled = x$1; } public boolean moving() { return this.moving; } public void moving_$eq(boolean x$1) { this.moving = x$1; } public double xPosition() { return Environment.class.xPosition(this); } public double yPosition() { return Environment.class.yPosition(this); } public double zPosition() { return Environment.class.zPosition(this); } public void markChanged() { Environment.class.markChanged(this); } public boolean isConnected() { return Environment.class.isConnected(this); } public void initialize() { Environment.class.initialize(this); } public void dispose() { Environment.class.dispose(this); } public void onMessage(Message message) { Environment.class.onMessage(this, message); } public void onConnect(Node node) { Environment.class.onConnect(this, node); } public void onDisconnect(Node node) { Environment.class.onDisconnect(this, node); } @Method(modid = "appliedenergistics2") public boolean prepareToMove() { return Environment.class.prepareToMove(this); } @Method(modid = "appliedenergistics2") public void doneMoving() { Environment.class.doneMoving(this); } public Object[] result(Seq args) { return Environment.class.result(this, args); } public World world() { return TileEntity.class.world((TileEntity)this); } public int x() { return TileEntity.class.x((TileEntity)this); } public int y() { return TileEntity.class.y((TileEntity)this); } public int z() { return TileEntity.class.z((TileEntity)this); } public BlockPosition position() { return TileEntity.class.position((TileEntity)this); } public Block block() { return TileEntity.class.block((TileEntity)this); } public boolean isClient() { return TileEntity.class.isClient((TileEntity)this); } public boolean isServer() { return TileEntity.class.isServer((TileEntity)this); } public void func_145839_a(NBTTagCompound nbt) { TileEntity.class.readFromNBT((TileEntity)this, nbt); } public void func_145841_b(NBTTagCompound nbt) { TileEntity.class.writeToNBT((TileEntity)this, nbt); } public Packet func_145844_m() { return TileEntity.class.getDescriptionPacket((TileEntity)this); } public void onDataPacket(NetworkManager manager, S35PacketUpdateTileEntity packet) { TileEntity.class.onDataPacket((TileEntity)this, manager, packet); } public Disassembler() { TileEntity.class.$init$((TileEntity)this); Environment.class.$init$(this); Common.class.$init$((Common)this); AppliedEnergistics2.class.$init$((AppliedEnergistics2)this); Factorization.class.$init$((Factorization)this); Galacticraft.class.$init$((Galacticraft)this); IndustrialCraft2Common.class.$init$((IndustrialCraft2Common)this); IndustrialCraft2Experimental.class.$init$((IndustrialCraft2Experimental)this); IndustrialCraft2Classic.class.$init$((IndustrialCraft2Classic)this); Mekanism.class.$init$((Mekanism)this); RedstoneFlux.class.$init$((RedstoneFlux)this); RotaryCraft.class.$init$((RotaryCraft)this); SimpleInventory.class.$init$((SimpleInventory)this); Inventory.class.$init$((Inventory)this); Inventory.class.$init$(this); StateAware.class.$init$(this);
/*  30 */     this.node = (Connector)Network.newNode((Environment)this, Visibility.None)
/*  31 */       .withConnector(Settings$.MODULE$.get().bufferConverter())
/*  32 */       .create();
/*     */     
/*  34 */     this.isActive = false;
/*     */     
/*  36 */     this.queue = (ArrayBuffer<ItemStack>)ArrayBuffer$.MODULE$.empty();
/*     */     
/*  38 */     this.totalRequiredEnergy = 0.0D;
/*     */ 
/*     */ 
/*     */     
/*  42 */     this.buffer = 0.0D;
/*     */     
/*  44 */     this.disassembleNextInstantly = false; } public Connector node() { return this.node; } public boolean isActive() { return this.isActive; } public void isActive_$eq(boolean x$1) { this.isActive = x$1; } public ArrayBuffer<ItemStack> queue() { return this.queue; } public double totalRequiredEnergy() { return this.totalRequiredEnergy; } public void totalRequiredEnergy_$eq(double x$1) { this.totalRequiredEnergy = x$1; } public int func_70297_j_() { return 1; } public double buffer() { return this.buffer; } public void buffer_$eq(double x$1) { this.buffer = x$1; } public boolean disassembleNextInstantly() { return this.disassembleNextInstantly; } public void disassembleNextInstantly_$eq(boolean x$1) { this.disassembleNextInstantly = x$1; }
/*     */    public double progress() {
/*  46 */     return queue().isEmpty() ? 0.0D : ((true - (queue().size() * Settings$.MODULE$.get().disassemblerItemCost() - buffer()) / totalRequiredEnergy()) * 100);
/*     */   } private void setActive(boolean value) {
/*  48 */     if (value != isActive()) {
/*  49 */       isActive_$eq(value);
/*  50 */       PacketSender$.MODULE$.sendDisassemblerActive(this, isActive());
/*  51 */       world().func_147459_d(x(), y(), z(), block());
/*     */     } 
/*     */   }
/*  54 */   private Map deviceInfo$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x1) == 0) { (new Tuple2[4])[0] = Predef$ArrowAssoc$.MODULE$
/*  55 */           .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("class"), "generic");
/*  56 */         (new Tuple2[4])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("description"), "Disassembler");
/*  57 */         (new Tuple2[4])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("vendor"), "MightyPirates GmbH & Co. KG");
/*  58 */         (new Tuple2[4])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("product"), "Break.3R-100"); this.deviceInfo = (Map<String, String>)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[4])); this.bitmap$0 = (byte)(this.bitmap$0 | 0x1); }
/*     */        return this.deviceInfo; }
/*     */      } private final Map<String, String> deviceInfo() { return ((byte)(this.bitmap$0 & 0x1) == 0) ? deviceInfo$lzycompute() : this.deviceInfo; }
/*  61 */   public Map<String, String> getDeviceInfo() { return WrapAsJava$.MODULE$.mapAsJavaMap((Map)deviceInfo()); }
/*     */ 
/*     */   
/*     */   @SideOnly(Side.CLIENT)
/*     */   public boolean hasConnector(ForgeDirection side) {
/*  66 */     ForgeDirection forgeDirection = ForgeDirection.UP; if (side == null) { if (forgeDirection != null); } else if (side.equals(forgeDirection))
/*     */     {  }
/*  68 */      } public Option<Connector> connector(ForgeDirection side) { ForgeDirection forgeDirection = ForgeDirection.UP; if (side == null) { if (forgeDirection != null); } else if (side.equals(forgeDirection))
/*     */     {  }
/*  70 */      } public double energyThroughput() { return Settings$.MODULE$.get().disassemblerRate(); }
/*     */   
/*     */   public EnumSet<StateAware.State> getCurrentState() {
/*  73 */     return isActive() ? EnumSet.<StateAware.State>of(StateAware.State.IsWorking) : (
/*  74 */       queue().nonEmpty() ? EnumSet.<StateAware.State>of(StateAware.State.CanWork) : 
/*  75 */       EnumSet.<StateAware.State>noneOf(StateAware.State.class));
/*     */   }
/*     */ 
/*     */   
/*     */   public boolean canUpdate() {
/*  80 */     return isServer();
/*     */   }
/*     */   public void func_145845_h() {
/*  83 */     RotaryCraft.class.updateEntity((RotaryCraft)this);
/*  84 */     if (world().func_82737_E() % Settings$.MODULE$.get().tickFrequency() == false) {
/*  85 */       if (queue().isEmpty()) {
/*  86 */         boolean instant = disassembleNextInstantly();
/*  87 */         disassemble(func_70298_a(0, 1), instant);
/*  88 */         setActive(queue().nonEmpty());
/*     */       } else {
/*     */         
/*  91 */         if (buffer() < Settings$.MODULE$.get().disassemblerItemCost()) {
/*  92 */           double want = Settings$.MODULE$.get().disassemblerTickAmount();
/*  93 */           boolean success = node().tryChangeBuffer(-want);
/*  94 */           setActive(success);
/*  95 */           if (success) {
/*  96 */             buffer_$eq(buffer() + want);
/*     */           }
/*     */         } 
/*  99 */         while (buffer() >= Settings$.MODULE$.get().disassemblerItemCost() && queue().nonEmpty()) {
/* 100 */           buffer_$eq(buffer() - Settings$.MODULE$.get().disassemblerItemCost());
/* 101 */           ItemStack stack = (ItemStack)queue().remove(0);
/* 102 */           if (disassembleNextInstantly() || (world()).field_73012_v.nextDouble() >= Settings$.MODULE$.get().disassemblerBreakChance()) {
/* 103 */             li$cil$oc$common$tileentity$Disassembler$$drop(stack);
/*     */           }
/*     */         } 
/*     */       } 
/* 107 */       disassembleNextInstantly_$eq(queue().nonEmpty());
/*     */     } 
/*     */   }
/*     */   
/* 111 */   public boolean disassemble$default$2() { return false; }
/*     */   public void disassemble(ItemStack stack, boolean instant) { ArrayBuffer arrayBuffer;
/* 113 */     if (func_94041_b(0, stack))
/* 114 */     { ItemStack[] ingredients = ItemUtils$.MODULE$.getIngredients(stack);
/* 115 */       Option option = DisassemblerTemplates$.MODULE$.select(stack);
/* 116 */       if (option instanceof Some) { Some some = (Some)option; DisassemblerTemplates.Template template = (DisassemblerTemplates.Template)some.x();
/* 117 */         Tuple2 tuple2 = template.disassemble(stack, ingredients); if (tuple2 != null) { Option stacks = (Option)tuple2._1(), drops = (Option)tuple2._2(); Tuple2 tuple22 = new Tuple2(stacks, drops), tuple21 = tuple22; Option option1 = (Option)tuple21._1(), option2 = (Option)tuple21._2();
/* 118 */           option1.foreach((Function1)new Disassembler$$anonfun$disassemble$1(this));
/* 119 */           option2.foreach((Function1)new Disassembler$$anonfun$disassemble$2(this)); BoxedUnit boxedUnit = BoxedUnit.UNIT; }  throw new MatchError(tuple2); }
/* 120 */        arrayBuffer = queue().$plus$plus$eq((TraversableOnce)Predef$.MODULE$.refArrayOps((Object[])ingredients));
/*     */       
/*     */        }
/*     */     
/*     */     else
/*     */     
/*     */     { 
/*     */       
/* 128 */       li$cil$oc$common$tileentity$Disassembler$$drop(stack); return; }  totalRequiredEnergy_$eq(queue().size() * Settings$.MODULE$.get().disassemblerItemCost()); if (instant) buffer_$eq(totalRequiredEnergy());  } public final class Disassembler$$anonfun$disassemble$1 extends AbstractFunction1<ItemStack[], ArrayBuffer<ItemStack>> implements Serializable {
/*     */     public static final long serialVersionUID = 0L; public final ArrayBuffer<ItemStack> apply(ItemStack[] x$2) { return this.$outer.queue().$plus$plus$eq((TraversableOnce)Predef$.MODULE$.refArrayOps((Object[])x$2)); } public Disassembler$$anonfun$disassemble$1(Disassembler $outer) {} } public final class Disassembler$$anonfun$disassemble$2 extends AbstractFunction1<ItemStack[], BoxedUnit> implements Serializable {
/*     */     public static final long serialVersionUID = 0L; public final void apply(ItemStack[] x$3) { Predef$.MODULE$.refArrayOps((Object[])x$3).foreach((Function1)new Disassembler$$anonfun$disassemble$2$$anonfun$apply$1(this)); } public Disassembler$$anonfun$disassemble$2(Disassembler $outer) {} public final class Disassembler$$anonfun$disassemble$2$$anonfun$apply$1 extends AbstractFunction1<ItemStack, BoxedUnit> implements Serializable {
/*     */       public static final long serialVersionUID = 0L; public final void apply(ItemStack stack) { this.$outer.li$cil$oc$common$tileentity$Disassembler$$anonfun$$$outer().li$cil$oc$common$tileentity$Disassembler$$drop(stack); }
/*     */       public Disassembler$$anonfun$disassemble$2$$anonfun$apply$1(Disassembler$$anonfun$disassemble$2 $outer) {} } }
/* 133 */   public void li$cil$oc$common$tileentity$Disassembler$$drop(ItemStack stack) { if (stack != null) {
/* 134 */       Predef$.MODULE$.refArrayOps((Object[])ForgeDirection.VALID_DIRECTIONS).withFilter((Function1)new Disassembler$$anonfun$li$cil$oc$common$tileentity$Disassembler$$drop$1(this, stack)).foreach((Function1)new Disassembler$$anonfun$li$cil$oc$common$tileentity$Disassembler$$drop$2(this, stack));
/*     */ 
/*     */       
/* 137 */       if (stack.field_77994_a > 0)
/* 138 */         spawnStackInWorld(stack, Option$.MODULE$.apply(ForgeDirection.UP)); 
/*     */     }  } public final class Disassembler$$anonfun$li$cil$oc$common$tileentity$Disassembler$$drop$1 extends AbstractFunction1<ForgeDirection, Object> implements Serializable {
/*     */     public static final long serialVersionUID = 0L; private final ItemStack stack$1; public final boolean apply(ForgeDirection side) {
/*     */       return (this.stack$1.field_77994_a > 0);
/*     */     } public Disassembler$$anonfun$li$cil$oc$common$tileentity$Disassembler$$drop$1(Disassembler $outer, ItemStack stack$1) {} } public final class Disassembler$$anonfun$li$cil$oc$common$tileentity$Disassembler$$drop$2 extends AbstractFunction1<ForgeDirection, Object> implements Serializable {
/*     */     public static final long serialVersionUID = 0L; private final ItemStack stack$1; public Disassembler$$anonfun$li$cil$oc$common$tileentity$Disassembler$$drop$2(Disassembler $outer, ItemStack stack$1) {} public final boolean apply(ForgeDirection side) {
/*     */       return InventoryUtils$.MODULE$.insertIntoInventoryAt(this.stack$1, BlockPosition$.MODULE$.apply((EnvironmentHost)this.$outer).offset(side), (Option)new Some(side.getOpposite()), InventoryUtils$.MODULE$.insertIntoInventoryAt$default$4(), InventoryUtils$.MODULE$.insertIntoInventoryAt$default$5());
/*     */     } }
/* 146 */   public void readFromNBTForServer(NBTTagCompound nbt) { Inventory.class.readFromNBTForServer(this, nbt);
/* 147 */     queue().clear();
/* 148 */     queue().$plus$plus$eq((TraversableOnce)ExtendedNBT$.MODULE$.extendNBTTagList(nbt.func_150295_c((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("queue").toString(), 10))
/* 149 */         .map((Function1)new Disassembler$$anonfun$readFromNBTForServer$1(this)));
/* 150 */     buffer_$eq(nbt.func_74769_h((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("buffer").toString()));
/* 151 */     totalRequiredEnergy_$eq(nbt.func_74769_h((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("total").toString()));
/* 152 */     isActive_$eq(queue().nonEmpty()); } public final class Disassembler$$anonfun$readFromNBTForServer$1 extends AbstractFunction1<NBTTagCompound, ItemStack> implements Serializable {
/*     */     public static final long serialVersionUID = 0L; public final ItemStack apply(NBTTagCompound tag) {
/*     */       return ItemStack.func_77949_a(tag);
/*     */     } public Disassembler$$anonfun$readFromNBTForServer$1(Disassembler $outer) {} } public void writeToNBTForServer(NBTTagCompound nbt) {
/* 156 */     Inventory.class.writeToNBTForServer(this, nbt);
/* 157 */     ExtendedNBT$.MODULE$.extendNBTTagCompound(nbt).setNewTagList((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("queue").toString(), ExtendedNBT$.MODULE$.itemStackIterableToNbt((Iterable)queue()));
/* 158 */     nbt.func_74780_a((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("buffer").toString(), buffer());
/* 159 */     nbt.func_74780_a((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("total").toString(), totalRequiredEnergy());
/*     */   }
/*     */   
/*     */   @SideOnly(Side.CLIENT)
/*     */   public void readFromNBTForClient(NBTTagCompound nbt) {
/* 164 */     TileEntity.class.readFromNBTForClient((TileEntity)this, nbt);
/* 165 */     isActive_$eq(nbt.func_74767_n("isActive"));
/*     */   }
/*     */   
/*     */   public void writeToNBTForClient(NBTTagCompound nbt) {
/* 169 */     TileEntity.class.writeToNBTForClient((TileEntity)this, nbt);
/* 170 */     nbt.func_74757_a("isActive", isActive());
/*     */   }
/*     */ 
/*     */   
/*     */   public int func_70302_i_() {
/* 175 */     return 1;
/*     */   }
/*     */   public boolean func_94041_b(int i, ItemStack stack) {
/* 178 */     return (allowDisassembling(stack) && (((
/* 179 */       Settings$.MODULE$.get().disassembleAllTheThings() || Items.get(stack) != null) && Predef$.MODULE$.refArrayOps((Object[])ItemUtils$.MODULE$.getIngredients(stack)).nonEmpty()) || 
/* 180 */       DisassemblerTemplates$.MODULE$.select(stack).isDefined()));
/*     */   } private boolean allowDisassembling(ItemStack stack) {
/* 182 */     return !(stack == null || (stack.func_77942_o() && stack.func_77978_p().func_74767_n((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("undisassemblable").toString())));
/*     */   }
/*     */   public void func_70299_a(int slot, ItemStack stack) {
/* 185 */     Inventory.class.setInventorySlotContents((Inventory)this, slot, stack);
/* 186 */     if (!(world()).field_72995_K) {
/* 187 */       disassembleNextInstantly_$eq(false);
/*     */     }
/*     */   }
/*     */   
/*     */   public void onSetInventorySlotContents(EntityPlayer player, int slot, ItemStack stack) {
/* 192 */     if (!(world()).field_72995_K)
/* 193 */       disassembleNextInstantly_$eq((stack != null && slot == 0 && player.field_71075_bZ.field_75098_d)); 
/*     */   }
/*     */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\common\tileentity\Disassembler.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */