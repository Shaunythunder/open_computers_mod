/*    */ package li.cil.oc.common.tileentity;
/*    */ 
/*    */ import li.cil.oc.common.tileentity.traits.TileEntity;
/*    */ import net.minecraft.nbt.NBTTagCompound;
/*    */ 
/*    */ @ScalaSignature(bytes = "\006\001\005\025a\001B\001\003\0015\021\001\003U8xKJ$\025n\035;sS\n,Ho\034:\013\005\r!\021A\003;jY\026,g\016^5us*\021QAB\001\007G>lWn\0348\013\005\035A\021AA8d\025\tI!\"A\002dS2T\021aC\001\003Y&\034\001aE\003\001\035]i\002\005\005\002\020+5\t\001C\003\002\004#)\021!cE\001\n[&tWm\031:bMRT\021\001F\001\004]\026$\030B\001\f\021\005)!\026\016\\3F]RLG/\037\t\0031mi\021!\007\006\0035\t\ta\001\036:bSR\034\030B\001\017\032\005-)eN^5s_:lWM\034;\021\005aq\022BA\020\032\0055\001vn^3s\005\006d\027M\\2feB\021\001$I\005\003Ee\021QBT8u\003:\fG.\037>bE2,\007\"\002\023\001\t\003)\023A\002\037j]&$h\bF\001'!\t9\003!D\001\003\021\035I\003A1A\005\002)\nAA\\8eKV\t1\006\005\002-_5\tQFC\001/\003\025\0318-\0317b\023\t\001TF\001\003Ok2d\007B\002\032\001A\003%1&A\003o_\022,\007\005C\0045\001\t\007I\021B\033\002\0139|G-Z:\026\003Y\0022\001L\034:\023\tATFA\003BeJ\f\027\020\005\002;5\t1H\003\002={\0059a.\032;x_J\\'B\001 \007\003\r\t\007/[\005\003\001n\022\021bQ8o]\026\034Go\034:\t\r\t\003\001\025!\0037\003\031qw\016Z3tA!)A\t\001C)\013\006Y\021n]\"p]:,7\r^3e+\0051\005C\001\027H\023\tAUFA\004C_>dW-\0318\t\013)\003A\021I&\002\023\r\fg.\0269eCR,G#\001$\t\0135\003A\021\t(\002\025\r\fgnQ8o]\026\034G\017\006\002G\037\")\001\013\024a\001#\006!1/\0333f!\t\021\006,D\001T\025\t!V+\001\003vi&d'BA\003W\025\t96#\001\bnS:,7M]1gi\032|'oZ3\n\005e\033&A\004$pe\036,G)\033:fGRLwN\034\025\005\031n;\007\016\005\002]K6\tQL\003\002_?\006Q!/\0327bk:\034\007.\032:\013\005\001\f\027a\0014nY*\021!mY\001\005[>$7OC\001e\003\r\031\007o^\005\003Mv\023\001bU5eK>sG._\001\006m\006dW/\032\023\002S&\021!n[\001\007\0072KUI\024+\013\0051l\026\001B*jI\026DQA\034\001\005B=\f\021b]5eK\022tu\016Z3\025\005e\002\b\"\002)n\001\004\t\006\"\002:\001\t\003\032\030\001\006:fC\0224%o\\7O\005R3uN]*feZ,'\017\006\002uoB\021A&^\005\003m6\022A!\0268ji\")\0010\035a\001s\006\031aN\031;\021\005idX\"A>\013\005a\f\022BA?|\0059q%\t\026+bO\016{W\016]8v]\022Daa \001\005B\005\005\021aE<sSR,Gk\034(C)\032{'oU3sm\026\024Hc\001;\002\004!)\001P a\001s\002")
/*    */ public class PowerDistributor extends TileEntity implements Environment, PowerBalancer, NotAnalyzable {
/*    */   private final Null$ node;
/*    */   private final Connector[] li$cil$oc$common$tileentity$PowerDistributor$$nodes;
/*    */   private double globalBuffer;
/*    */   private double globalBufferSize;
/*    */   
/* 13 */   public Node[] onAnalyze(EntityPlayer player, int side, float hitX, float hitY, float hitZ) { return NotAnalyzable.class.onAnalyze(this, player, side, hitX, hitY, hitZ); } private double li$cil$oc$common$tileentity$traits$PowerInformation$$lastSentRatio; private int li$cil$oc$common$tileentity$traits$PowerInformation$$ticksUntilSync; private boolean isChangeScheduled; private boolean moving; public double globalBuffer() { return this.globalBuffer; } public void globalBuffer_$eq(double x$1) { this.globalBuffer = x$1; } public double globalBufferSize() { return this.globalBufferSize; } public void globalBufferSize_$eq(double x$1) { this.globalBufferSize = x$1; } public void func_145845_h() { PowerBalancer.class.updateEntity(this); } public Tuple2<Object, Object> distribute() { return PowerBalancer.class.distribute(this); } public double li$cil$oc$common$tileentity$traits$PowerInformation$$lastSentRatio() { return this.li$cil$oc$common$tileentity$traits$PowerInformation$$lastSentRatio; } public void li$cil$oc$common$tileentity$traits$PowerInformation$$lastSentRatio_$eq(double x$1) { this.li$cil$oc$common$tileentity$traits$PowerInformation$$lastSentRatio = x$1; } public int li$cil$oc$common$tileentity$traits$PowerInformation$$ticksUntilSync() { return this.li$cil$oc$common$tileentity$traits$PowerInformation$$ticksUntilSync; } public void li$cil$oc$common$tileentity$traits$PowerInformation$$ticksUntilSync_$eq(int x$1) { this.li$cil$oc$common$tileentity$traits$PowerInformation$$ticksUntilSync = x$1; } public void updatePowerInformation() { PowerInformation.class.updatePowerInformation((PowerInformation)this); } @SideOnly(Side.CLIENT) public void readFromNBTForClient(NBTTagCompound nbt) { PowerInformation.class.readFromNBTForClient((PowerInformation)this, nbt); } public void writeToNBTForClient(NBTTagCompound nbt) { PowerInformation.class.writeToNBTForClient((PowerInformation)this, nbt); } public boolean isChangeScheduled() { return this.isChangeScheduled; } public void isChangeScheduled_$eq(boolean x$1) { this.isChangeScheduled = x$1; } public boolean moving() { return this.moving; } public void moving_$eq(boolean x$1) { this.moving = x$1; } public double xPosition() { return Environment.class.xPosition(this); } public double yPosition() { return Environment.class.yPosition(this); } public double zPosition() { return Environment.class.zPosition(this); } public void markChanged() { Environment.class.markChanged(this); } public void initialize() { Environment.class.initialize(this); } public void dispose() { Environment.class.dispose(this); } public void onMessage(Message message) { Environment.class.onMessage(this, message); } public void onConnect(Node node) { Environment.class.onConnect(this, node); } public void onDisconnect(Node node) { Environment.class.onDisconnect(this, node); } @Method(modid = "appliedenergistics2") public boolean prepareToMove() { return Environment.class.prepareToMove(this); } @Method(modid = "appliedenergistics2") public void doneMoving() { Environment.class.doneMoving(this); } public Object[] result(Seq args) { return Environment.class.result(this, args); } public World world() { return TileEntity.class.world((TileEntity)this); } public int x() { return TileEntity.class.x((TileEntity)this); } public int y() { return TileEntity.class.y((TileEntity)this); } public int z() { return TileEntity.class.z((TileEntity)this); } public BlockPosition position() { return TileEntity.class.position((TileEntity)this); } public Block block() { return TileEntity.class.block((TileEntity)this); } public boolean isClient() { return TileEntity.class.isClient((TileEntity)this); } public boolean isServer() { return TileEntity.class.isServer((TileEntity)this); } public void func_145829_t() { TileEntity.class.validate((TileEntity)this); } public void func_145843_s() { TileEntity.class.invalidate((TileEntity)this); } public void onChunkUnload() { TileEntity.class.onChunkUnload((TileEntity)this); } public void func_145839_a(NBTTagCompound nbt) { TileEntity.class.readFromNBT((TileEntity)this, nbt); } public void func_145841_b(NBTTagCompound nbt) { TileEntity.class.writeToNBT((TileEntity)this, nbt); } public Packet func_145844_m() { return TileEntity.class.getDescriptionPacket((TileEntity)this); } public void onDataPacket(NetworkManager manager, S35PacketUpdateTileEntity packet) { TileEntity.class.onDataPacket((TileEntity)this, manager, packet); } public PowerDistributor() { TileEntity.class.$init$((TileEntity)this); Environment.class.$init$(this); PowerInformation.class.$init$((PowerInformation)this); PowerBalancer.class.$init$(this); NotAnalyzable.class.$init$(this);
/* 14 */     this.node = null;
/*    */     
/* 16 */     this.li$cil$oc$common$tileentity$PowerDistributor$$nodes = (Connector[])Array$.MODULE$.fill(6, 
/*    */         
/* 18 */         (Function0)new PowerDistributor$$anonfun$1(this), ClassTag$.MODULE$.apply(Connector.class)); } public Null$ node() { return null; } public Connector[] li$cil$oc$common$tileentity$PowerDistributor$$nodes() { return this.li$cil$oc$common$tileentity$PowerDistributor$$nodes; } public final class PowerDistributor$$anonfun$1 extends AbstractFunction0<Connector> implements Serializable { public static final long serialVersionUID = 0L; public final Connector apply() { return (Connector)Network.newNode((Environment)this.$outer, Visibility.None).withConnector(Settings$.MODULE$.get().bufferDistributor()).create(); }
/*    */      public PowerDistributor$$anonfun$1(PowerDistributor $outer) {} }
/* 20 */   public boolean isConnected() { return Predef$.MODULE$.refArrayOps((Object[])li$cil$oc$common$tileentity$PowerDistributor$$nodes()).exists((Function1)new PowerDistributor$$anonfun$isConnected$1(this)); } public final class PowerDistributor$$anonfun$isConnected$1 extends AbstractFunction1<Connector, Object> implements Serializable { public static final long serialVersionUID = 0L; public final boolean apply(Connector node) { return !(node.address() == null || node.network() == null); }
/*    */      public PowerDistributor$$anonfun$isConnected$1(PowerDistributor $outer) {} } public boolean canUpdate() {
/* 22 */     return isServer();
/*    */   }
/*    */   
/*    */   @SideOnly(Side.CLIENT)
/*    */   public boolean canConnect(ForgeDirection side) {
/* 27 */     return true;
/*    */   } public Connector sidedNode(ForgeDirection side) {
/* 29 */     return li$cil$oc$common$tileentity$PowerDistributor$$nodes()[side.ordinal()];
/*    */   }
/*    */   
/*    */   public void readFromNBTForServer(NBTTagCompound nbt)
/*    */   {
/* 34 */     Environment.class.readFromNBTForServer(this, nbt);
/*    */     
/* 36 */     Predef$.MODULE$.refArrayOps((Object[])Predef$.MODULE$.refArrayOps((Object[])ExtendedNBT$.MODULE$.extendNBTTagList(nbt.func_150295_c((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("connector").toString(), 10)).toArray(ClassTag$.MODULE$.apply(NBTTagCompound.class))).zipWithIndex(Array$.MODULE$.canBuildFrom(ClassTag$.MODULE$.apply(Tuple2.class)))).foreach((Function1)new PowerDistributor$$anonfun$readFromNBTForServer$1(this)); } public final class PowerDistributor$$anonfun$readFromNBTForServer$1 extends AbstractFunction1<Tuple2<NBTTagCompound, Object>, BoxedUnit> implements Serializable { public static final long serialVersionUID = 0L; public final void apply(Tuple2 x0$1) { Tuple2 tuple2 = x0$1; if (tuple2 != null) {
/* 37 */         NBTTagCompound tag = (NBTTagCompound)tuple2._1(); int index = tuple2._2$mcI$sp(); this.$outer.li$cil$oc$common$tileentity$PowerDistributor$$nodes()[index].load(tag); BoxedUnit boxedUnit = BoxedUnit.UNIT;
/*    */         return;
/*    */       } 
/*    */       throw new MatchError(tuple2); }
/*    */      public PowerDistributor$$anonfun$readFromNBTForServer$1(PowerDistributor $outer) {} }
/* 42 */   public void writeToNBTForServer(NBTTagCompound nbt) { Environment.class.writeToNBTForServer(this, nbt);
/*    */     
/* 44 */     if (isServer())
/* 45 */       ExtendedNBT$.MODULE$.extendNBTTagCompound(nbt).setNewTagList((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("connector").toString(), (Iterable)Predef$.MODULE$.wrapRefArray((Object[])Predef$.MODULE$.refArrayOps((Object[])li$cil$oc$common$tileentity$PowerDistributor$$nodes()).map((Function1)new PowerDistributor$$anonfun$writeToNBTForServer$1(this), Array$.MODULE$.canBuildFrom(ClassTag$.MODULE$.apply(NBTTagCompound.class)))));  } public final class PowerDistributor$$anonfun$writeToNBTForServer$1 extends AbstractFunction1<Connector, NBTTagCompound> implements Serializable { public static final long serialVersionUID = 0L; public PowerDistributor$$anonfun$writeToNBTForServer$1(PowerDistributor $outer) {} public final NBTTagCompound apply(Connector connector) {
/* 46 */       NBTTagCompound connectorNbt = new NBTTagCompound();
/* 47 */       connector.save(connectorNbt);
/* 48 */       return connectorNbt;
/*    */     } }
/*    */ 
/*    */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\common\tileentity\PowerDistributor.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */