/*    */ package li.cil.oc.common.tileentity;
/*    */ 
/*    */ @ScalaSignature(bytes = "\006\001%4A!\001\002\001\033\tA!+\0323ti>tWM\003\002\004\t\005QA/\0337fK:$\030\016^=\013\005\0251\021AB2p[6|gN\003\002\b\021\005\021qn\031\006\003\023)\t1aY5m\025\005Y\021A\0017j\007\001\031B\001\001\b\030;A\021q\"F\007\002!)\0211!\005\006\003%M\t\021\"\\5oK\016\024\030M\032;\013\003Q\t1A\\3u\023\t1\002C\001\006US2,WI\034;jif\004\"\001G\016\016\003eQ!A\007\002\002\rQ\024\030-\033;t\023\ta\022DA\006F]ZL'o\0348nK:$\bC\001\r\037\023\ty\022D\001\013Ck:$G.\0323SK\022\034Ho\0348f\003^\f'/\032\005\006C\001!\tAI\001\007y%t\027\016\036 \025\003\r\002\"\001\n\001\016\003\tAqA\n\001C\002\023\005q%\001\005j]N$\030M\\2f+\005A\003CA\025/\033\005Q#BA\026-\003%\031w.\0349p]\026tGO\003\002.\r\00511/\032:wKJL!a\f\026\003\037I+Gm\035;p]\0264\026M\\5mY\006Da!\r\001!\002\023A\023!C5ogR\fgnY3!\021\035\031\004A1A\005\002Q\nAA\\8eKV\tQ\007\005\0027w5\tqG\003\0029s\0059a.\032;x_J\\'B\001\036\007\003\r\t\007/[\005\003y]\022\021bQ8na>tWM\034;\t\ry\002\001\025!\0036\003\025qw\016Z3!\021\035\001\005A1A\005\002\005\013\021\002Z;n[ftu\016Z3\026\003\t\003\"AN\"\n\005\021;$\001\002(pI\026DaA\022\001!\002\023\021\025A\0033v[6Lhj\0343fA!)\001\n\001C!\023\006I1-\0318Va\022\fG/\032\013\002\025B\0211JT\007\002\031*\tQ*A\003tG\006d\027-\003\002P\031\n9!i\\8mK\006t\007\"B)\001\t\003\022\026\001\006:fC\0224%o\\7O\005R3uN]*feZ,'\017\006\002T-B\0211\nV\005\003+2\023A!\0268ji\")q\013\025a\0011\006\031aN\031;\021\005e[V\"\001.\013\005]\013\022B\001/[\0059q%\t\026+bO\016{W\016]8v]\022DQA\030\001\005B}\0131c\036:ji\026$vN\024\"U\r>\0248+\032:wKJ$\"a\0251\t\013]k\006\031\001-\t\013\t\004A\021K2\002-=t'+\0323ti>tW-\0238qkR\034\005.\0318hK\022$\"a\0253\t\013\025\f\007\031\0014\002\t\005\024xm\035\t\0031\035L!\001[\r\0031I+Gm\035;p]\026\034\005.\0318hK\022,e/\0328u\003J<7\017")
/*    */ public class Redstone extends TileEntity implements Environment, BundledRedstoneAware {
/*    */   private final RedstoneVanilla instance;
/*    */   private final Component node;
/*    */   private final Node dummyNode;
/*    */   private final int[][] _bundledInput;
/*    */   private final int[][] _rednetInput;
/*    */   private final int[][] _bundledOutput;
/*    */   
/* 12 */   public int[][] _bundledInput() { return this._bundledInput; } private final int[] _input; private final int[] _output; private boolean _isOutputEnabled; private boolean shouldUpdateInput; private boolean isChangeScheduled; private boolean moving; public int[][] _rednetInput() { return this._rednetInput; } public int[][] _bundledOutput() { return this._bundledOutput; } public void li$cil$oc$common$tileentity$traits$BundledRedstoneAware$_setter_$_bundledInput_$eq(int[][] x$1) { this._bundledInput = x$1; } public void li$cil$oc$common$tileentity$traits$BundledRedstoneAware$_setter_$_rednetInput_$eq(int[][] x$1) { this._rednetInput = x$1; } public void li$cil$oc$common$tileentity$traits$BundledRedstoneAware$_setter_$_bundledOutput_$eq(int[][] x$1) { this._bundledOutput = x$1; } public void setOutputEnabled(boolean value) { BundledRedstoneAware.class.setOutputEnabled(this, value); } public int[][] getBundledInput() { return BundledRedstoneAware.class.getBundledInput(this); } public int[] getBundledInput(ForgeDirection side) { return BundledRedstoneAware.class.getBundledInput(this, side); } public int getBundledInput(ForgeDirection side, int color) { return BundledRedstoneAware.class.getBundledInput(this, side, color); } public void setBundledInput(ForgeDirection side, int color, int newValue) { BundledRedstoneAware.class.setBundledInput(this, side, color, newValue); } public void setBundledInput(ForgeDirection side, int[] newBundledInput) { BundledRedstoneAware.class.setBundledInput(this, side, newBundledInput); } public void setRednetInput(ForgeDirection side, int color, int value) { BundledRedstoneAware.class.setRednetInput(this, side, color, value); } public void updateInput(int[][] inputs, ForgeDirection side, int color, int newValue) { BundledRedstoneAware.class.updateInput(this, inputs, side, color, newValue); } public int[][] getBundledOutput() { return BundledRedstoneAware.class.getBundledOutput(this); } public int[] getBundledOutput(ForgeDirection side) { return BundledRedstoneAware.class.getBundledOutput(this, side); } public int getBundledOutput(ForgeDirection side, int color) { return BundledRedstoneAware.class.getBundledOutput(this, side, color); } public void notifyChangedSide(ForgeDirection side) { BundledRedstoneAware.class.notifyChangedSide(this, side); } public boolean setBundledOutput(ForgeDirection side, int color, int value) { return BundledRedstoneAware.class.setBundledOutput(this, side, color, value); } public boolean setBundledOutput(ForgeDirection side, Map values) { return BundledRedstoneAware.class.setBundledOutput(this, side, values); } public boolean setBundledOutput(Map values) { return BundledRedstoneAware.class.setBundledOutput(this, values); } public void updateRedstoneInput(ForgeDirection side) { BundledRedstoneAware.class.updateRedstoneInput(this, side); } public void onRedstoneOutputEnabledChanged() { BundledRedstoneAware.class.onRedstoneOutputEnabledChanged(this); } @Method(modid = "RedLogic") public byte[] getBundledCableStrength(int blockFace, int toDirection) { return BundledRedstoneAware.class.getBundledCableStrength(this, blockFace, toDirection); } @Method(modid = "RedLogic") public void onBundledInputChanged() { BundledRedstoneAware.class.onBundledInputChanged(this); } @Method(modid = "ProjRed|Transmission") public boolean canConnectBundled(int side) { return BundledRedstoneAware.class.canConnectBundled(this, side); } @Method(modid = "ProjRed|Transmission") public byte[] getBundledSignal(int side) { return BundledRedstoneAware.class.getBundledSignal(this, side); } public int[] _input() { return this._input; } public int[] _output() { return this._output; } public boolean _isOutputEnabled() { return this._isOutputEnabled; } public void _isOutputEnabled_$eq(boolean x$1) { this._isOutputEnabled = x$1; } public boolean shouldUpdateInput() { return this.shouldUpdateInput; } public void shouldUpdateInput_$eq(boolean x$1) { this.shouldUpdateInput = x$1; } public void li$cil$oc$common$tileentity$traits$RedstoneAware$_setter_$_input_$eq(int[] x$1) { this._input = x$1; } public void li$cil$oc$common$tileentity$traits$RedstoneAware$_setter_$_output_$eq(int[] x$1) { this._output = x$1; } public boolean isOutputEnabled() { return RedstoneAware.class.isOutputEnabled((RedstoneAware)this); } public Option<Object> getObjectFuzzy(Map map, int key) { return RedstoneAware.class.getObjectFuzzy((RedstoneAware)this, map, key); } public Option<Object> valueToInt(Object value) { return RedstoneAware.class.valueToInt((RedstoneAware)this, value); } public int[] getInput() { return RedstoneAware.class.getInput((RedstoneAware)this); } public int getInput(ForgeDirection side) { return RedstoneAware.class.getInput((RedstoneAware)this, side); } public void setInput(ForgeDirection side, int newInput) { RedstoneAware.class.setInput((RedstoneAware)this, side, newInput); } public void setInput(int[] values) { RedstoneAware.class.setInput((RedstoneAware)this, values); } public int maxInput() { return RedstoneAware.class.maxInput((RedstoneAware)this); } public int[] getOutput() { return RedstoneAware.class.getOutput((RedstoneAware)this); } public int getOutput(ForgeDirection side) { return RedstoneAware.class.getOutput((RedstoneAware)this, side); } public boolean setOutput(ForgeDirection side, int value) { return RedstoneAware.class.setOutput((RedstoneAware)this, side, value); } public boolean setOutput(Map values) { return RedstoneAware.class.setOutput((RedstoneAware)this, values); } public void checkRedstoneInputChanged() { RedstoneAware.class.checkRedstoneInputChanged((RedstoneAware)this); } public void func_145845_h() { RedstoneAware.class.updateEntity((RedstoneAware)this); } public void func_145829_t() { RedstoneAware.class.validate((RedstoneAware)this); } @SideOnly(Side.CLIENT) public void readFromNBTForClient(NBTTagCompound nbt) { RedstoneAware.class.readFromNBTForClient((RedstoneAware)this, nbt); } public void writeToNBTForClient(NBTTagCompound nbt) { RedstoneAware.class.writeToNBTForClient((RedstoneAware)this, nbt); } public void onRedstoneOutputChanged(ForgeDirection side) { RedstoneAware.class.onRedstoneOutputChanged((RedstoneAware)this, side); } @Method(modid = "RedLogic") public boolean connects(IWire wire, int blockFace, int fromDirection) { return RedstoneAware.class.connects((RedstoneAware)this, wire, blockFace, fromDirection); } @Method(modid = "RedLogic") public boolean connectsAroundCorner(IWire wire, int blockFace, int fromDirection) { return RedstoneAware.class.connectsAroundCorner((RedstoneAware)this, wire, blockFace, fromDirection); } @Method(modid = "RedLogic") public short getEmittedSignalStrength(int blockFace, int toDirection) { return RedstoneAware.class.getEmittedSignalStrength((RedstoneAware)this, blockFace, toDirection); } @Method(modid = "RedLogic") public void onRedstoneInputChanged() { RedstoneAware.class.onRedstoneInputChanged((RedstoneAware)this); } public ForgeDirection toLocal(ForgeDirection value) { return RotationAware.class.toLocal((RotationAware)this, value); } public ForgeDirection toGlobal(ForgeDirection value) { return RotationAware.class.toGlobal((RotationAware)this, value); } public boolean isChangeScheduled() { return this.isChangeScheduled; } public void isChangeScheduled_$eq(boolean x$1) { this.isChangeScheduled = x$1; } public boolean moving() { return this.moving; } public void moving_$eq(boolean x$1) { this.moving = x$1; } public double xPosition() { return Environment.class.xPosition(this); } public double yPosition() { return Environment.class.yPosition(this); } public double zPosition() { return Environment.class.zPosition(this); } public void markChanged() { Environment.class.markChanged(this); } public boolean isConnected() { return Environment.class.isConnected(this); } public void initialize() { Environment.class.initialize(this); } public void dispose() { Environment.class.dispose(this); } public void onMessage(Message message) { Environment.class.onMessage(this, message); } public void onConnect(Node node) { Environment.class.onConnect(this, node); } public void onDisconnect(Node node) { Environment.class.onDisconnect(this, node); } @Method(modid = "appliedenergistics2") public boolean prepareToMove() { return Environment.class.prepareToMove(this); } @Method(modid = "appliedenergistics2") public void doneMoving() { Environment.class.doneMoving(this); } public Object[] result(Seq args) { return Environment.class.result(this, args); } public World world() { return TileEntity.class.world((TileEntity)this); } public int x() { return TileEntity.class.x((TileEntity)this); } public int y() { return TileEntity.class.y((TileEntity)this); } public int z() { return TileEntity.class.z((TileEntity)this); } public BlockPosition position() { return TileEntity.class.position((TileEntity)this); } public Block block() { return TileEntity.class.block((TileEntity)this); } public boolean isClient() { return TileEntity.class.isClient((TileEntity)this); } public boolean isServer() { return TileEntity.class.isServer((TileEntity)this); } public void func_145843_s() { TileEntity.class.invalidate((TileEntity)this); } public void onChunkUnload() { TileEntity.class.onChunkUnload((TileEntity)this); } public void func_145839_a(NBTTagCompound nbt) { TileEntity.class.readFromNBT((TileEntity)this, nbt); } public void func_145841_b(NBTTagCompound nbt) { TileEntity.class.writeToNBT((TileEntity)this, nbt); } public Packet func_145844_m() { return TileEntity.class.getDescriptionPacket((TileEntity)this); } public void onDataPacket(NetworkManager manager, S35PacketUpdateTileEntity packet) { TileEntity.class.onDataPacket((TileEntity)this, manager, packet); } public Redstone() { TileEntity.class.$init$((TileEntity)this); Environment.class.$init$(this); RotationAware.class.$init$((RotationAware)this); RedstoneAware.class.$init$((RedstoneAware)this); BundledRedstoneAware.class.$init$(this);
/* 13 */     this.instance = 
/* 14 */       BundledRedstone$.MODULE$.isAvailable() ? 
/* 15 */       (RedstoneVanilla)new li.cil.oc.server.component.Redstone.Bundled((EnvironmentHost)this) : 
/*    */       
/* 17 */       (RedstoneVanilla)new li.cil.oc.server.component.Redstone.Vanilla((EnvironmentHost)this);
/* 18 */     instance().wakeNeighborsOnly_$eq(false);
/* 19 */     this.node = instance().node();
/*    */     
/* 21 */     node().setVisibility(Visibility.Network);
/* 22 */     _isOutputEnabled_$eq(true);
/*    */ 
/*    */     
/* 25 */     this.dummyNode = (node() == null) ? null : Network.newNode((Environment)this, Visibility.None).create(); } public RedstoneVanilla instance() { return this.instance; } public Component node() { return this.node; }
/*    */   public Node dummyNode() { return this.dummyNode; }
/* 27 */   public boolean canUpdate() { return isServer(); }
/*    */ 
/*    */ 
/*    */   
/*    */   public void readFromNBTForServer(NBTTagCompound nbt) {
/* 32 */     BundledRedstoneAware.class.readFromNBTForServer(this, nbt);
/* 33 */     instance().load(nbt.func_74775_l((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("redstone").toString()));
/*    */   }
/*    */   
/*    */   public void writeToNBTForServer(NBTTagCompound nbt) {
/* 37 */     BundledRedstoneAware.class.writeToNBTForServer(this, nbt);
/* 38 */     ExtendedNBT$.MODULE$.extendNBTTagCompound(nbt).setNewCompoundTag((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("redstone").toString(), (Function1)new Redstone$$anonfun$writeToNBTForServer$1(this)); } public final class Redstone$$anonfun$writeToNBTForServer$1 extends AbstractFunction1<NBTTagCompound, BoxedUnit> implements Serializable { public static final long serialVersionUID = 0L; public final void apply(NBTTagCompound nbt) { this.$outer.instance().save(nbt); }
/*    */ 
/*    */     
/*    */     public Redstone$$anonfun$writeToNBTForServer$1(Redstone $outer) {} }
/*    */   
/*    */   public void onRedstoneInputChanged(RedstoneChangedEventArgs args) {
/* 44 */     RedstoneAware.class.onRedstoneInputChanged((RedstoneAware)this, args);
/* 45 */     if (node() != null && node().network() != null) {
/* 46 */       node().connect(dummyNode());
/* 47 */       dummyNode().sendToNeighbors("redstone.changed", new Object[] { args });
/*    */     } 
/*    */   }
/*    */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\common\tileentity\Redstone.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */