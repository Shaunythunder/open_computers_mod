/*     */ package li.cil.oc.common.tileentity;
/*     */ 
/*     */ 
/*     */ @ScalaSignature(bytes = "\006\001\t\035a\001B\001\003\0015\021AaQ1tK*\0211\001B\001\013i&dW-\0328uSRL(BA\003\007\003\031\031w.\\7p]*\021q\001C\001\003_\016T!!\003\006\002\007\rLGNC\001\f\003\ta\027n\001\001\024\017\001qq#\b\021$UA\021q\"F\007\002!)\0211!\005\006\003%M\t\021\"\\5oK\016\024\030M\032;\013\003Q\t1A\\3u\023\t1\002C\001\006US2,WI\034;jif\004\"\001G\016\016\003eQ!A\007\002\002\rQ\024\030-\033;t\023\ta\022DA\007Q_^,'/Q2dKB$xN\035\t\0031yI!aH\r\003\021\r{W\016];uKJ\004\"\001G\021\n\005\tJ\"aB\"pY>\024X\r\032\t\003I%j\021!\n\006\003M\035\n\001\"\0338uKJt\027\r\034\006\003Q\031\t1!\0319j\023\t\tQ\005\005\002,]5\tAF\003\002.O\0051AM]5wKJL!a\f\027\003\025\021+g/[2f\023:4w\016\003\0052\001\t\005\r\021\"\0013\003\021!\030.\032:\026\003M\002\"\001N\034\016\003UR\021AN\001\006g\016\fG.Y\005\003qU\0221!\0238u\021!Q\004A!a\001\n\003Y\024\001\003;jKJ|F%Z9\025\005qz\004C\001\033>\023\tqTG\001\003V]&$\bb\002!:\003\003\005\raM\001\004q\022\n\004\002\003\"\001\005\003\005\013\025B\032\002\013QLWM\035\021\t\013\021\003A\021A#\002\rqJg.\033;?)\t1\005\n\005\002H\0015\t!\001C\0032\007\002\0071\007C\003E\001\021\005!\nF\001G\021\035a\005\0011A\005\0025\013A\003\\1ti\032KG.Z*zgR,W.Q2dKN\034X#\001(\021\005Qz\025B\001)6\005\021auN\\4\t\017I\003\001\031!C\001'\006AB.Y:u\r&dWmU=ti\026l\027iY2fgN|F%Z9\025\005q\"\006b\002!R\003\003\005\rA\024\005\007-\002\001\013\025\002(\002+1\f7\017\036$jY\026\034\026p\035;f[\006\0337-Z:tA!9\001\f\001a\001\n\003i\025a\0057bgRtU\r^<pe.\f5\r^5wSRL\bb\002.\001\001\004%\taW\001\030Y\006\034HOT3uo>\0248.Q2uSZLG/_0%KF$\"\001\020/\t\017\001K\026\021!a\001\035\"1a\f\001Q!\n9\013A\003\\1ti:+Go^8sW\006\033G/\033<jif\004\003\002\0031\001\021\013\007IQB1\002\025\021,g/[2f\023:4w.F\001c!\021\031\007N\0336\016\003\021T!!\0324\002\023%lW.\036;bE2,'BA46\003)\031w\016\0347fGRLwN\\\005\003S\022\0241!T1q!\tY\007/D\001m\025\tig.\001\003mC:<'\"A8\002\t)\fg/Y\005\003c2\024aa\025;sS:<\007\002C:\001\021\003\005\013U\0022\002\027\021,g/[2f\023:4w\016\t\005\006k\002!\tE^\001\016O\026$H)\032<jG\026LeNZ8\025\003]\004B\001_>}y6\t\021P\003\002{]\006!Q\017^5m\023\tI\027\020E\002~\003\003q!\001\016@\n\005},\024A\002)sK\022,g-C\002r\003\007Q!a`\033\t\017\005\035\001\001\"\025\002\n\005a\001.Y:D_:tWm\031;peR!\0211BA\t!\r!\024QB\005\004\003\037)$a\002\"p_2,\027M\034\005\t\003'\t)\0011\001\002\026\005!1/\0333f!\021\t9\"!\t\016\005\005e!b\001>\002\034)\031Q!!\b\013\007\005}1#\001\bnS:,7M]1gi\032|'oZ3\n\t\005\r\022\021\004\002\017\r>\024x-\032#je\026\034G/[8oQ!\t)!a\n\002@\005\005\003\003BA\025\003wi!!a\013\013\t\0055\022qF\001\013e\026d\027-\0368dQ\026\024(\002BA\031\003g\t1AZ7m\025\021\t)$a\016\002\t5|Gm\035\006\003\003s\t1a\0319x\023\021\ti$a\013\003\021MKG-Z(oYf\fQA^1mk\026$#!a\021\n\t\005\025\023qI\001\007\0072KUI\024+\013\t\005%\0231F\001\005'&$W\rC\004\002N\001!\t&a\024\002\023\r|gN\\3di>\024H\003BA)\003G\002R\001NA*\003/J1!!\0266\005\031y\005\017^5p]B!\021\021LA0\033\t\tYFC\002\002^\035\nqA\\3uo>\0248.\003\003\002b\005m#!C\"p]:,7\r^8s\021!\t\031\"a\023A\002\005U\001bBA4\001\021\005\023\021N\001\021K:,'oZ=UQJ|Wo\0325qkR,\"!a\033\021\007Q\ni'C\002\002pU\022a\001R8vE2,\007bBA:\001\021\005\023QO\001\tO\026$xk\034:mIV\021\021q\017\t\005\003s\ny(\004\002\002|)\031\021QP\t\002\013]|'\017\0343\n\t\005\005\0251\020\002\006/>\024H\016\032\005\b\003\013\003A\021AAD\003)I7o\021:fCRLg/Z\013\003\003\027Aq!a#\001\t\003\ni)A\007d_6\004xN\\3oiNcw\016\036\013\004g\005=\005bBAI\003\023\003\r\001`\001\bC\022$'/Z:t\021\035\t)\n\001C!\003/\013\021bY1o+B$\027\r^3\025\005\005-\001bBAN\001\021\005\023QT\001\rkB$\027\r^3F]RLG/\037\013\002y!9\021\021\025\001\005B\005\r\026\001\006:fC\0224%o\\7O\005R3uN]*feZ,'\017F\002=\003KC\001\"a*\002 \002\007\021\021V\001\004]\n$\b\003BAV\003_k!!!,\013\007\005\035\026#\003\003\0022\0065&A\004(C)R\013wmQ8na>,h\016\032\005\b\003k\003A\021IA\\\003M9(/\033;f)>t%\t\026$peN+'O^3s)\ra\024\021\030\005\t\003O\013\031\f1\001\002*\"9\021Q\030\001\005R\005}\026aC8o\023R,W.\0213eK\022$R\001PAa\003\013Dq!a1\002<\002\0071'\001\003tY>$\b\002CAd\003w\003\r!!3\002\013M$\030mY6\021\t\005-\027\021[\007\003\003\033T1!a4\022\003\021IG/Z7\n\t\005M\027Q\032\002\n\023R,Wn\025;bG.Dq!a6\001\t#\nI.A\007p]&#X-\034*f[>4X\r\032\013\006y\005m\027Q\034\005\b\003\007\f)\0161\0014\021!\t9-!6A\002\005%\007bBAq\001\021\005\0231]\001\021O\026$8+\033>f\023:4XM\034;pef$\022a\r\005\b\003O\004A\021IAu\003EI7/V:fC\ndWMQ=QY\006LXM\035\013\005\003\027\tY\017\003\005\002n\006\025\b\031AAx\003\031\001H.Y=feB!\021\021_A}\033\t\t\031P\003\003\002n\006U(bAA|#\0051QM\034;jifLA!a?\002t\naQI\034;jif\004F.Y=fe\"9\021q \001\005B\t\005\021AE5t\023R,WNV1mS\0224uN]*m_R$b!a\003\003\004\t\025\001bBAb\003{\004\ra\r\005\t\003\017\fi\0201\001\002J\002")
/*     */ public class Case extends TileEntity implements PowerAcceptor, Computer, Colored, Case, DeviceInfo {
/*     */   private int tier;
/*     */   private long lastFileSystemAccess;
/*     */   private long lastNetworkActivity;
/*     */   private Map<String, String> deviceInfo;
/*     */   private int li$cil$oc$common$tileentity$traits$Colored$$_color;
/*     */   private final Machine li$cil$oc$common$tileentity$traits$Computer$$_machine;
/*     */   private boolean li$cil$oc$common$tileentity$traits$Computer$$_isRunning;
/*     */   private boolean hasErrored;
/*     */   private final Set<String> li$cil$oc$common$tileentity$traits$Computer$$_users;
/*     */   private boolean _isAbstractBusAvailable;
/*     */   private final Object[] fakeInterface;
/*     */   private final int[][] _bundledInput;
/*     */   private final int[][] _rednetInput;
/*     */   private final int[][] _bundledOutput;
/*     */   private final int[] _input;
/*     */   private final int[] _output;
/*     */   private boolean _isOutputEnabled;
/*     */   private boolean shouldUpdateInput;
/*     */   private final ForgeDirection[] li$cil$oc$common$tileentity$traits$Rotatable$$pitch2Direction;
/*     */   private final ForgeDirection[] li$cil$oc$common$tileentity$traits$Rotatable$$yaw2Direction;
/*     */   
/*  27 */   public int li$cil$oc$common$tileentity$traits$Colored$$_color() { return this.li$cil$oc$common$tileentity$traits$Colored$$_color; } private ForgeDirection li$cil$oc$common$tileentity$traits$Rotatable$$_pitch; private ForgeDirection li$cil$oc$common$tileentity$traits$Rotatable$$_yaw; private final ArrayBuffer<Option<ItemStack>> li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingRemovalsActual; private final ArrayBuffer<Option<ItemStack>> li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingAddsActual; private boolean li$cil$oc$common$tileentity$traits$ComponentInventory$$updateScheduled; private Option<ManagedEnvironment>[] li$cil$oc$common$inventory$ComponentInventory$$_components; private boolean isSizeInventoryReady; private final ArrayBuffer<ManagedEnvironment> updatingComponents; private final Option<ItemStack>[] li$cil$oc$common$tileentity$traits$Inventory$$inventory; private boolean isChangeScheduled; private boolean moving; private int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$omega; private int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$torque; private long li$cil$oc$common$tileentity$traits$power$RotaryCraft$$power; private int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$alpha; private double li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Classic$$conversionBuffer; private double li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Experimental$$conversionBuffer; private boolean addedToIC2PowerGrid; @Method(modid = "factorization") private final Object li$cil$oc$common$tileentity$traits$power$Factorization$$charge; private Option<Object> li$cil$oc$common$tileentity$traits$power$AppliedEnergistics2$$node; private volatile byte bitmap$0; public void li$cil$oc$common$tileentity$traits$Colored$$_color_$eq(int x$1) { this.li$cil$oc$common$tileentity$traits$Colored$$_color = x$1; } public int color() { return Colored.class.color(this); } public void color_$eq(int value) { Colored.class.color_$eq(this, value); } public boolean consumesDye() { return Colored.class.consumesDye(this); } public int getColor() { return Colored.class.getColor(this); } public void setColor(int value) { Colored.class.setColor(this, value); } public void onColorChanged() { Colored.class.onColorChanged(this); } @SideOnly(Side.CLIENT) public void readFromNBTForClient(NBTTagCompound nbt) { Colored.class.readFromNBTForClient(this, nbt); } public void writeToNBTForClient(NBTTagCompound nbt) { Colored.class.writeToNBTForClient(this, nbt); } private Machine li$cil$oc$common$tileentity$traits$Computer$$_machine$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x2) == 0) { this.li$cil$oc$common$tileentity$traits$Computer$$_machine = Computer.class.li$cil$oc$common$tileentity$traits$Computer$$_machine(this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x2); }  return this.li$cil$oc$common$tileentity$traits$Computer$$_machine; }  } public Machine li$cil$oc$common$tileentity$traits$Computer$$_machine() { return ((byte)(this.bitmap$0 & 0x2) == 0) ? li$cil$oc$common$tileentity$traits$Computer$$_machine$lzycompute() : this.li$cil$oc$common$tileentity$traits$Computer$$_machine; } public boolean li$cil$oc$common$tileentity$traits$Computer$$_isRunning() { return this.li$cil$oc$common$tileentity$traits$Computer$$_isRunning; } public void li$cil$oc$common$tileentity$traits$Computer$$_isRunning_$eq(boolean x$1) { this.li$cil$oc$common$tileentity$traits$Computer$$_isRunning = x$1; } public boolean hasErrored() { return this.hasErrored; } public void hasErrored_$eq(boolean x$1) { this.hasErrored = x$1; } public Set<String> li$cil$oc$common$tileentity$traits$Computer$$_users() { return this.li$cil$oc$common$tileentity$traits$Computer$$_users; } public void li$cil$oc$common$tileentity$traits$Computer$_setter_$li$cil$oc$common$tileentity$traits$Computer$$_users_$eq(Set<String> x$1) { this.li$cil$oc$common$tileentity$traits$Computer$$_users = x$1; } public Machine machine() { return Computer.class.machine(this); } public Node node() { return Computer.class.node(this); } public Option<String> runSound() { return Computer.class.runSound(this); } public boolean canInteract(String player) { return Computer.class.canInteract(this, player); } public boolean isRunning() { return Computer.class.isRunning(this); } public void setRunning(boolean value) { Computer.class.setRunning(this, value); } @SideOnly(Side.CLIENT) public void setUsers(Iterable list) { Computer.class.setUsers(this, list); } public EnumSet<StateAware.State> getCurrentState() { return Computer.class.getCurrentState(this); } public Iterable<ItemStack> internalComponents() { return Computer.class.internalComponents(this); } public Iterable<ManagedEnvironment> installedComponents() { return Computer.class.installedComponents(this); } public void onMachineConnect(Node node) { Computer.class.onMachineConnect(this, node); } public void onMachineDisconnect(Node node) { Computer.class.onMachineDisconnect(this, node); } public boolean hasAbstractBusCard() { return Computer.class.hasAbstractBusCard(this); } public boolean hasRedstoneCard() { return Computer.class.hasRedstoneCard(this); } public void updateComputer() { Computer.class.updateComputer(this); } public void onRunningChanged() { Computer.class.onRunningChanged(this); } public void dispose() { Computer.class.dispose(this); } public void func_70296_d() { Computer.class.markDirty(this); } public void onRotationChanged() { Computer.class.onRotationChanged(this); } public void onRedstoneInputChanged(RedstoneChangedEventArgs args) { Computer.class.onRedstoneInputChanged(this, args); } public Node[] onAnalyze(EntityPlayer player, int side, float hitX, float hitY, float hitZ) { return Computer.class.onAnalyze(this, player, side, hitX, hitY, hitZ); } @Method(modid = "BuildCraft|Core") public boolean hasWork() { return StateAware.class.hasWork((StateAware)this); } public boolean _isAbstractBusAvailable() { return this._isAbstractBusAvailable; } public void _isAbstractBusAvailable_$eq(boolean x$1) { this._isAbstractBusAvailable = x$1; } private Object[] fakeInterface$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x4) == 0) { this.fakeInterface = AbstractBusAware.class.fakeInterface((AbstractBusAware)this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x4); }  return this.fakeInterface; }  } public Object[] fakeInterface() { return ((byte)(this.bitmap$0 & 0x4) == 0) ? fakeInterface$lzycompute() : this.fakeInterface; } @Method(modid = "StargateTech2") public IBusInterface[] getInterfaces(int side) { return AbstractBusAware.class.getInterfaces((AbstractBusAware)this, side); } public int getXCoord() { return AbstractBusAware.class.getXCoord((AbstractBusAware)this); } public int getYCoord() { return AbstractBusAware.class.getYCoord((AbstractBusAware)this); } public int getZCoord() { return AbstractBusAware.class.getZCoord((AbstractBusAware)this); } public boolean isAbstractBusAvailable() { return AbstractBusAware.class.isAbstractBusAvailable((AbstractBusAware)this); } public AbstractBusAware isAbstractBusAvailable_$eq(boolean value) { return AbstractBusAware.class.isAbstractBusAvailable_$eq((AbstractBusAware)this, value); } public void onDisconnect(Node node) { AbstractBusAware.class.onDisconnect((AbstractBusAware)this, node); } public int[][] _bundledInput() { return this._bundledInput; } public int[][] _rednetInput() { return this._rednetInput; } public int[][] _bundledOutput() { return this._bundledOutput; } public void li$cil$oc$common$tileentity$traits$BundledRedstoneAware$_setter_$_bundledInput_$eq(int[][] x$1) { this._bundledInput = x$1; } public void li$cil$oc$common$tileentity$traits$BundledRedstoneAware$_setter_$_rednetInput_$eq(int[][] x$1) { this._rednetInput = x$1; } public void li$cil$oc$common$tileentity$traits$BundledRedstoneAware$_setter_$_bundledOutput_$eq(int[][] x$1) { this._bundledOutput = x$1; } public void setOutputEnabled(boolean value) { BundledRedstoneAware.class.setOutputEnabled((BundledRedstoneAware)this, value); } public int[][] getBundledInput() { return BundledRedstoneAware.class.getBundledInput((BundledRedstoneAware)this); } public int[] getBundledInput(ForgeDirection side) { return BundledRedstoneAware.class.getBundledInput((BundledRedstoneAware)this, side); } public int getBundledInput(ForgeDirection side, int color) { return BundledRedstoneAware.class.getBundledInput((BundledRedstoneAware)this, side, color); } public void setBundledInput(ForgeDirection side, int color, int newValue) { BundledRedstoneAware.class.setBundledInput((BundledRedstoneAware)this, side, color, newValue); } public void setBundledInput(ForgeDirection side, int[] newBundledInput) { BundledRedstoneAware.class.setBundledInput((BundledRedstoneAware)this, side, newBundledInput); } public void setRednetInput(ForgeDirection side, int color, int value) { BundledRedstoneAware.class.setRednetInput((BundledRedstoneAware)this, side, color, value); } public void updateInput(int[][] inputs, ForgeDirection side, int color, int newValue) { BundledRedstoneAware.class.updateInput((BundledRedstoneAware)this, inputs, side, color, newValue); } public int[][] getBundledOutput() { return BundledRedstoneAware.class.getBundledOutput((BundledRedstoneAware)this); } public int[] getBundledOutput(ForgeDirection side) { return BundledRedstoneAware.class.getBundledOutput((BundledRedstoneAware)this, side); } public int getBundledOutput(ForgeDirection side, int color) { return BundledRedstoneAware.class.getBundledOutput((BundledRedstoneAware)this, side, color); } public void notifyChangedSide(ForgeDirection side) { BundledRedstoneAware.class.notifyChangedSide((BundledRedstoneAware)this, side); } public boolean setBundledOutput(ForgeDirection side, int color, int value) { return BundledRedstoneAware.class.setBundledOutput((BundledRedstoneAware)this, side, color, value); } public boolean setBundledOutput(ForgeDirection side, Map values) { return BundledRedstoneAware.class.setBundledOutput((BundledRedstoneAware)this, side, values); } public boolean setBundledOutput(Map values) { return BundledRedstoneAware.class.setBundledOutput((BundledRedstoneAware)this, values); } public void updateRedstoneInput(ForgeDirection side) { BundledRedstoneAware.class.updateRedstoneInput((BundledRedstoneAware)this, side); } public void onRedstoneOutputEnabledChanged() { BundledRedstoneAware.class.onRedstoneOutputEnabledChanged((BundledRedstoneAware)this); } @Method(modid = "RedLogic") public byte[] getBundledCableStrength(int blockFace, int toDirection) { return BundledRedstoneAware.class.getBundledCableStrength((BundledRedstoneAware)this, blockFace, toDirection); } @Method(modid = "RedLogic") public void onBundledInputChanged() { BundledRedstoneAware.class.onBundledInputChanged((BundledRedstoneAware)this); } @Method(modid = "ProjRed|Transmission") public boolean canConnectBundled(int side) { return BundledRedstoneAware.class.canConnectBundled((BundledRedstoneAware)this, side); } @Method(modid = "ProjRed|Transmission") public byte[] getBundledSignal(int side) { return BundledRedstoneAware.class.getBundledSignal((BundledRedstoneAware)this, side); } public int[] _input() { return this._input; } public int[] _output() { return this._output; } public boolean _isOutputEnabled() { return this._isOutputEnabled; } public void _isOutputEnabled_$eq(boolean x$1) { this._isOutputEnabled = x$1; } public boolean shouldUpdateInput() { return this.shouldUpdateInput; } public void shouldUpdateInput_$eq(boolean x$1) { this.shouldUpdateInput = x$1; } public void li$cil$oc$common$tileentity$traits$RedstoneAware$_setter_$_input_$eq(int[] x$1) { this._input = x$1; } public void li$cil$oc$common$tileentity$traits$RedstoneAware$_setter_$_output_$eq(int[] x$1) { this._output = x$1; } public boolean isOutputEnabled() { return RedstoneAware.class.isOutputEnabled((RedstoneAware)this); } public Option<Object> getObjectFuzzy(Map map, int key) { return RedstoneAware.class.getObjectFuzzy((RedstoneAware)this, map, key); } public Option<Object> valueToInt(Object value) { return RedstoneAware.class.valueToInt((RedstoneAware)this, value); } public int[] getInput() { return RedstoneAware.class.getInput((RedstoneAware)this); } public int getInput(ForgeDirection side) { return RedstoneAware.class.getInput((RedstoneAware)this, side); } public void setInput(ForgeDirection side, int newInput) { RedstoneAware.class.setInput((RedstoneAware)this, side, newInput); } public void setInput(int[] values) { RedstoneAware.class.setInput((RedstoneAware)this, values); } public int maxInput() { return RedstoneAware.class.maxInput((RedstoneAware)this); } public int[] getOutput() { return RedstoneAware.class.getOutput((RedstoneAware)this); } public int getOutput(ForgeDirection side) { return RedstoneAware.class.getOutput((RedstoneAware)this, side); } public boolean setOutput(ForgeDirection side, int value) { return RedstoneAware.class.setOutput((RedstoneAware)this, side, value); } public boolean setOutput(Map values) { return RedstoneAware.class.setOutput((RedstoneAware)this, values); } public void checkRedstoneInputChanged() { RedstoneAware.class.checkRedstoneInputChanged((RedstoneAware)this); } public void func_145829_t() { RedstoneAware.class.validate((RedstoneAware)this); } public void onRedstoneOutputChanged(ForgeDirection side) { RedstoneAware.class.onRedstoneOutputChanged((RedstoneAware)this, side); } @Method(modid = "RedLogic") public boolean connects(IWire wire, int blockFace, int fromDirection) { return RedstoneAware.class.connects((RedstoneAware)this, wire, blockFace, fromDirection); } @Method(modid = "RedLogic") public boolean connectsAroundCorner(IWire wire, int blockFace, int fromDirection) { return RedstoneAware.class.connectsAroundCorner((RedstoneAware)this, wire, blockFace, fromDirection); } @Method(modid = "RedLogic") public short getEmittedSignalStrength(int blockFace, int toDirection) { return RedstoneAware.class.getEmittedSignalStrength((RedstoneAware)this, blockFace, toDirection); } @Method(modid = "RedLogic") public void onRedstoneInputChanged() { RedstoneAware.class.onRedstoneInputChanged((RedstoneAware)this); } public ForgeDirection[] li$cil$oc$common$tileentity$traits$Rotatable$$pitch2Direction() { return this.li$cil$oc$common$tileentity$traits$Rotatable$$pitch2Direction; } public ForgeDirection[] li$cil$oc$common$tileentity$traits$Rotatable$$yaw2Direction() { return this.li$cil$oc$common$tileentity$traits$Rotatable$$yaw2Direction; } public ForgeDirection li$cil$oc$common$tileentity$traits$Rotatable$$_pitch() { return this.li$cil$oc$common$tileentity$traits$Rotatable$$_pitch; } public void li$cil$oc$common$tileentity$traits$Rotatable$$_pitch_$eq(ForgeDirection x$1) { this.li$cil$oc$common$tileentity$traits$Rotatable$$_pitch = x$1; } public ForgeDirection li$cil$oc$common$tileentity$traits$Rotatable$$_yaw() { return this.li$cil$oc$common$tileentity$traits$Rotatable$$_yaw; } public void li$cil$oc$common$tileentity$traits$Rotatable$$_yaw_$eq(ForgeDirection x$1) { this.li$cil$oc$common$tileentity$traits$Rotatable$$_yaw = x$1; } public void li$cil$oc$common$tileentity$traits$Rotatable$_setter_$li$cil$oc$common$tileentity$traits$Rotatable$$pitch2Direction_$eq(ForgeDirection[] x$1) { this.li$cil$oc$common$tileentity$traits$Rotatable$$pitch2Direction = x$1; } public void li$cil$oc$common$tileentity$traits$Rotatable$_setter_$li$cil$oc$common$tileentity$traits$Rotatable$$yaw2Direction_$eq(ForgeDirection[] x$1) { this.li$cil$oc$common$tileentity$traits$Rotatable$$yaw2Direction = x$1; } public ForgeDirection pitch() { return Rotatable.class.pitch((Rotatable)this); } public void pitch_$eq(ForgeDirection value) { Rotatable.class.pitch_$eq((Rotatable)this, value); } public ForgeDirection yaw() { return Rotatable.class.yaw((Rotatable)this); } public void yaw_$eq(ForgeDirection value) { Rotatable.class.yaw_$eq((Rotatable)this, value); } public boolean setFromEntityPitchAndYaw(Entity entity) { return Rotatable.class.setFromEntityPitchAndYaw((Rotatable)this, entity); } public boolean setFromFacing(ForgeDirection value) { return Rotatable.class.setFromFacing((Rotatable)this, value); } public boolean invertRotation() { return Rotatable.class.invertRotation((Rotatable)this); } public ForgeDirection facing() { return Rotatable.class.facing((Rotatable)this); } public boolean rotate(ForgeDirection axis) { return Rotatable.class.rotate((Rotatable)this, axis); } public ForgeDirection toLocal(ForgeDirection value) { return Rotatable.class.toLocal((Rotatable)this, value); } public ForgeDirection toGlobal(ForgeDirection value) { return Rotatable.class.toGlobal((Rotatable)this, value); } public ForgeDirection[] validFacings() { return Rotatable.class.validFacings((Rotatable)this); } private ArrayBuffer li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingRemovalsActual$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x8) == 0) { this.li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingRemovalsActual = ComponentInventory.class.li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingRemovalsActual((ComponentInventory)this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x8); }  return this.li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingRemovalsActual; }  } public ArrayBuffer<Option<ItemStack>> li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingRemovalsActual() { return ((byte)(this.bitmap$0 & 0x8) == 0) ? li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingRemovalsActual$lzycompute() : this.li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingRemovalsActual; } private ArrayBuffer li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingAddsActual$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x10) == 0) { this.li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingAddsActual = ComponentInventory.class.li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingAddsActual((ComponentInventory)this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x10); }  return this.li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingAddsActual; }  } public ArrayBuffer<Option<ItemStack>> li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingAddsActual() { return ((byte)(this.bitmap$0 & 0x10) == 0) ? li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingAddsActual$lzycompute() : this.li$cil$oc$common$tileentity$traits$ComponentInventory$$pendingAddsActual; } public boolean li$cil$oc$common$tileentity$traits$ComponentInventory$$updateScheduled() { return this.li$cil$oc$common$tileentity$traits$ComponentInventory$$updateScheduled; } public void li$cil$oc$common$tileentity$traits$ComponentInventory$$updateScheduled_$eq(boolean x$1) { this.li$cil$oc$common$tileentity$traits$ComponentInventory$$updateScheduled = x$1; } public ComponentInventory host() { return ComponentInventory.class.host((ComponentInventory)this); } public ArrayBuffer<Option<ItemStack>> pendingRemovals() { return ComponentInventory.class.pendingRemovals((ComponentInventory)this); } public ArrayBuffer<Option<ItemStack>> pendingAdds() { return ComponentInventory.class.pendingAdds((ComponentInventory)this); } public void save(ManagedEnvironment component, Item driver, ItemStack stack) { ComponentInventory.class.save((ComponentInventory)this, component, driver, stack); } public void initialize() { ComponentInventory.class.initialize((ComponentInventory)this); } public void onConnect(Node node) { ComponentInventory.class.onConnect((ComponentInventory)this, node); } public Option<ManagedEnvironment>[] li$cil$oc$common$inventory$ComponentInventory$$_components() { return this.li$cil$oc$common$inventory$ComponentInventory$$_components; } @TraitSetter public void li$cil$oc$common$inventory$ComponentInventory$$_components_$eq(Option[] x$1) { this.li$cil$oc$common$inventory$ComponentInventory$$_components = (Option<ManagedEnvironment>[])x$1; } public boolean isSizeInventoryReady() { return this.isSizeInventoryReady; } @TraitSetter public void isSizeInventoryReady_$eq(boolean x$1) { this.isSizeInventoryReady = x$1; } public ArrayBuffer<ManagedEnvironment> updatingComponents() { return this.updatingComponents; } public void li$cil$oc$common$inventory$ComponentInventory$_setter_$updatingComponents_$eq(ArrayBuffer<ManagedEnvironment> x$1) { this.updatingComponents = x$1; } public Option<ManagedEnvironment>[] components() { return (Option<ManagedEnvironment>[])ComponentInventory.class.components((ComponentInventory)this); } public void updateComponents() { ComponentInventory.class.updateComponents((ComponentInventory)this); } public void connectComponents() { ComponentInventory.class.connectComponents((ComponentInventory)this); } public void disconnectComponents() { ComponentInventory.class.disconnectComponents((ComponentInventory)this); } public void save(NBTTagCompound nbt) { ComponentInventory.class.save((ComponentInventory)this, nbt); } public void saveComponents() { ComponentInventory.class.saveComponents((ComponentInventory)this); } public int func_70297_j_() { return ComponentInventory.class.getInventoryStackLimit((ComponentInventory)this); } public boolean isComponentSlot(int slot, ItemStack stack) { return ComponentInventory.class.isComponentSlot((ComponentInventory)this, slot, stack); } public void connectItemNode(Node node) { ComponentInventory.class.connectItemNode((ComponentInventory)this, node); } public NBTTagCompound dataTag(Item driver, ItemStack stack) { return ComponentInventory.class.dataTag((ComponentInventory)this, driver, stack); } public void applyLifecycleState(Object component, Lifecycle.LifecycleState state) { ComponentInventory.class.applyLifecycleState((ComponentInventory)this, component, state); } private Option[] li$cil$oc$common$tileentity$traits$Inventory$$inventory$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x20) == 0) { this.li$cil$oc$common$tileentity$traits$Inventory$$inventory = (Option<ItemStack>[])Inventory.class.li$cil$oc$common$tileentity$traits$Inventory$$inventory((Inventory)this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x20); }  return (Option[])this.li$cil$oc$common$tileentity$traits$Inventory$$inventory; }  } public Option<ItemStack>[] li$cil$oc$common$tileentity$traits$Inventory$$inventory() { return ((byte)(this.bitmap$0 & 0x20) == 0) ? (Option<ItemStack>[])li$cil$oc$common$tileentity$traits$Inventory$$inventory$lzycompute() : this.li$cil$oc$common$tileentity$traits$Inventory$$inventory; } public Option<ItemStack>[] items() { return (Option<ItemStack>[])Inventory.class.items((Inventory)this); } public boolean dropSlot(int slot, int count, Option direction) { return Inventory.class.dropSlot((Inventory)this, slot, count, direction); } public void dropAllSlots() { Inventory.class.dropAllSlots((Inventory)this); } public EntityItem spawnStackInWorld(ItemStack stack, Option direction) { return Inventory.class.spawnStackInWorld((Inventory)this, stack, direction); } public int dropSlot$default$2() { return Inventory.class.dropSlot$default$2((Inventory)this); } public Option<ForgeDirection> dropSlot$default$3() { return Inventory.class.dropSlot$default$3((Inventory)this); } public Option<ForgeDirection> spawnStackInWorld$default$2() { return Inventory.class.spawnStackInWorld$default$2((Inventory)this); } public void updateItems(int slot, ItemStack stack) { Inventory.class.updateItems((Inventory)this, slot, stack); } public ItemStack func_70301_a(int slot) { return Inventory.class.getStackInSlot((Inventory)this, slot); } public void func_70299_a(int slot, ItemStack stack) { Inventory.class.setInventorySlotContents((Inventory)this, slot, stack); } public String func_145825_b() { return Inventory.class.getInventoryName((Inventory)this); } public String inventoryName() { return Inventory.class.inventoryName((Inventory)this); } public void load(NBTTagCompound nbt) { Inventory.class.load((Inventory)this, nbt); } public boolean func_145818_k_() { return SimpleInventory.class.hasCustomInventoryName((SimpleInventory)this); } public int getInventoryStackRequired() { return SimpleInventory.class.getInventoryStackRequired((SimpleInventory)this); } public void func_70295_k_() { SimpleInventory.class.openInventory((SimpleInventory)this); } public void func_70305_f() { SimpleInventory.class.closeInventory((SimpleInventory)this); } public ItemStack func_70298_a(int slot, int amount) { return SimpleInventory.class.decrStackSize((SimpleInventory)this, slot, amount); } public ItemStack func_70304_b(int slot) { return SimpleInventory.class.getStackInSlotOnClosing((SimpleInventory)this, slot); } public boolean isChangeScheduled() { return this.isChangeScheduled; } public void isChangeScheduled_$eq(boolean x$1) { this.isChangeScheduled = x$1; } public boolean moving() { return this.moving; } public void moving_$eq(boolean x$1) { this.moving = x$1; } public double xPosition() { return Environment.class.xPosition((Environment)this); } public double yPosition() { return Environment.class.yPosition((Environment)this); } public double zPosition() { return Environment.class.zPosition((Environment)this); } public void markChanged() { Environment.class.markChanged((Environment)this); } public boolean isConnected() { return Environment.class.isConnected((Environment)this); } public void onMessage(Message message) { Environment.class.onMessage((Environment)this, message); } @Method(modid = "appliedenergistics2") public boolean prepareToMove() { return Environment.class.prepareToMove((Environment)this); } @Method(modid = "appliedenergistics2") public void doneMoving() { Environment.class.doneMoving((Environment)this); } public Object[] result(Seq args) { return Environment.class.result((Environment)this, args); } public int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$omega() { return this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$omega; } public void li$cil$oc$common$tileentity$traits$power$RotaryCraft$$omega_$eq(int x$1) { this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$omega = x$1; } public int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$torque() { return this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$torque; } public void li$cil$oc$common$tileentity$traits$power$RotaryCraft$$torque_$eq(int x$1) { this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$torque = x$1; } public long li$cil$oc$common$tileentity$traits$power$RotaryCraft$$power() { return this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$power; } public void li$cil$oc$common$tileentity$traits$power$RotaryCraft$$power_$eq(long x$1) { this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$power = x$1; } public int li$cil$oc$common$tileentity$traits$power$RotaryCraft$$alpha() { return this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$alpha; } public void li$cil$oc$common$tileentity$traits$power$RotaryCraft$$alpha_$eq(int x$1) { this.li$cil$oc$common$tileentity$traits$power$RotaryCraft$$alpha = x$1; } @Method(modid = "RotaryCraft") public int getOmega() { return RotaryCraft.class.getOmega((RotaryCraft)this); } @Method(modid = "RotaryCraft") public int getTorque() { return RotaryCraft.class.getTorque((RotaryCraft)this); } @Method(modid = "RotaryCraft") public long getPower() { return RotaryCraft.class.getPower((RotaryCraft)this); } @Method(modid = "RotaryCraft") public String getName() { return RotaryCraft.class.getName((RotaryCraft)this); } @Method(modid = "RotaryCraft") public int getIORenderAlpha() { return RotaryCraft.class.getIORenderAlpha((RotaryCraft)this); } @Method(modid = "RotaryCraft") public void setIORenderAlpha(int value) { RotaryCraft.class.setIORenderAlpha((RotaryCraft)this, value); } @Method(modid = "RotaryCraft") public void setOmega(int value) { RotaryCraft.class.setOmega((RotaryCraft)this, value); } @Method(modid = "RotaryCraft") public void setTorque(int value) { RotaryCraft.class.setTorque((RotaryCraft)this, value); } @Method(modid = "RotaryCraft") public void setPower(long value) { RotaryCraft.class.setPower((RotaryCraft)this, value); } @Method(modid = "RotaryCraft") public void noInputMachine() { RotaryCraft.class.noInputMachine((RotaryCraft)this); } @Method(modid = "RotaryCraft") public boolean canReadFrom(ForgeDirection forgeDirection) { return RotaryCraft.class.canReadFrom((RotaryCraft)this, forgeDirection); } @Method(modid = "RotaryCraft") public boolean isReceiving() { return RotaryCraft.class.isReceiving((RotaryCraft)this); } @Method(modid = "RotaryCraft") public int getMinTorque(int available) { return RotaryCraft.class.getMinTorque((RotaryCraft)this, available); } @Method(modid = "CoFHAPI|energy") public boolean canConnectEnergy(ForgeDirection from) { return RedstoneFlux.class.canConnectEnergy((RedstoneFlux)this, from); } @Method(modid = "CoFHAPI|energy") public int receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate) { return RedstoneFlux.class.receiveEnergy((RedstoneFlux)this, from, maxReceive, simulate); } @Method(modid = "CoFHAPI|energy") public int getEnergyStored(ForgeDirection from) { return RedstoneFlux.class.getEnergyStored((RedstoneFlux)this, from); } @Method(modid = "CoFHAPI|energy") public int getMaxEnergyStored(ForgeDirection from) { return RedstoneFlux.class.getMaxEnergyStored((RedstoneFlux)this, from); } @Method(modid = "CoFHAPI|energy") public int extractEnergy(ForgeDirection from, int maxExtract, boolean simulate) { return RedstoneFlux.class.extractEnergy((RedstoneFlux)this, from, maxExtract, simulate); } @Method(modid = "Mekanism") public boolean canReceiveEnergy(ForgeDirection side) { return Mekanism.class.canReceiveEnergy((Mekanism)this, side); } @Method(modid = "Mekanism") public double transferEnergyToAcceptor(ForgeDirection side, double amount) { return Mekanism.class.transferEnergyToAcceptor((Mekanism)this, side, amount); } @Method(modid = "Mekanism") public double getMaxEnergy() { return Mekanism.class.getMaxEnergy((Mekanism)this); } @Method(modid = "Mekanism") public double getEnergy() { return Mekanism.class.getEnergy((Mekanism)this); } @Method(modid = "Mekanism") public void setEnergy(double energy) { Mekanism.class.setEnergy((Mekanism)this, energy); } public double li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Classic$$conversionBuffer() { return this.li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Classic$$conversionBuffer; } public void li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Classic$$conversionBuffer_$eq(double x$1) { this.li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Classic$$conversionBuffer = x$1; } public void func_145843_s() { IndustrialCraft2Classic.class.invalidate((IndustrialCraft2Classic)this); } public void onChunkUnload() { IndustrialCraft2Classic.class.onChunkUnload((IndustrialCraft2Classic)this); } @Method(modid = "IC2-Classic") public boolean isAddedToEnergyNet() { return IndustrialCraft2Classic.class.isAddedToEnergyNet((IndustrialCraft2Classic)this); } @Method(modid = "IC2-Classic") public int getMaxSafeInput() { return IndustrialCraft2Classic.class.getMaxSafeInput((IndustrialCraft2Classic)this); } @Method(modid = "IC2-Classic") public boolean acceptsEnergyFrom(TileEntity emitter, Direction direction) { return IndustrialCraft2Classic.class.acceptsEnergyFrom((IndustrialCraft2Classic)this, emitter, direction); } @Method(modid = "IC2-Classic") public boolean injectEnergy(Direction directionFrom, int amount) { return IndustrialCraft2Classic.class.injectEnergy((IndustrialCraft2Classic)this, directionFrom, amount); } @Method(modid = "IC2-Classic") public int demandsEnergy() { return IndustrialCraft2Classic.class.demandsEnergy((IndustrialCraft2Classic)this); } public double li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Experimental$$conversionBuffer() { return this.li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Experimental$$conversionBuffer; } public void li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Experimental$$conversionBuffer_$eq(double x$1) { this.li$cil$oc$common$tileentity$traits$power$IndustrialCraft2Experimental$$conversionBuffer = x$1; } @Method(modid = "IC2") public int getSinkTier() { return IndustrialCraft2Experimental.class.getSinkTier((IndustrialCraft2Experimental)this); } @Method(modid = "IC2") public boolean acceptsEnergyFrom(TileEntity emitter, ForgeDirection direction) { return IndustrialCraft2Experimental.class.acceptsEnergyFrom((IndustrialCraft2Experimental)this, emitter, direction); } @Method(modid = "IC2") public double injectEnergy(ForgeDirection directionFrom, double amount, double voltage) { return IndustrialCraft2Experimental.class.injectEnergy((IndustrialCraft2Experimental)this, directionFrom, amount, voltage); } @Method(modid = "IC2") public double getDemandedEnergy() { return IndustrialCraft2Experimental.class.getDemandedEnergy((IndustrialCraft2Experimental)this); } public boolean addedToIC2PowerGrid() { return this.addedToIC2PowerGrid; } public void addedToIC2PowerGrid_$eq(boolean x$1) { this.addedToIC2PowerGrid = x$1; } @Method(modid = "Galacticraft API") public boolean nodeAvailable(EnergySource from) { return Galacticraft.class.nodeAvailable((Galacticraft)this, from); } @Method(modid = "Galacticraft API") public float receiveEnergyGC(EnergySource from, float amount, boolean simulate) { return Galacticraft.class.receiveEnergyGC((Galacticraft)this, from, amount, simulate); } @Method(modid = "Galacticraft API") public float getEnergyStoredGC(EnergySource from) { return Galacticraft.class.getEnergyStoredGC((Galacticraft)this, from); } @Method(modid = "Galacticraft API") public float getMaxEnergyStoredGC(EnergySource from) { return Galacticraft.class.getMaxEnergyStoredGC((Galacticraft)this, from); } @Method(modid = "Galacticraft API") public float extractEnergyGC(EnergySource from, float amount, boolean simulate) { return Galacticraft.class.extractEnergyGC((Galacticraft)this, from, amount, simulate); } @Method(modid = "Galacticraft API") public boolean canConnect(ForgeDirection from, NetworkType networkType) { return Galacticraft.class.canConnect((Galacticraft)this, from, networkType); } private Object li$cil$oc$common$tileentity$traits$power$Factorization$$charge$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x40) == 0) { this.li$cil$oc$common$tileentity$traits$power$Factorization$$charge = Factorization.class.li$cil$oc$common$tileentity$traits$power$Factorization$$charge((Factorization)this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x40); }  return this.li$cil$oc$common$tileentity$traits$power$Factorization$$charge; }  } public Object li$cil$oc$common$tileentity$traits$power$Factorization$$charge() { return ((byte)(this.bitmap$0 & 0x40) == 0) ? li$cil$oc$common$tileentity$traits$power$Factorization$$charge$lzycompute() : this.li$cil$oc$common$tileentity$traits$power$Factorization$$charge; } @Method(modid = "factorization") public Charge getCharge() { return Factorization.class.getCharge((Factorization)this); } @Method(modid = "factorization") public String getInfo() { return Factorization.class.getInfo((Factorization)this); } @Method(modid = "factorization") public Coord getCoord() { return Factorization.class.getCoord((Factorization)this); } public Option<Object> li$cil$oc$common$tileentity$traits$power$AppliedEnergistics2$$node() { return this.li$cil$oc$common$tileentity$traits$power$AppliedEnergistics2$$node; } public void li$cil$oc$common$tileentity$traits$power$AppliedEnergistics2$$node_$eq(Option<Object> x$1) { this.li$cil$oc$common$tileentity$traits$power$AppliedEnergistics2$$node = x$1; } @Method(modid = "appliedenergistics2") public IGridNode getGridNode(ForgeDirection side) { return AppliedEnergistics2.class.getGridNode((AppliedEnergistics2)this, side); } @Method(modid = "appliedenergistics2") public AECableType getCableConnectionType(ForgeDirection side) { return AppliedEnergistics2.class.getCableConnectionType((AppliedEnergistics2)this, side); } @Method(modid = "appliedenergistics2") public void securityBreak() { AppliedEnergistics2.class.securityBreak((AppliedEnergistics2)this); } public void tryAllSides(Function2 provider, Function1 fromOther, Function1 toOther) { Common.class.tryAllSides((Common)this, provider, fromOther, toOther); } public boolean canConnectPower(ForgeDirection side) { return Common.class.canConnectPower((Common)this, side); } public double tryChangeBuffer(ForgeDirection side, double amount, boolean doReceive) { return Common.class.tryChangeBuffer((Common)this, side, amount, doReceive); } public double globalBuffer(ForgeDirection side) { return Common.class.globalBuffer((Common)this, side); } public double globalBufferSize(ForgeDirection side) { return Common.class.globalBufferSize((Common)this, side); } public double globalDemand(ForgeDirection side) { return Common.class.globalDemand((Common)this, side); } public boolean tryChangeBuffer$default$3() { return Common.class.tryChangeBuffer$default$3((Common)this); } public World world() { return TileEntity.class.world((TileEntity)this); } public int x() { return TileEntity.class.x((TileEntity)this); } public int y() { return TileEntity.class.y((TileEntity)this); } public int z() { return TileEntity.class.z((TileEntity)this); } public BlockPosition position() { return TileEntity.class.position((TileEntity)this); } public Block block() { return TileEntity.class.block((TileEntity)this); } public boolean isClient() { return TileEntity.class.isClient((TileEntity)this); } public boolean isServer() { return TileEntity.class.isServer((TileEntity)this); } public void func_145839_a(NBTTagCompound nbt) { TileEntity.class.readFromNBT((TileEntity)this, nbt); } public void func_145841_b(NBTTagCompound nbt) { TileEntity.class.writeToNBT((TileEntity)this, nbt); } public Packet func_145844_m() { return TileEntity.class.getDescriptionPacket((TileEntity)this); } public void onDataPacket(NetworkManager manager, S35PacketUpdateTileEntity packet) { TileEntity.class.onDataPacket((TileEntity)this, manager, packet); } public int tier() { return this.tier; } public void tier_$eq(int x$1) { this.tier = x$1; } public Case(int tier) { TileEntity.class.$init$((TileEntity)this); Common.class.$init$((Common)this); AppliedEnergistics2.class.$init$((AppliedEnergistics2)this); Factorization.class.$init$((Factorization)this); Galacticraft.class.$init$((Galacticraft)this); IndustrialCraft2Common.class.$init$((IndustrialCraft2Common)this); IndustrialCraft2Experimental.class.$init$((IndustrialCraft2Experimental)this); IndustrialCraft2Classic.class.$init$((IndustrialCraft2Classic)this); Mekanism.class.$init$((Mekanism)this); RedstoneFlux.class.$init$((RedstoneFlux)this); RotaryCraft.class.$init$((RotaryCraft)this); Environment.class.$init$((Environment)this); SimpleInventory.class.$init$((SimpleInventory)this); Inventory.class.$init$((Inventory)this); Inventory.class.$init$((Inventory)this); ComponentInventory.class.$init$((ComponentInventory)this); ComponentInventory.class.$init$((ComponentInventory)this); RotationAware.class.$init$((RotationAware)this); Rotatable.class.$init$((Rotatable)this); RedstoneAware.class.$init$((RedstoneAware)this); BundledRedstoneAware.class.$init$((BundledRedstoneAware)this); AbstractBusAware.class.$init$((AbstractBusAware)this); StateAware.class.$init$((StateAware)this); Computer.class.$init$(this); Colored.class.$init$(this);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  36 */     this.lastFileSystemAccess = 0L;
/*  37 */     this.lastNetworkActivity = 0L;
/*     */     
/*  39 */     color_$eq(Color$.MODULE$.byTier()[tier()]); } public Case() { this(0); isSizeInventoryReady_$eq(false); } public long lastFileSystemAccess() { return this.lastFileSystemAccess; } public void lastFileSystemAccess_$eq(long x$1) { this.lastFileSystemAccess = x$1; } public long lastNetworkActivity() { return this.lastNetworkActivity; }
/*     */   public void lastNetworkActivity_$eq(long x$1) { this.lastNetworkActivity = x$1; }
/*  41 */   private Map deviceInfo$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x1) == 0) { (new scala.Tuple2[5])[0] = Predef$ArrowAssoc$.MODULE$
/*  42 */           .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("class"), "system");
/*  43 */         (new scala.Tuple2[5])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("description"), "Computer");
/*  44 */         (new scala.Tuple2[5])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("vendor"), "MightyPirates GmbH & Co. KG");
/*  45 */         (new scala.Tuple2[5])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("product"), "Blocker");
/*  46 */         (new scala.Tuple2[5])[4] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("capacity"), BoxesRunTime.boxToInteger(func_70302_i_()).toString()); this.deviceInfo = (Map<String, String>)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new scala.Tuple2[5])); this.bitmap$0 = (byte)(this.bitmap$0 | 0x1); }
/*     */        return this.deviceInfo; }
/*     */      } private final Map<String, String> deviceInfo() { return ((byte)(this.bitmap$0 & 0x1) == 0) ? deviceInfo$lzycompute() : this.deviceInfo; }
/*  49 */   public Map<String, String> getDeviceInfo() { return WrapAsJava$.MODULE$.mapAsJavaMap((Map)deviceInfo()); }
/*     */ 
/*     */   
/*     */   @SideOnly(Side.CLIENT)
/*     */   public boolean hasConnector(ForgeDirection side) {
/*  54 */     ForgeDirection forgeDirection = facing(); if (side == null) { if (forgeDirection != null); } else if (side.equals(forgeDirection))
/*     */     {  }
/*  56 */      } public Option<Connector> connector(ForgeDirection side) { ForgeDirection forgeDirection = facing(); if (side == null) { if (forgeDirection != null) { if (machine() == null); return side.apply(machine().node()); }  } else if (!side.equals(forgeDirection)) { if (machine() == null); return side.apply(machine().node()); }
/*     */      } public double energyThroughput() {
/*  58 */     return Settings$.MODULE$.get().caseRate()[tier()];
/*     */   } public World getWorld() {
/*  60 */     return world();
/*     */   } public boolean isCreative() {
/*  62 */     return (tier() == 3);
/*     */   }
/*     */   
/*     */   public int componentSlot(String address) {
/*  66 */     return Predef$.MODULE$.refArrayOps((Object[])components()).indexWhere((Function1)new Case$$anonfun$componentSlot$1(this, address)); } public final class Case$$anonfun$componentSlot$1 extends AbstractFunction1<Option<ManagedEnvironment>, Object> implements Serializable { public static final long serialVersionUID = 0L; public final String address$1; public final boolean apply(Option x$1) { return x$1.exists((Function1)new Case$$anonfun$componentSlot$1$$anonfun$apply$1(this)); } public Case$$anonfun$componentSlot$1(Case $outer, String address$1) {} public final class Case$$anonfun$componentSlot$1$$anonfun$apply$1 extends AbstractFunction1<ManagedEnvironment, Object> implements Serializable {
/*     */       public static final long serialVersionUID = 0L; public final boolean apply(ManagedEnvironment env) {
/*     */         // Byte code:
/*     */         //   0: aload_1
/*     */         //   1: invokeinterface node : ()Lli/cil/oc/api/network/Node;
/*     */         //   6: ifnull -> 51
/*     */         //   9: aload_1
/*     */         //   10: invokeinterface node : ()Lli/cil/oc/api/network/Node;
/*     */         //   15: invokeinterface address : ()Ljava/lang/String;
/*     */         //   20: aload_0
/*     */         //   21: getfield $outer : Lli/cil/oc/common/tileentity/Case$$anonfun$componentSlot$1;
/*     */         //   24: getfield address$1 : Ljava/lang/String;
/*     */         //   27: astore_2
/*     */         //   28: dup
/*     */         //   29: ifnonnull -> 40
/*     */         //   32: pop
/*     */         //   33: aload_2
/*     */         //   34: ifnull -> 47
/*     */         //   37: goto -> 51
/*     */         //   40: aload_2
/*     */         //   41: invokevirtual equals : (Ljava/lang/Object;)Z
/*     */         //   44: ifeq -> 51
/*     */         //   47: iconst_1
/*     */         //   48: goto -> 52
/*     */         //   51: iconst_0
/*     */         //   52: ireturn
/*     */         // Line number table:
/*     */         //   Java source line number -> byte code offset
/*     */         //   #66	-> 0
/*     */         // Local variable table:
/*     */         //   start	length	slot	name	descriptor
/*     */         //   0	53	0	this	Lli/cil/oc/common/tileentity/Case$$anonfun$componentSlot$1$$anonfun$apply$1;
/*     */         //   0	53	1	env	Lli/cil/oc/api/network/ManagedEnvironment;
/*     */       } public Case$$anonfun$componentSlot$1$$anonfun$apply$1(Case$$anonfun$componentSlot$1 $outer) {} } } public boolean canUpdate() {
/*  70 */     return isServer();
/*     */   }
/*     */   public void func_145845_h() {
/*  73 */     (isServer() && isCreative() && world().func_82737_E() % Settings$.MODULE$.get().tickFrequency() == false) ? 
/*     */       
/*  75 */       BoxesRunTime.boxToDouble(((Connector)node()).changeBuffer(Double.POSITIVE_INFINITY)) : BoxedUnit.UNIT;
/*     */     
/*  77 */     Computer.class.updateEntity(this);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void readFromNBTForServer(NBTTagCompound nbt) {
/*  83 */     tier_$eq(RichByte$.MODULE$.min$extension(Predef$.MODULE$.byteWrapper(RichByte$.MODULE$.max$extension(Predef$.MODULE$.byteWrapper(nbt.func_74771_c((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("tier").toString())), (byte)0)), (byte)3));
/*  84 */     color_$eq(Color$.MODULE$.byTier()[tier()]);
/*  85 */     Colored.class.readFromNBTForServer(this, nbt);
/*  86 */     isSizeInventoryReady_$eq(true);
/*     */   }
/*     */   
/*     */   public void writeToNBTForServer(NBTTagCompound nbt) {
/*  90 */     nbt.func_74774_a((new StringBuilder()).append(Settings$.MODULE$.namespace()).append("tier").toString(), (byte)tier());
/*  91 */     Colored.class.writeToNBTForServer(this, nbt);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void onItemAdded(int slot, ItemStack stack) {
/*  97 */     ComponentInventory.class.onItemAdded((ComponentInventory)this, slot, stack);
/*  98 */     if (isServer())
/*  99 */     { String str = Slot$.MODULE$.Floppy(); if (InventorySlots$.MODULE$.computer()[tier()][slot].slot() == null) { InventorySlots$.MODULE$.computer()[tier()][slot].slot(); if (str != null) return;  } else { if (InventorySlots$.MODULE$.computer()[tier()][slot].slot().equals(str))
/* 100 */         { Sound$.MODULE$.playDiskInsert((EnvironmentHost)this); return; }  return; }  } else { return; }  Sound$.MODULE$.playDiskInsert((EnvironmentHost)this);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onItemRemoved(int slot, ItemStack stack) {
/*     */     // Byte code:
/*     */     //   0: aload_0
/*     */     //   1: iload_1
/*     */     //   2: aload_2
/*     */     //   3: invokestatic onItemRemoved : (Lli/cil/oc/common/tileentity/traits/ComponentInventory;ILnet/minecraft/item/ItemStack;)V
/*     */     //   6: aload_0
/*     */     //   7: invokevirtual isServer : ()Z
/*     */     //   10: ifeq -> 107
/*     */     //   13: getstatic li/cil/oc/common/InventorySlots$.MODULE$ : Lli/cil/oc/common/InventorySlots$;
/*     */     //   16: invokevirtual computer : ()[[Lli/cil/oc/common/InventorySlots$InventorySlot;
/*     */     //   19: aload_0
/*     */     //   20: invokevirtual tier : ()I
/*     */     //   23: aaload
/*     */     //   24: iload_1
/*     */     //   25: aaload
/*     */     //   26: invokevirtual slot : ()Ljava/lang/String;
/*     */     //   29: astore_3
/*     */     //   30: aload_3
/*     */     //   31: getstatic li/cil/oc/common/Slot$.MODULE$ : Lli/cil/oc/common/Slot$;
/*     */     //   34: invokevirtual Floppy : ()Ljava/lang/String;
/*     */     //   37: astore #4
/*     */     //   39: dup
/*     */     //   40: ifnonnull -> 52
/*     */     //   43: pop
/*     */     //   44: aload #4
/*     */     //   46: ifnull -> 60
/*     */     //   49: goto -> 67
/*     */     //   52: aload #4
/*     */     //   54: invokevirtual equals : (Ljava/lang/Object;)Z
/*     */     //   57: ifeq -> 67
/*     */     //   60: getstatic li/cil/oc/common/Sound$.MODULE$ : Lli/cil/oc/common/Sound$;
/*     */     //   63: aload_0
/*     */     //   64: invokevirtual playDiskEject : (Lli/cil/oc/api/network/EnvironmentHost;)V
/*     */     //   67: aload_3
/*     */     //   68: getstatic li/cil/oc/common/Slot$.MODULE$ : Lli/cil/oc/common/Slot$;
/*     */     //   71: invokevirtual CPU : ()Ljava/lang/String;
/*     */     //   74: astore #5
/*     */     //   76: dup
/*     */     //   77: ifnonnull -> 89
/*     */     //   80: pop
/*     */     //   81: aload #5
/*     */     //   83: ifnull -> 97
/*     */     //   86: goto -> 107
/*     */     //   89: aload #5
/*     */     //   91: invokevirtual equals : (Ljava/lang/Object;)Z
/*     */     //   94: ifeq -> 107
/*     */     //   97: aload_0
/*     */     //   98: invokevirtual machine : ()Lli/cil/oc/api/machine/Machine;
/*     */     //   101: invokeinterface stop : ()Z
/*     */     //   106: pop
/*     */     //   107: return
/*     */     // Line number table:
/*     */     //   Java source line number -> byte code offset
/*     */     //   #106	-> 0
/*     */     //   #107	-> 6
/*     */     //   #108	-> 13
/*     */     //   #109	-> 30
/*     */     //   #110	-> 60
/*     */     //   #112	-> 67
/*     */     //   #113	-> 97
/*     */     //   #105	-> 107
/*     */     // Local variable table:
/*     */     //   start	length	slot	name	descriptor
/*     */     //   0	108	0	this	Lli/cil/oc/common/tileentity/Case;
/*     */     //   0	108	1	slot	I
/*     */     //   0	108	2	stack	Lnet/minecraft/item/ItemStack;
/*     */     //   30	78	3	slotType	Ljava/lang/String;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int func_70302_i_() {
/* 118 */     return (tier() < 0 || tier() >= (InventorySlots$.MODULE$.computer()).length) ? 0 : (InventorySlots$.MODULE$.computer()[tier()]).length;
/*     */   }
/*     */   public boolean func_70300_a(EntityPlayer player) {
/* 121 */     return (Computer.class.isUseableByPlayer(this, player) && (!isCreative() || player.field_71075_bZ.field_75098_d));
/*     */   }
/*     */   
/* 124 */   public boolean func_94041_b(int slot, ItemStack stack) { return BoxesRunTime.unboxToBoolean(Option$.MODULE$.apply(Driver.driverFor(stack, getClass())).fold((Function0)new Case$$anonfun$isItemValidForSlot$1(this), (Function1)new Case$$anonfun$isItemValidForSlot$2(this, slot, stack))); } public final class Case$$anonfun$isItemValidForSlot$1 extends AbstractFunction0.mcZ.sp implements Serializable { public static final long serialVersionUID = 0L; public final boolean apply() { return apply$mcZ$sp(); } public boolean apply$mcZ$sp() { return false; }
/*     */ 
/*     */     
/*     */     public Case$$anonfun$isItemValidForSlot$1(Case $outer) {} }
/*     */ 
/*     */   
/*     */   public final class Case$$anonfun$isItemValidForSlot$2 extends AbstractFunction1<Item, Object> implements Serializable {
/*     */     public static final long serialVersionUID = 0L;
/*     */     private final int slot$1;
/*     */     private final ItemStack stack$1;
/*     */     
/*     */     public Case$$anonfun$isItemValidForSlot$2(Case $outer, int slot$1, ItemStack stack$1) {}
/*     */     
/*     */     public final boolean apply(Item driver) {
/*     */       // Byte code:
/*     */       //   0: getstatic li/cil/oc/common/InventorySlots$.MODULE$ : Lli/cil/oc/common/InventorySlots$;
/*     */       //   3: invokevirtual computer : ()[[Lli/cil/oc/common/InventorySlots$InventorySlot;
/*     */       //   6: aload_0
/*     */       //   7: getfield $outer : Lli/cil/oc/common/tileentity/Case;
/*     */       //   10: invokevirtual tier : ()I
/*     */       //   13: aaload
/*     */       //   14: aload_0
/*     */       //   15: getfield slot$1 : I
/*     */       //   18: aaload
/*     */       //   19: astore_2
/*     */       //   20: aload_1
/*     */       //   21: aload_0
/*     */       //   22: getfield stack$1 : Lnet/minecraft/item/ItemStack;
/*     */       //   25: invokeinterface slot : (Lnet/minecraft/item/ItemStack;)Ljava/lang/String;
/*     */       //   30: aload_2
/*     */       //   31: invokevirtual slot : ()Ljava/lang/String;
/*     */       //   34: astore_3
/*     */       //   35: dup
/*     */       //   36: ifnonnull -> 47
/*     */       //   39: pop
/*     */       //   40: aload_3
/*     */       //   41: ifnull -> 54
/*     */       //   44: goto -> 75
/*     */       //   47: aload_3
/*     */       //   48: invokevirtual equals : (Ljava/lang/Object;)Z
/*     */       //   51: ifeq -> 75
/*     */       //   54: aload_1
/*     */       //   55: aload_0
/*     */       //   56: getfield stack$1 : Lnet/minecraft/item/ItemStack;
/*     */       //   59: invokeinterface tier : (Lnet/minecraft/item/ItemStack;)I
/*     */       //   64: aload_2
/*     */       //   65: invokevirtual tier : ()I
/*     */       //   68: if_icmpgt -> 75
/*     */       //   71: iconst_1
/*     */       //   72: goto -> 76
/*     */       //   75: iconst_0
/*     */       //   76: ireturn
/*     */       // Line number table:
/*     */       //   Java source line number -> byte code offset
/*     */       //   #125	-> 0
/*     */       //   #126	-> 20
/*     */       //   #124	-> 76
/*     */       // Local variable table:
/*     */       //   start	length	slot	name	descriptor
/*     */       //   0	77	0	this	Lli/cil/oc/common/tileentity/Case$$anonfun$isItemValidForSlot$2;
/*     */       //   0	77	1	driver	Lli/cil/oc/api/driver/Item;
/*     */       //   20	57	2	provided	Lli/cil/oc/common/InventorySlots$InventorySlot;
/*     */     }
/*     */   }
/*     */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\common\tileentity\Case.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */