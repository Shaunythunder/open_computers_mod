/*    */ package li.cil.oc.common.item;
/*    */ @ScalaSignature(bytes = "\006\00193A!\001\002\001\033\t\0311\tU+\013\005\r!\021\001B5uK6T!!\002\004\002\r\r|W.\\8o\025\t9\001\"\001\002pG*\021\021BC\001\004G&d'\"A\006\002\0051L7\001A\n\006\0019!\"$\b\t\003\037Ii\021\001\005\006\002#\005)1oY1mC&\0211\003\005\002\007\003:L(+\0324\021\005UAR\"\001\f\013\005]\021\021A\002;sC&$8/\003\002\032-\tAA)\0327fO\006$X\r\005\002\0267%\021AD\006\002\t\023R,W\016V5feB\021QCH\005\003?Y\021qa\021)V\031&\\W\r\003\005\"\001\t\025\r\021\"\001#\003\031\001\030M]3oiV\t1\005\005\002%K5\t!!\003\002'\005\tIA)\0327fO\006$xN\035\005\tQ\001\021\t\021)A\005G\0059\001/\031:f]R\004\003\002\003\026\001\005\013\007I\021A\026\002\tQLWM]\013\002YA\021q\"L\005\003]A\0211!\0238u\021!\001\004A!A!\002\023a\023!\002;jKJ\004\003\"\002\032\001\t\003\031\024A\002\037j]&$h\bF\0025kY\002\"\001\n\001\t\013\005\n\004\031A\022\t\013)\n\004\031\001\027\t\017a\002!\031!C!s\005yQO\0347pG\006d\027N_3e\035\006lW-F\001;!\tY\004)D\001=\025\tid(\001\003mC:<'\"A \002\t)\fg/Y\005\003\003r\022aa\025;sS:<\007BB\"\001A\003%!(\001\tv]2|7-\0317ju\026$g*Y7fA!)Q\t\001C!W\00591\r];US\026\024\b\"B$\001\t\003Z\023\001F2qkRKWM\035$pe\016{W\016]8oK:$8\017C\003J\001\021E#*A\006u_>dG/\0339OC6,W#A&\021\007=a%(\003\002N!\t1q\n\035;j_:\004")
/*    */ public class CPU implements ItemTier, CPULike { private final Delegator parent; private final int tier; private final String unlocalizedName;
/*    */   
/*  5 */   public Seq<Object> tooltipData() { return CPULike.class.tooltipData(this); } private boolean showInItemList; private final int itemId; private Option<IIcon> li$cil$oc$common$item$traits$Delegate$$_icon; public void tooltipExtended(ItemStack stack, List tooltip) { CPULike.class.tooltipExtended(this, stack, tooltip); } public ItemStack onItemRightClick(ItemStack stack, World world, EntityPlayer player) { return CPULike.class.onItemRightClick(this, stack, world, player); } @SideOnly(Side.CLIENT) public void tooltipLines(ItemStack stack, EntityPlayer player, List tooltip, boolean advanced) { ItemTier.class.tooltipLines(this, stack, player, tooltip, advanced); } public boolean showInItemList() { return this.showInItemList; } public void showInItemList_$eq(boolean x$1) { this.showInItemList = x$1; } public int itemId() { return this.itemId; } public Option<IIcon> li$cil$oc$common$item$traits$Delegate$$_icon() { return this.li$cil$oc$common$item$traits$Delegate$$_icon; } public void li$cil$oc$common$item$traits$Delegate$$_icon_$eq(Option<IIcon> x$1) { this.li$cil$oc$common$item$traits$Delegate$$_icon = x$1; } public void li$cil$oc$common$item$traits$Delegate$_setter_$itemId_$eq(int x$1) { this.itemId = x$1; } public int maxStackSize() { return Delegate.class.maxStackSize((Delegate)this); } public ItemStack createItemStack(int amount) { return Delegate.class.createItemStack((Delegate)this, amount); } public boolean doesSneakBypassUse(BlockPosition position, EntityPlayer player) { return Delegate.class.doesSneakBypassUse((Delegate)this, position, player); } public boolean onItemUseFirst(ItemStack stack, EntityPlayer player, BlockPosition position, int side, float hitX, float hitY, float hitZ) { return Delegate.class.onItemUseFirst((Delegate)this, stack, player, position, side, hitX, hitY, hitZ); } public boolean onItemUse(ItemStack stack, EntityPlayer player, BlockPosition position, int side, float hitX, float hitY, float hitZ) { return Delegate.class.onItemUse((Delegate)this, stack, player, position, side, hitX, hitY, hitZ); } public EnumAction getItemUseAction(ItemStack stack) { return Delegate.class.getItemUseAction((Delegate)this, stack); } public int getMaxItemUseDuration(ItemStack stack) { return Delegate.class.getMaxItemUseDuration((Delegate)this, stack); } public ItemStack onEaten(ItemStack stack, World world, EntityPlayer player) { return Delegate.class.onEaten((Delegate)this, stack, world, player); } public void onPlayerStoppedUsing(ItemStack stack, EntityPlayer player, int duration) { Delegate.class.onPlayerStoppedUsing((Delegate)this, stack, player, duration); } public void update(ItemStack stack, World world, Entity player, int slot, boolean selected) { Delegate.class.update((Delegate)this, stack, world, player, slot, selected); } public EnumRarity rarity(ItemStack stack) { return Delegate.class.rarity((Delegate)this, stack); } public int tierFromDriver(ItemStack stack) { return Delegate.class.tierFromDriver((Delegate)this, stack); } public int color(ItemStack stack, int pass) { return Delegate.class.color((Delegate)this, stack, pass); } public ItemStack getContainerItem(ItemStack stack) { return Delegate.class.getContainerItem((Delegate)this, stack); } public boolean hasContainerItem(ItemStack stack) { return Delegate.class.hasContainerItem((Delegate)this, stack); } public Option<String> displayName(ItemStack stack) { return Delegate.class.displayName((Delegate)this, stack); } public void tooltipCosts(ItemStack stack, List tooltip) { Delegate.class.tooltipCosts((Delegate)this, stack, tooltip); } public boolean isDamageable() { return Delegate.class.isDamageable((Delegate)this); } public int damage(ItemStack stack) { return Delegate.class.damage((Delegate)this, stack); } public int maxDamage(ItemStack stack) { return Delegate.class.maxDamage((Delegate)this, stack); } @SideOnly(Side.CLIENT) public Option<IIcon> icon() { return Delegate.class.icon((Delegate)this); } @SideOnly(Side.CLIENT) public void icon_$eq(IIcon value) { Delegate.class.icon_$eq((Delegate)this, value); } @SideOnly(Side.CLIENT) public Option<IIcon> icon(ItemStack stack, int pass) { return Delegate.class.icon((Delegate)this, stack, pass); } @SideOnly(Side.CLIENT) public void registerIcons(IIconRegister iconRegister) { Delegate.class.registerIcons((Delegate)this, iconRegister); } public boolean equals(ItemStack stack) { return Delegate.class.equals((Delegate)this, stack); } public int createItemStack$default$1() { return Delegate.class.createItemStack$default$1((Delegate)this); } public Delegator parent() { return this.parent; } public int tier() { return this.tier; } public CPU(Delegator parent, int tier) { Delegate.class.$init$((Delegate)this); ItemTier.class.$init$(this); CPULike.class.$init$(this);
/*  6 */     this.unlocalizedName = (new StringBuilder()).append(Delegate.class.unlocalizedName((Delegate)this)).append(BoxesRunTime.boxToInteger(tier)).toString(); } public String unlocalizedName() { return this.unlocalizedName; }
/*    */   
/*  8 */   public int cpuTier() { return tier(); } public int cpuTierForComponents() {
/*  9 */     return tier();
/*    */   } public Option<String> tooltipName() {
/* 11 */     return Option$.MODULE$.apply(Delegate.class.unlocalizedName((Delegate)this));
/*    */   } }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\common\item\CPU.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */