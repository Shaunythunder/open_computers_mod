/*    */ package li.cil.oc.common.item;
/*    */ 
/*    */ import net.minecraft.item.ItemStack;
/*    */ 
/*    */ @ScalaSignature(bytes = "\006\001a3A!\001\002\001\033\tiA+\032=ukJ,\007+[2lKJT!a\001\003\002\t%$X-\034\006\003\013\031\taaY8n[>t'BA\004\t\003\ty7M\003\002\n\025\005\0311-\0337\013\003-\t!\001\\5\004\001M\031\001A\004\013\021\005=\021R\"\001\t\013\003E\tQa]2bY\006L!a\005\t\003\r\005s\027PU3g!\t)\002$D\001\027\025\t9\"!\001\004ue\006LGo]\005\0033Y\021\001\002R3mK\036\fG/\032\005\t7\001\021)\031!C\0019\0051\001/\031:f]R,\022!\b\t\003=}i\021AA\005\003A\t\021\021\002R3mK\036\fGo\034:\t\021\t\002!\021!Q\001\nu\tq\001]1sK:$\b\005C\003%\001\021\005Q%\001\004=S:LGO\020\013\003M\035\002\"A\b\001\t\013m\031\003\031A\017\t\013%\002A\021\t\026\002\023=t\027\n^3n+N,G\003C\026/s\tSu\n\026,\021\005=a\023BA\027\021\005\035\021un\0347fC:DQa\f\025A\002A\nQa\035;bG.\004\"!M\034\016\003IR!aA\032\013\005Q*\024!C7j]\026\034'/\0314u\025\0051\024a\0018fi&\021\001H\r\002\n\023R,Wn\025;bG.DQA\017\025A\002m\na\001\0357bs\026\024\bC\001\037A\033\005i$B\001\036?\025\ty4'\001\004f]RLG/_\005\003\003v\022A\"\0228uSRL\b\013\\1zKJDQa\021\025A\002\021\013\001\002]8tSRLwN\034\t\003\013\"k\021A\022\006\003\017\032\tA!\036;jY&\021\021J\022\002\016\0052|7m\033)pg&$\030n\0348\t\013-C\003\031\001'\002\tMLG-\032\t\003\0375K!A\024\t\003\007%sG\017C\003QQ\001\007\021+\001\003iSRD\006CA\bS\023\t\031\006CA\003GY>\fG\017C\003VQ\001\007\021+\001\003iSRL\006\"B,)\001\004\t\026\001\0025jij\003")
/*    */ public class TexturePicker implements Delegate {
/*    */   private final Delegator parent;
/*    */   private boolean showInItemList;
/*    */   
/* 10 */   public boolean showInItemList() { return this.showInItemList; } private final int itemId; private Option<IIcon> li$cil$oc$common$item$traits$Delegate$$_icon; public void showInItemList_$eq(boolean x$1) { this.showInItemList = x$1; } public int itemId() { return this.itemId; } public Option<IIcon> li$cil$oc$common$item$traits$Delegate$$_icon() { return this.li$cil$oc$common$item$traits$Delegate$$_icon; } public void li$cil$oc$common$item$traits$Delegate$$_icon_$eq(Option<IIcon> x$1) { this.li$cil$oc$common$item$traits$Delegate$$_icon = x$1; } public void li$cil$oc$common$item$traits$Delegate$_setter_$itemId_$eq(int x$1) { this.itemId = x$1; } public String unlocalizedName() { return Delegate.class.unlocalizedName(this); } public Option<String> tooltipName() { return Delegate.class.tooltipName(this); } public Seq<Object> tooltipData() { return Delegate.class.tooltipData(this); } public int maxStackSize() { return Delegate.class.maxStackSize(this); } public ItemStack createItemStack(int amount) { return Delegate.class.createItemStack(this, amount); } public boolean doesSneakBypassUse(BlockPosition position, EntityPlayer player) { return Delegate.class.doesSneakBypassUse(this, position, player); } public boolean onItemUseFirst(ItemStack stack, EntityPlayer player, BlockPosition position, int side, float hitX, float hitY, float hitZ) { return Delegate.class.onItemUseFirst(this, stack, player, position, side, hitX, hitY, hitZ); } public ItemStack onItemRightClick(ItemStack stack, World world, EntityPlayer player) { return Delegate.class.onItemRightClick(this, stack, world, player); } public EnumAction getItemUseAction(ItemStack stack) { return Delegate.class.getItemUseAction(this, stack); } public int getMaxItemUseDuration(ItemStack stack) { return Delegate.class.getMaxItemUseDuration(this, stack); } public ItemStack onEaten(ItemStack stack, World world, EntityPlayer player) { return Delegate.class.onEaten(this, stack, world, player); } public void onPlayerStoppedUsing(ItemStack stack, EntityPlayer player, int duration) { Delegate.class.onPlayerStoppedUsing(this, stack, player, duration); } public void update(ItemStack stack, World world, Entity player, int slot, boolean selected) { Delegate.class.update(this, stack, world, player, slot, selected); } public EnumRarity rarity(ItemStack stack) { return Delegate.class.rarity(this, stack); } public int tierFromDriver(ItemStack stack) { return Delegate.class.tierFromDriver(this, stack); } public int color(ItemStack stack, int pass) { return Delegate.class.color(this, stack, pass); } public ItemStack getContainerItem(ItemStack stack) { return Delegate.class.getContainerItem(this, stack); } public boolean hasContainerItem(ItemStack stack) { return Delegate.class.hasContainerItem(this, stack); } public Option<String> displayName(ItemStack stack) { return Delegate.class.displayName(this, stack); } @SideOnly(Side.CLIENT) public void tooltipLines(ItemStack stack, EntityPlayer player, List tooltip, boolean advanced) { Delegate.class.tooltipLines(this, stack, player, tooltip, advanced); } public void tooltipExtended(ItemStack stack, List tooltip) { Delegate.class.tooltipExtended(this, stack, tooltip); } public void tooltipCosts(ItemStack stack, List tooltip) { Delegate.class.tooltipCosts(this, stack, tooltip); } public boolean isDamageable() { return Delegate.class.isDamageable(this); } public int damage(ItemStack stack) { return Delegate.class.damage(this, stack); } public int maxDamage(ItemStack stack) { return Delegate.class.maxDamage(this, stack); } @SideOnly(Side.CLIENT) public Option<IIcon> icon() { return Delegate.class.icon(this); } @SideOnly(Side.CLIENT) public void icon_$eq(IIcon value) { Delegate.class.icon_$eq(this, value); } @SideOnly(Side.CLIENT) public Option<IIcon> icon(ItemStack stack, int pass) { return Delegate.class.icon(this, stack, pass); } @SideOnly(Side.CLIENT) public void registerIcons(IIconRegister iconRegister) { Delegate.class.registerIcons(this, iconRegister); } public boolean equals(ItemStack stack) { return Delegate.class.equals(this, stack); } public int createItemStack$default$1() { return Delegate.class.createItemStack$default$1(this); } public Delegator parent() { return this.parent; } public TexturePicker(Delegator parent) { Delegate.class.$init$(this); } public boolean onItemUse(ItemStack stack, EntityPlayer player, BlockPosition position, int side, float hitX, float hitY, float hitZ) {
/*    */     boolean bool;
/* 12 */     Block block = ExtendedWorld$.MODULE$.extendedWorld(player.func_130014_f_()).getBlock(position);
/* 13 */     if (block != null) { Block block1 = block;
/* 14 */       if ((player.func_130014_f_()).field_72995_K) {
/* 15 */         IIcon icon = block1.func_149673_e((IBlockAccess)player.func_130014_f_(), position.x(), position.y(), position.z(), side);
/* 16 */         if (icon != null)
/* 17 */           player.func_145747_a(Localization$Chat$.MODULE$.TextureName(icon.func_94215_i())); 
/*    */       } 
/*    */       bool = true; }
/*    */     else
/* 21 */     { bool = Delegate.class.onItemUse(this, stack, player, position, side, hitX, hitY, hitZ); }
/*    */     
/*    */     return bool;
/*    */   }
/*    */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\common\item\TexturePicker.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */