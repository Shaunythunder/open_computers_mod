/*    */ package li.cil.oc.common.item;
/*    */ @ScalaSignature(bytes = "\006\001q3A!\001\002\001\033\ti\001*\031:e\t&\0348\016\022:jm\026T!a\001\003\002\t%$X-\034\006\003\013\031\taaY8n[>t'BA\004\t\003\ty7M\003\002\n\025\005\0311-\0337\013\003-\t!\001\\5\004\001M)\001A\004\013\033;A\021qBE\007\002!)\t\021#A\003tG\006d\027-\003\002\024!\t1\021I\\=SK\032\004\"!\006\r\016\003YQ!a\006\002\002\rQ\024\030-\033;t\023\tIbC\001\005EK2,w-\031;f!\t)2$\003\002\035-\tA\021\n^3n)&,'\017\005\002\026=%\021qD\006\002\017\r&dWmU=ti\026lG*[6f\021!\t\003A!b\001\n\003\021\023A\0029be\026tG/F\001$!\t!S%D\001\003\023\t1#AA\005EK2,w-\031;pe\"A\001\006\001B\001B\003%1%A\004qCJ,g\016\036\021\t\021)\002!Q1A\005\002-\nA\001^5feV\tA\006\005\002\020[%\021a\006\005\002\004\023:$\b\002\003\031\001\005\003\005\013\021\002\027\002\013QLWM\035\021\t\013I\002A\021A\032\002\rqJg.\033;?)\r!TG\016\t\003I\001AQ!I\031A\002\rBQAK\031A\0021Bq\001\017\001C\002\023\005\023(A\bv]2|7-\0317ju\026$g*Y7f+\005Q\004CA\036?\035\tyA(\003\002>!\0051\001K]3eK\032L!a\020!\003\rM#(/\0338h\025\ti\004\003\003\004C\001\001\006IAO\001\021k:dwnY1mSj,GMT1nK\002Bq\001\022\001C\002\023\0051&A\005lS2|')\037;fg\"1a\t\001Q\001\n1\n!b[5m_\nKH/Z:!\021\035A\005A1A\005\002-\nA\002\0357biR,'oQ8v]RDaA\023\001!\002\023a\023!\0049mCR$XM]\"pk:$\b\005C\003M\001\021\005S*A\006eSN\004H.Y=OC6,GC\001(R!\ryqJO\005\003!B\021aa\0249uS>t\007\"\002*L\001\004\031\026!B:uC\016\\\007C\001+[\033\005)&BA\002W\025\t9\006,A\005nS:,7M]1gi*\t\021,A\002oKRL!aW+\003\023%#X-\\*uC\016\\\007")
/*    */ public class HardDiskDrive implements ItemTier, FileSystemLike { private final Delegator parent; private final int tier; private final String unlocalizedName;
/*    */   private final int kiloBytes;
/*    */   
/*  6 */   public None$ tooltipName() { return FileSystemLike.class.tooltipName(this); } private final int platterCount; private boolean showInItemList; private final int itemId; private Option<IIcon> li$cil$oc$common$item$traits$Delegate$$_icon; public void tooltipLines(ItemStack stack, EntityPlayer player, List tooltip, boolean advanced) { FileSystemLike.class.tooltipLines(this, stack, player, tooltip, advanced); } public ItemStack onItemRightClick(ItemStack stack, World world, EntityPlayer player) { return FileSystemLike.class.onItemRightClick(this, stack, world, player); } public boolean showInItemList() { return this.showInItemList; } public void showInItemList_$eq(boolean x$1) { this.showInItemList = x$1; } public int itemId() { return this.itemId; } public Option<IIcon> li$cil$oc$common$item$traits$Delegate$$_icon() { return this.li$cil$oc$common$item$traits$Delegate$$_icon; } public void li$cil$oc$common$item$traits$Delegate$$_icon_$eq(Option<IIcon> x$1) { this.li$cil$oc$common$item$traits$Delegate$$_icon = x$1; } public void li$cil$oc$common$item$traits$Delegate$_setter_$itemId_$eq(int x$1) { this.itemId = x$1; } public Seq<Object> tooltipData() { return Delegate.class.tooltipData((Delegate)this); } public int maxStackSize() { return Delegate.class.maxStackSize((Delegate)this); } public ItemStack createItemStack(int amount) { return Delegate.class.createItemStack((Delegate)this, amount); } public boolean doesSneakBypassUse(BlockPosition position, EntityPlayer player) { return Delegate.class.doesSneakBypassUse((Delegate)this, position, player); } public boolean onItemUseFirst(ItemStack stack, EntityPlayer player, BlockPosition position, int side, float hitX, float hitY, float hitZ) { return Delegate.class.onItemUseFirst((Delegate)this, stack, player, position, side, hitX, hitY, hitZ); } public boolean onItemUse(ItemStack stack, EntityPlayer player, BlockPosition position, int side, float hitX, float hitY, float hitZ) { return Delegate.class.onItemUse((Delegate)this, stack, player, position, side, hitX, hitY, hitZ); } public EnumAction getItemUseAction(ItemStack stack) { return Delegate.class.getItemUseAction((Delegate)this, stack); } public int getMaxItemUseDuration(ItemStack stack) { return Delegate.class.getMaxItemUseDuration((Delegate)this, stack); } public ItemStack onEaten(ItemStack stack, World world, EntityPlayer player) { return Delegate.class.onEaten((Delegate)this, stack, world, player); } public void onPlayerStoppedUsing(ItemStack stack, EntityPlayer player, int duration) { Delegate.class.onPlayerStoppedUsing((Delegate)this, stack, player, duration); } public void update(ItemStack stack, World world, Entity player, int slot, boolean selected) { Delegate.class.update((Delegate)this, stack, world, player, slot, selected); } public EnumRarity rarity(ItemStack stack) { return Delegate.class.rarity((Delegate)this, stack); } public int tierFromDriver(ItemStack stack) { return Delegate.class.tierFromDriver((Delegate)this, stack); } public int color(ItemStack stack, int pass) { return Delegate.class.color((Delegate)this, stack, pass); } public ItemStack getContainerItem(ItemStack stack) { return Delegate.class.getContainerItem((Delegate)this, stack); } public boolean hasContainerItem(ItemStack stack) { return Delegate.class.hasContainerItem((Delegate)this, stack); } public void tooltipExtended(ItemStack stack, List tooltip) { Delegate.class.tooltipExtended((Delegate)this, stack, tooltip); } public void tooltipCosts(ItemStack stack, List tooltip) { Delegate.class.tooltipCosts((Delegate)this, stack, tooltip); } public boolean isDamageable() { return Delegate.class.isDamageable((Delegate)this); } public int damage(ItemStack stack) { return Delegate.class.damage((Delegate)this, stack); } public int maxDamage(ItemStack stack) { return Delegate.class.maxDamage((Delegate)this, stack); } @SideOnly(Side.CLIENT) public Option<IIcon> icon() { return Delegate.class.icon((Delegate)this); } @SideOnly(Side.CLIENT) public void icon_$eq(IIcon value) { Delegate.class.icon_$eq((Delegate)this, value); } @SideOnly(Side.CLIENT) public Option<IIcon> icon(ItemStack stack, int pass) { return Delegate.class.icon((Delegate)this, stack, pass); } @SideOnly(Side.CLIENT) public void registerIcons(IIconRegister iconRegister) { Delegate.class.registerIcons((Delegate)this, iconRegister); } public boolean equals(ItemStack stack) { return Delegate.class.equals((Delegate)this, stack); } public int createItemStack$default$1() { return Delegate.class.createItemStack$default$1((Delegate)this); } public Delegator parent() { return this.parent; } public int tier() { return this.tier; } public HardDiskDrive(Delegator parent, int tier) { Delegate.class.$init$((Delegate)this); ItemTier.class.$init$(this); FileSystemLike.class.$init$(this);
/*  7 */     this.unlocalizedName = (new StringBuilder()).append(Delegate.class.unlocalizedName((Delegate)this)).append(BoxesRunTime.boxToInteger(tier)).toString();
/*  8 */     this.kiloBytes = Settings$.MODULE$.get().hddSizes()[tier];
/*  9 */     this.platterCount = Settings$.MODULE$.get().hddPlatterCounts()[tier]; } public String unlocalizedName() { return this.unlocalizedName; } public int kiloBytes() { return this.kiloBytes; } public int platterCount() { return this.platterCount; }
/*    */   
/*    */   public Option<String> displayName(ItemStack stack) {
/* 12 */     String localizedName = parent().internalGetItemStackDisplayName(stack);
/*    */     
/* 14 */     (new String[2])[0] = " ("; (new String[2])[1] = "MB)";
/*    */ 
/*    */     
/* 17 */     (new String[2])[0] = " ("; (new String[2])[1] = "KB)"; return (Option<String>)new Some((kiloBytes() >= 1024) ? (new StringBuilder()).append(localizedName).append((new StringContext((Seq)Predef$.MODULE$.wrapRefArray((Object[])new String[2]))).s((Seq)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToInteger(kiloBytes() / 1024) }))).toString() : (new StringBuilder()).append(localizedName).append((new StringContext((Seq)Predef$.MODULE$.wrapRefArray((Object[])new String[2]))).s((Seq)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToInteger(kiloBytes()) }))).toString());
/*    */   } }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\common\item\HardDiskDrive.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */