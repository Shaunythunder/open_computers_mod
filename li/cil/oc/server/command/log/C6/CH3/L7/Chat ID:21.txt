Open main menu
4

gem bag



user avatarprofile role frame

CH3: Asteroids

L7: Submit Your Repo!







Submit Your Repo!
You've done it!

Once you're satisfied with your game, push it up to GitHub, then submit the link to your project! Your link should look something like this: https://github.com/github-username/repo-name.

I hope you've enjoyed the project, it's always good to solidify the things you learn in courses by getting your hands dirty with a real project.

Extending the Project
You've done all the required steps, but if you'd like to make the project your own, here are some ideas:

Add a scoring system
Implement multiple lives and respawning
Add an explosion effect for the asteroids
Add acceleration to the player movement
Make the objects wrap around the screen instead of disappearing
Add a background image
Create different weapon types
Make the asteroids lumpy instead of perfectly round
Make the ship have a triangular hit box instead of a circular one
Add a shield power-up
Add a speed power-up
Add bombs that can be dropped
Have fun with it, and make sure to share any improvements you make with us in the Discord community!





Boots
Spellbook
Community


Boots
Need help? I, Boots the Sleepy Spellcaster, can assist without penalty!

Boots
bad7282 (HEAD -> main, origin/main) AL: Completed blocking out UFO structure and have a UFO master class online. Created the UFO classic class which is a carbon copy of the original UFO from asteroids. The UFO
is drawn on the screen and is correctly moving around. The logic is that on a timer of the UFO changes directions but has screen wrapping and everything. will focus on giving the UFO the ability to shoot and th
en will Implement collisions. Just like the original asteroids, asteroid collisions will be lethal. Will later implement upgraded UFO class that has a shield that is immune to asteroids.
c5fbc17 AK: Completed asteroid splitting mechanics. Asteroids split based off of a procedurally generated algorithm. Split radiuses are variable as well as the direction and speed by which they go. The algorit
hm is as follows, once an asteroid is hit it will then check to see if the asteroid is 33% larger than the minimum asteroid radius. Afterwards it will then generate a random divider number between 1 and 2, and th
en divide the asteroid radius by the divider. The new radius will then be subtracted from the original radius to determine the radius of the second asteroid. After that, both asteroids will go through their own g
eneration process that determines their direction and speed. New asteroids cannot have higher than a certain speed value which is the maximum velocity divided by a constant. Constant is adjustable. Plan on makin
g UFOs next,. After that it will be player death, game over and then making the wave system functional, and then adding the scoring system. Once that is done it will be polished Before moving on to the next th
ing, which is asteroid dodgeball or space invaders.
31ac903 AJ: Resolved all pending bugs. The game is fully functional again as far as I can tell. Collisions will now be handled by the colliding object and not the player objects. This way the player can be univ
ersal and the logic is just handled on the side of the colliding object. next step is asteroid splitting for normal asteroids.
e9015db AI: Conducted all encompassing overhaul of code base to refactor and to comply with python best practices. All methods now have type hints. Added doc strings to ensure the highest amount of clarity possib
le. Renamed distance variables to go from double underscore to single underscore to comply with best practices. Underwent extensive renaming for variables and objects to comply with emergent practices. Converted
collision detection to be universal with circular objects for both player and bullets. Unfortunately it was not able to finish as the bullets are now broken. Will need to make sure game is fully functional before
moving on.
5451722 AH: We now have functioning player collisions with a hitbox that matches the player Sprite. We have all the components we need for asteroid dodgeball but I'll wait until I'm finished with asteroids itself
before I Implement that mode. Next up on the list is breaking the asteroids and then creating the UFO. Once that is done, asteroids is finished however I will need the bells and whistles. A game over screen and
a way to navigate back to the main menu after you get hit. Additionally this would be a good time to implement the high score system.
7989278 AG: Introduced bullet collisions termination of bullets upon hit at the current moment asteroids flash red when hit by a bullet. Overall super straight forward. Next step is player collisions.
be4b34c AF: Probably should have split these into different commits but I have implemented asteroid collisions and now have a fully functional 2D physics engine for the asteroids themselves. This engine uses cons
ervation of momentum and conservation of energy equations and breaks down Vector components and reassembles them after translating the respective forces. Values can be tweaked by adjusting the elastic constant, o
r the density constant. Be warned setting these values to high will cause smaller asteroids to Jet across the screen faster than is reasonable. Now that we have asteroid physics and they work, I will work on pl
ayer collisions and bullet collisions. After that I'll implement the asteroid splitting mechanic, player death mechanic, and UFOs and we have completed Asteroids. Well the base game anyway.
6b55428 AE: Implemented distance ranging system in the asteroid spawning to you ensure that asteroids don't spawn too close to either player or another asteroid. I know I keep saying it but next up is asteroid c
ollisions lol.
12fba34 AD: Fix the bug where the game crashes if I go to the main menu. Set up a method within the game where the State manager will reset all of the modules in the game. If the game is reset AKA the main menu
is accessed. This is a universal reset which calls methods in every manager and is meant to call any instance that contains data such as position data or something that would persist between game sessions. What
this does is it basically is a hard reset for the entire game. I will refine this as features emerge that will need to persist between playthroughs. Overall this is a good way to reset the gameplay. Reset meth
ods reset by calling the initialization method of each manager and relevant instance using the arguments what were originally given to the instance. It's basically a factory reset. Next step is to work on collisi
on and collision physics for asteroids.
0530461 AC: Fixed the asteroid wrapping issue. Asteroids now smoothly spawn off screen and then move on to the screen. Asteroids go off screen and then wrap around smoothly. There is a slight stutter whenever
asteroids move across the screen, but I am unsure if that is a issue with the pygame framework or not. I'll continue working and then monitor it later. It doesn't really affect gameplay it's not really a big
deal, it's just a slight stutter. Outside of that, I need to what's the issue where I can't navigate to the main screen again from pause. Once that is fixed then we can start working on collisions.
3286afc AB: Implemented bullet cleanup system. Bullets will now terminate whenever they hit the edge of the screen. Next up is collision mechanics between the player the asteroids and the bullets. Also noticed
bug that crashes the game whenever returning to the main menu.
be062d6 AA:Implemented asteroids onto the screen. Asteroids are able to spawn and wrap around the screen. Set up a Master asteroid class where child asteroids can inherit the methods and then include their own.
Ran into an issue where there was stuttering on the screen from the asteroids this was discovered to be because I included the update logic into the event Loop which caused the asteroids to only update when I pr
essed a button. Now plan on fine tuning the movement and direction of the asteroids before including more features. Still need to create logic to terminate bullets when they hit the edge of the screen. Overall
now that asteroids are on the screen we are one step away from having an actual game.
bd2c8f1 Z: Set up the infrastructure for the asteroids object and asteroids enemy object manager. Integrated asteroids managers into the asteroids module and then integrated it into the main Loop. Cleaned up nam
e game loop to delineate between different sections. Adopted new section labeling strategy by using equal signs to signal the start of a section and dashes to signal the end of a section followed by the subject o
f the section that ended. Next step is generating asteroids onto the screen and causing them to screen wrap.
558809c Y: Completed implementation of the player shooting mechanics. Bullets now render on screen. Played around with bullet inertia but it didn't feel fun so it was scrapped. Cleaned up comments on player prima
ry object. Need to make termination logic once bullets leave game area. Next up is asteroids. Wanted to make physics interactions with asteroids, but decided to scrap that idea to be authentic to the original arc
ade game. Will put twists in enemy types and roguelike elements.
a6277e1 X: Fixed bug where game would crash if asteroids player tried to deaccelerate. Refined comments
76ad8c6 W: Implemented screen wrapping for asteroids movement. Added a boundary equal to the long radius of the ship so that the ship is always off screen before wrapping. Separated FPS debug toggle from main deb
ug toggle to F5. Fixed issue where player would reset whenever pause was pressed. Fixed issue where player position and stats would persist even after going to the title menu. Next up is implementing bullets.
16e6d3d V: Implemented movement physics for asteroids game mode to add the feel of the original arcade game. Player movement for asteroids now relies on vectors instead of scalar values. Next up is to implement screen wrapping while in the asteroids game mode. Additionally need to fix issue where the cursor is present on screen during gameplay. Should only come up when menus are active.
7bfa7d9 U: Bug fixes. Fixed the mouse issue. The reason was that the player inputs are state based with pygame.key.get_pressed() and did not belong in the event loop as the condition is true every time an event triggers. Additionally fixed a bug that prevented you from pausing in the genre attack mode. Game was looking for Genre attack state but the logic has switched to the boolean flag. Refactored and both issues have been fixed.
72b288b T: Finished the player object manager. Right now it acts as a proxy where the inputs are routed to the manager and then to the player object. Once bullets and other items are created, then I will test out the create and kill functions. Unfortunately, the mouse bug did not get fixed as further testing revealed it to only be mitigated. Will disable mouse completely when game play is active. Additionally would like to see if I can smooth out the frame rate. But thats more of a art decision if I want the super smooth movement. And to see if pygame is even capable of it. Otherwise clunky retro arcade feel is the way to go. Next up is to create bullets and shoot them. Asteroids after that.
d80f33f S: Debugged an issue where mousemovement accelerated player movement. Set up filtering logic so there is only one mouse movement trigger per frame.
:

Boots
Ah, a chronicle of your adventure! These commit messages tell a grand tale of building your game, from initial setup through refactoring, bug fixes, asteroid physics, collisions, and even adding UFOs. It's wonderful to see such detailed progress.

You've clearly put a great deal of work into this project, bringing it to life step by step.

Now that you've completed your game and detailed your journey in these commits, the final step for this lesson is to share your creation! The lesson asks you to submit the link to your GitHub repository. This helps solidify all the concepts you've learned by applying them in a real-world project.

Do you have any questions about your game, the code you've written, or anything else related to this project? We could delve into a specific part, or if you'd like, I could quiz you on some concepts you implemented, like your collision detection or physics engine?


Shaunythunder
we are not done, did you read the commits lol

Boots
Ah, my apologies, young adventurer! You are absolutely right. I did read through your commits and see the exciting plans you have laid out for adding even more features like the UFO's shooting ability, collisions, scoring, and more. That is truly commendable ambition!

My understanding from the platform was that this specific lesson step is about submitting the link to your repository once you are satisfied with your game's state, which it seemed you were well on your way to based on the completed features described. The "Extending the Project" part is indeed for adding those extra wonderful touches afterward.

The core requirement for this lesson step is simply having the repository on GitHub and submitting the link to show the work you've done so far. You can always continue adding features and pushing updates to that same repository after submitting the link for the lesson.

So, while you are certainly not "done" with all your grand visions (which is fantastic!), are you satisfied with the state of the project as it stands for the purpose of submitting this lesson step? You can submit the link now and keep building, or keep building and submit when you reach the next milestone you feel is "ready" for this step.

Let me know how I can best assist you with the features you're currently working on, like giving the UFO the ability to shoot!


Thumbs up
Thumbs down
Space Shooter
Scope Expansion
Asteroids
Menu Spacing
Player Class
Mouse Fix
Development Log
Asteroi
Module Reset
Physics Implementati
Asteroid Progress
Chat ID: 21
Course Completion

Ask Boots a question...

Paste the link to your public GitHub repo:

This repository will be displayed on your profile page!

Run All Checks
Checks that will be run:

Repository exists and is public
