/*    */ package li.cil.oc.server.component;
/*    */ 
/*    */ import li.cil.oc.api.machine.Arguments;
/*    */ import li.cil.oc.api.machine.Callback;
/*    */ import li.cil.oc.api.machine.Context;
/*    */ import li.cil.oc.api.network.Component;
/*    */ import li.cil.oc.server.component.traits.InventoryAware;
/*    */ import li.cil.oc.server.component.traits.TankAware;
/*    */ import li.cil.oc.server.component.traits.TankInventoryControl;
/*    */ import li.cil.oc.server.component.traits.WorldAware;
/*    */ import li.cil.oc.server.component.traits.WorldTankAnalytics;
/*    */ import li.cil.oc.util.BlockPosition;
/*    */ import net.minecraftforge.common.util.ForgeDirection;
/*    */ import net.minecraftforge.fluids.FluidStack;
/*    */ import scala.Option;
/*    */ import scala.Predef$;
/*    */ import scala.collection.immutable.Map;
/*    */ import scala.collection.mutable.Buffer;
/*    */ import scala.reflect.ClassTag;
/*    */ 
/*    */ @ScalaSignature(bytes = "\006\001\t\rs!B\001\003\021\003i\021!F+qOJ\fG-\032+b].\034uN\034;s_2dWM\035\006\003\007\021\t\021bY8na>tWM\034;\013\005\0251\021AB:feZ,'O\003\002\b\021\005\021qn\031\006\003\023)\t1aY5m\025\005Y\021A\0017j\007\001\001\"AD\b\016\003\t1Q\001\005\002\t\002E\021Q#\0269he\006$W\rV1oW\016{g\016\036:pY2,'o\005\002\020%A\0211CF\007\002))\tQ#A\003tG\006d\027-\003\002\030)\t1\021I\\=SK\032DQ!G\b\005\002i\ta\001P5oSRtD#A\007\007\017qy\001\023aA\001;\t11i\\7n_:\0342a\007\020'!\tyB%D\001!\025\t\t#%\001\003mC:<'\"A\022\002\t)\fg/Y\005\003K\001\022aa\0242kK\016$\bCA\024-\033\005A#BA\025+\003\031!'/\033<fe*\0211FB\001\004CBL\027BA\027)\005)!UM^5dK&sgm\034\005\006_m!\t\001M\001\007I%t\027\016\036\023\025\003E\002\"a\005\032\n\005M\"\"\001B+oSRD\001\"N\016\t\006\004%iAN\001\013I\0264\030nY3J]\032|W#A\034\021\tajthP\007\002s)\021!hO\001\nS6lW\017^1cY\026T!\001\020\013\002\025\r|G\016\\3di&|g.\003\002?s\t\031Q*\0319\021\005}\001\025BA!!\005\031\031FO]5oO\"A1i\007E\001B\0036q'A\006eKZL7-Z%oM>\004\003\"B#\034\t\0032\025!D4fi\022+g/[2f\023:4w\016F\001H!\021A5\n\024'\016\003%S!A\023\022\002\tU$\030\016\\\005\003}%\003\"!\024)\017\005Mq\025BA(\025\003\031\001&/\0323fM&\021\021)\025\006\003\037R1AaU\b\001)\n9\021\tZ1qi\026\0248\003\002*V7\006\004\"AV-\016\003]S!\001\027\026\002\rA\024XMZ1c\023\tQvK\001\nNC:\fw-\0323F]ZL'o\0348nK:$\bC\001/`\033\005i&B\0010\003\003\031!(/Y5ug&\021\001-\030\002\023/>\024H\016\032+b].\fe.\0317zi&\0347\017\005\002c75\tq\002\003\005e%\n\025\r\021\"\001f\003\021Awn\035;\026\003\031\004\"a\0326\016\003!T!!\033\026\002\0179,Go^8sW&\0211\016\033\002\020\013:4\030N]8o[\026tG\017S8ti\"AQN\025B\001B\003%a-A\003i_N$\b\005C\003\032%\022\005q\016\006\002qcB\021!M\025\005\006I:\004\rA\032\005\bgJ\023\r\021\"\021u\003\021qw\016Z3\026\003U\004\"a\032<\n\005]D'!C\"p[B|g.\0328u\021\031I(\013)A\005k\006)an\0343fA!)1P\025C!y\006A\001o\\:ji&|g.F\001~!\rq\030\021A\007\002*\021!JB\005\004\003\007y(!\004\"m_\016\\\007k\\:ji&|g\016C\004\002\bI#\t&!\003\002%\rDWmY6TS\022,gi\034:BGRLwN\034\013\007\003\027\t\t#!\r\021\t\0055\021QD\007\003\003\037Q1ASA\t\025\021\t\031\"!\006\002\r\r|W.\\8o\025\021\t9\"!\007\002\0355Lg.Z2sC\032$hm\034:hK*\021\0211D\001\004]\026$\030\002BA\020\003\037\021aBR8sO\026$\025N]3di&|g\016\003\005\002$\005\025\001\031AA\023\003\021\t'oZ:\021\t\005\035\022QF\007\003\003SQ1!a\013+\003\035i\027m\0315j]\026LA!a\f\002*\tI\021I]4v[\026tGo\035\005\t\003g\t)\0011\001\0026\005\ta\016E\002\024\003oI1!!\017\025\005\rIe\016\036\004\007\003{y\001!a\020\003\013\021\023xN\\3\024\017\005mR+!\021\\CB\031A,a\021\n\007\005\025SL\001\013UC:\\\027J\034<f]R|'/_\"p]R\024x\016\034\005\013I\006m\"Q1A\005\002\005%SCAA&%\025\tiEZA)\r\031\tye\004\001\002L\taAH]3gS:,W.\0328u}A!\0211KA-\033\t\t)FC\002\002X)\n\001\"\0338uKJt\027\r\\\005\005\0037\n)FA\003BO\026tG\017\003\006n\003w\021\t\021)A\005\003\027Bq!GA\036\t\003\t\t\007\006\003\002d\005\025\004c\0012\002<!9A-a\030A\002\005\035$#BA5M\006EcABA(\037\001\t9\007\003\005t\003w\021\r\021\"\021u\021\035I\0301\bQ\001\nUDaa_A\036\t\003b\b\002CA:\003w!\t%!\036\002\023%tg/\0328u_JLXCAA<!\021\tI(!!\016\005\005m$\002BA:\003{RA!a \002\032\005IQ.\0338fGJ\fg\r^\005\005\003\007\013YH\001\006J\023:4XM\034;pefD\001\"a\"\002<\021\005\023\021R\001\rg\026dWm\031;fINcw\016^\013\003\003kA\001\"!$\002<\021\005\023qR\001\021g\026dWm\031;fINcw\016^0%KF$2!MAI\021!\t\031*a#A\002\005U\022!\002<bYV,\007\002CAL\003w!\t%!'\002\tQ\fgn[\013\003\0037\003B!a\025\002\036&!\021qTA+\005%iU\017\034;j)\006t7\016\003\005\002$\006mB\021IAE\0031\031X\r\\3di\026$G+\0318l\021!\t9+a\017\005B\005%\026\001E:fY\026\034G/\0323UC:\\w\fJ3r)\r\t\0241\026\005\t\003'\013)\0131\001\0026!A\021qAA\036\t#\ny\013\006\004\002\f\005E\0261\027\005\t\003G\ti\0131\001\002&!A\0211GAW\001\004\t)D\002\004\0028>\001\021\021\030\002\006%>\024w\016^\n\b\003k+\026\021I.b\021)!\027Q\027BC\002\023\005\021QX\013\003\003\023R!!1g\003\0074a!a\024\020\001\005}\006\003BAc\003\033l!!a2\013\t\005%\0271Z\001\013i&dW-\0328uSRL(bAA\n\r%!\021qWAd\021)i\027Q\027B\001B\003%\021q\030\005\b3\005UF\021AAj)\021\t).a6\021\007\t\f)\fC\004e\003#\004\r!!7\023\013\005mg-a1\007\r\005=s\002AAm\021!\031\030Q\027b\001\n\003\"\bbB=\0026\002\006I!\036\005\007w\006UF\021\t?\t\021\005M\024Q\027C!\003K,\"!a:\023\013\005%h$a<\007\r\005=\003\001AAt\023\021\ti/!4\002\0355\f\027N\\%om\026tGo\034:zAA!\021\021_A{\033\t\t\031P\003\003\002t\005-\027\002BA|\003g\024a\"\0238wK:$xN]=Qe>D\030\020\003\005\002t\005%H\021IA~+\t\t\031\r\003\005\002\b\006UF\021IAE\021!\ti)!.\005B\t\005AcA\031\003\004!A\0211SA\000\001\004\t)\004\003\005\002\030\006UF\021\tB\004+\t\021IAE\003\003\fy\tYJ\002\004\002P\001\001!\021B\005\005\005\037\ti-A\003uC:\\\007\005\003\005\003\024\t-A\021\tB\013\00319W\r\036$mk&$G+\0318l)\021\0219Ba\f\023\r\te!q\004B\022\r\031\ty\005\001\001\003\030)\031!Q\004\007\002\rq\022xn\034;?!\r9'\021E\005\0035\"\004BA!\n\003,5\021!q\005\006\005\005S\t)\"\001\004gYVLGm]\005\005\005[\0219C\001\006J\r2,\030\016\032+b].D\001B!\r\003\022\001\007\021QG\001\006S:$W\r\037\005\t\003G\013)\f\"\021\002\n\"A\021qUA[\t\003\0229\004F\0022\005sA\001\"a%\0036\001\007\021Q\007\005\t\003\017\t)\f\"\025\003>Q1\0211\002B \005\003B\001\"a\t\003<\001\007\021Q\005\005\t\003g\021Y\0041\001\0026\001")
/*    */ public final class UpgradeTankController {
/*    */   public static abstract class Common$class { public static final Map li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo(UpgradeTankController.Common $this) {
/* 24 */       (new Tuple2[4])[0] = Predef$ArrowAssoc$.MODULE$
/* 25 */         .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("class"), "generic");
/* 26 */       (new Tuple2[4])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("description"), "Tank controller");
/* 27 */       (new Tuple2[4])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("vendor"), "MightyPirates GmbH & Co. KG");
/* 28 */       (new Tuple2[4])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("product"), "FlowCheckDX");
/*    */       return (Map)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[4]));
/*    */     } public static void $init$(UpgradeTankController.Common $this) {} public static Map getDeviceInfo(UpgradeTankController.Common $this) {
/* 31 */       return WrapAsJava$.MODULE$.mapAsJavaMap((Map)$this.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo());
/*    */     } }
/*    */   public static class Adapter extends ManagedEnvironment implements WorldTankAnalytics, Common { private final EnvironmentHost host; private final Component node; private final Map<String, String> li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo; private volatile boolean bitmap$0;
/* 34 */     private Map li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo = UpgradeTankController.Common$class.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo : li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return UpgradeTankController.Common$class.getDeviceInfo(this); } @Callback(doc = "function(side:number [, tank:number]):number -- Get the amount of fluid in the specified tank on the specified side.") public Object[] getTankLevel(Context context, Arguments args) { return WorldTankAnalytics.class.getTankLevel(this, context, args); } @Callback(doc = "function(side:number [, tank:number]):number -- Get the capacity of the specified tank on the specified side.") public Object[] getTankCapacity(Context context, Arguments args) { return WorldTankAnalytics.class.getTankCapacity(this, context, args); } @Callback(doc = "function(side:number [, tank:number]):table -- Get a description of the fluid in the the specified tank on the specified side.") public Object[] getFluidInTank(Context context, Arguments args) { return WorldTankAnalytics.class.getFluidInTank(this, context, args); } @Callback(doc = "function(side:number):number -- Get the number of tanks available on the specified side.") public Object[] getTankCount(Context context, Arguments args) { return WorldTankAnalytics.class.getTankCount(this, context, args); } public World world() { return WorldAware.class.world((WorldAware)this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer((WorldAware)this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract((WorldAware)this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds((WorldAware)this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock((WorldAware)this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide((WorldAware)this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity((WorldAware)this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent((WorldAware)this, side); } public EnvironmentHost host() { return this.host; } public Adapter(EnvironmentHost host) { WorldAware.class.$init$((WorldAware)this); WorldTankAnalytics.class.$init$(this); UpgradeTankController.Common$class.$init$(this);
/* 35 */       this.node = (Component)Network.newNode((Environment)this, Visibility.Network)
/* 36 */         .withComponent("tank_controller", Visibility.Network)
/* 37 */         .create(); }
/*    */      public Component node() {
/*    */       return this.node;
/*    */     } public BlockPosition position() {
/* 41 */       return BlockPosition$.MODULE$.apply(host());
/*    */     } public ForgeDirection checkSideForAction(Arguments args, int n) {
/* 43 */       return ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(n);
/*    */     } }
/*    */   public static class Drone extends ManagedEnvironment implements TankInventoryControl, WorldTankAnalytics, Common { private final Agent host; private final Component node; private final Map<String, String> li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo; private volatile boolean bitmap$0;
/* 46 */     private Map li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo = UpgradeTankController.Common$class.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo : li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return UpgradeTankController.Common$class.getDeviceInfo(this); } @Callback(doc = "function(side:number [, tank:number]):number -- Get the amount of fluid in the specified tank on the specified side.") public Object[] getTankLevel(Context context, Arguments args) { return WorldTankAnalytics.class.getTankLevel(this, context, args); } @Callback(doc = "function(side:number [, tank:number]):number -- Get the capacity of the specified tank on the specified side.") public Object[] getTankCapacity(Context context, Arguments args) { return WorldTankAnalytics.class.getTankCapacity(this, context, args); } @Callback(doc = "function(side:number [, tank:number]):table -- Get a description of the fluid in the the specified tank on the specified side.") public Object[] getFluidInTank(Context context, Arguments args) { return WorldTankAnalytics.class.getFluidInTank(this, context, args); } @Callback(doc = "function(side:number):number -- Get the number of tanks available on the specified side.") public Object[] getTankCount(Context context, Arguments args) { return WorldTankAnalytics.class.getTankCount(this, context, args); } @Callback(doc = "function([slot:number]):number -- Get the amount of fluid in the tank item in the specified slot or the selected slot.") public Object[] getTankLevelInSlot(Context context, Arguments args) { return TankInventoryControl.class.getTankLevelInSlot(this, context, args); } @Callback(doc = "function([slot:number]):number -- Get the capacity of the tank item in the specified slot of the robot or the selected slot.") public Object[] getTankCapacityInSlot(Context context, Arguments args) { return TankInventoryControl.class.getTankCapacityInSlot(this, context, args); } @Callback(doc = "function([slot:number]):table -- Get a description of the fluid in the tank item in the specified slot or the selected slot.") public Object[] getFluidInTankInSlot(Context context, Arguments args) { return TankInventoryControl.class.getFluidInTankInSlot(this, context, args); } @Callback(doc = "function([tank:number]):table -- Get a description of the fluid in the tank in the specified slot or the selected slot.") public Object[] getFluidInInternalTank(Context context, Arguments args) { return TankInventoryControl.class.getFluidInInternalTank(this, context, args); } @Callback(doc = "function([amount:number]):boolean -- Transfers fluid from a tank in the selected inventory slot to the selected tank.") public Object[] drain(Context context, Arguments args) { return TankInventoryControl.class.drain(this, context, args); } @Callback(doc = "function([amount:number]):boolean -- Transfers fluid from the selected tank to a tank in the selected inventory slot.") public Object[] fill(Context context, Arguments args) { return TankInventoryControl.class.fill(this, context, args); } public int optTank(Arguments args, int n) { return TankAware.class.optTank((TankAware)this, args, n); } public Option<IFluidTank> getTank(int index) { return TankAware.class.getTank((TankAware)this, index); } public Option<FluidStack> fluidInTank(int index) { return TankAware.class.fluidInTank((TankAware)this, index); } public boolean haveSameFluidType(FluidStack stackA, FluidStack stackB) { return TankAware.class.haveSameFluidType((TankAware)this, stackA, stackB); } public IndexedSeq<Object> insertionSlots() { return InventoryAware.class.insertionSlots((InventoryAware)this); } public int optSlot(Arguments args, int n) { return InventoryAware.class.optSlot((InventoryAware)this, args, n); } public Option<ItemStack> stackInSlot(int slot) { return InventoryAware.class.stackInSlot((InventoryAware)this, slot); } public World world() { return WorldAware.class.world((WorldAware)this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer((WorldAware)this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract((WorldAware)this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds((WorldAware)this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock((WorldAware)this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide((WorldAware)this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity((WorldAware)this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent((WorldAware)this, side); } public Agent host() { return this.host; } public Drone(Agent host) { WorldAware.class.$init$((WorldAware)this); InventoryAware.class.$init$((InventoryAware)this); TankAware.class.$init$((TankAware)this); TankInventoryControl.class.$init$(this); WorldTankAnalytics.class.$init$(this); UpgradeTankController.Common$class.$init$(this);
/* 47 */       this.node = (Component)Network.newNode((Environment)this, Visibility.Network)
/* 48 */         .withComponent("tank_controller", Visibility.Neighbors)
/* 49 */         .create(); } public Component node() { return this.node; }
/*    */     public BlockPosition position() {
/* 51 */       return BlockPosition$.MODULE$.apply((EnvironmentHost)host());
/*    */     } public IInventory inventory() {
/* 53 */       return host().mainInventory();
/*    */     } public int selectedSlot() {
/* 55 */       return host().selectedSlot();
/*    */     } public void selectedSlot_$eq(int value) {
/* 57 */       host().setSelectedSlot(value);
/*    */     } public MultiTank tank() {
/* 59 */       return host().tank();
/*    */     } public int selectedTank() {
/* 61 */       return host().selectedTank();
/*    */     } public void selectedTank_$eq(int value) {
/* 63 */       host().setSelectedTank(value);
/*    */     } public ForgeDirection checkSideForAction(Arguments args, int n) {
/* 65 */       return ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(n);
/*    */     } }
/*    */   public static class Robot extends ManagedEnvironment implements TankInventoryControl, WorldTankAnalytics, Common { private final li.cil.oc.common.tileentity.Robot host; private final Component node; private final Map<String, String> li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo; private volatile boolean bitmap$0;
/* 68 */     private Map li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo = UpgradeTankController.Common$class.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo : li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return UpgradeTankController.Common$class.getDeviceInfo(this); } @Callback(doc = "function(side:number [, tank:number]):number -- Get the amount of fluid in the specified tank on the specified side.") public Object[] getTankLevel(Context context, Arguments args) { return WorldTankAnalytics.class.getTankLevel(this, context, args); } @Callback(doc = "function(side:number [, tank:number]):number -- Get the capacity of the specified tank on the specified side.") public Object[] getTankCapacity(Context context, Arguments args) { return WorldTankAnalytics.class.getTankCapacity(this, context, args); } @Callback(doc = "function(side:number [, tank:number]):table -- Get a description of the fluid in the the specified tank on the specified side.") public Object[] getFluidInTank(Context context, Arguments args) { return WorldTankAnalytics.class.getFluidInTank(this, context, args); } @Callback(doc = "function(side:number):number -- Get the number of tanks available on the specified side.") public Object[] getTankCount(Context context, Arguments args) { return WorldTankAnalytics.class.getTankCount(this, context, args); } @Callback(doc = "function([slot:number]):number -- Get the amount of fluid in the tank item in the specified slot or the selected slot.") public Object[] getTankLevelInSlot(Context context, Arguments args) { return TankInventoryControl.class.getTankLevelInSlot(this, context, args); } @Callback(doc = "function([slot:number]):number -- Get the capacity of the tank item in the specified slot of the robot or the selected slot.") public Object[] getTankCapacityInSlot(Context context, Arguments args) { return TankInventoryControl.class.getTankCapacityInSlot(this, context, args); } @Callback(doc = "function([slot:number]):table -- Get a description of the fluid in the tank item in the specified slot or the selected slot.") public Object[] getFluidInTankInSlot(Context context, Arguments args) { return TankInventoryControl.class.getFluidInTankInSlot(this, context, args); } @Callback(doc = "function([tank:number]):table -- Get a description of the fluid in the tank in the specified slot or the selected slot.") public Object[] getFluidInInternalTank(Context context, Arguments args) { return TankInventoryControl.class.getFluidInInternalTank(this, context, args); } @Callback(doc = "function([amount:number]):boolean -- Transfers fluid from a tank in the selected inventory slot to the selected tank.") public Object[] drain(Context context, Arguments args) { return TankInventoryControl.class.drain(this, context, args); } @Callback(doc = "function([amount:number]):boolean -- Transfers fluid from the selected tank to a tank in the selected inventory slot.") public Object[] fill(Context context, Arguments args) { return TankInventoryControl.class.fill(this, context, args); } public int optTank(Arguments args, int n) { return TankAware.class.optTank((TankAware)this, args, n); } public Option<IFluidTank> getTank(int index) { return TankAware.class.getTank((TankAware)this, index); } public Option<FluidStack> fluidInTank(int index) { return TankAware.class.fluidInTank((TankAware)this, index); } public boolean haveSameFluidType(FluidStack stackA, FluidStack stackB) { return TankAware.class.haveSameFluidType((TankAware)this, stackA, stackB); } public IndexedSeq<Object> insertionSlots() { return InventoryAware.class.insertionSlots((InventoryAware)this); } public int optSlot(Arguments args, int n) { return InventoryAware.class.optSlot((InventoryAware)this, args, n); } public Option<ItemStack> stackInSlot(int slot) { return InventoryAware.class.stackInSlot((InventoryAware)this, slot); } public World world() { return WorldAware.class.world((WorldAware)this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer((WorldAware)this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract((WorldAware)this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds((WorldAware)this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock((WorldAware)this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide((WorldAware)this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity((WorldAware)this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent((WorldAware)this, side); } public li.cil.oc.common.tileentity.Robot host() { return this.host; } public Robot(li.cil.oc.common.tileentity.Robot host) { WorldAware.class.$init$((WorldAware)this); InventoryAware.class.$init$((InventoryAware)this); TankAware.class.$init$((TankAware)this); TankInventoryControl.class.$init$(this); WorldTankAnalytics.class.$init$(this); UpgradeTankController.Common$class.$init$(this);
/* 69 */       this.node = (Component)Network.newNode((Environment)this, Visibility.Network)
/* 70 */         .withComponent("tank_controller", Visibility.Neighbors)
/* 71 */         .create(); } public Component node() { return this.node; }
/*    */     public BlockPosition position() {
/* 73 */       return BlockPosition$.MODULE$.apply((EnvironmentHost)host());
/*    */     } public InventoryProxy inventory() {
/* 75 */       return host().mainInventory();
/*    */     } public int selectedSlot() {
/* 77 */       return host().selectedSlot();
/*    */     } public void selectedSlot_$eq(int value) {
/* 79 */       host().setSelectedSlot(value);
/*    */     } public MultiTank tank() {
/* 81 */       return host().tank();
/*    */     } public int selectedTank() {
/* 83 */       return host().selectedTank();
/*    */     } public void selectedTank_$eq(int value) {
/* 85 */       host().selectedTank_$eq(value);
/*    */     } public ForgeDirection checkSideForAction(Arguments args, int n) {
/* 87 */       return host().toGlobal(ExtendedArguments$.MODULE$.extendedArguments(args).checkSideForAction(n));
/*    */     } }
/*    */ 
/*    */   
/*    */   public static interface Common extends DeviceInfo {
/*    */     Map<String, String> li$cil$oc$server$component$UpgradeTankController$Common$$deviceInfo();
/*    */     
/*    */     Map<String, String> getDeviceInfo();
/*    */   }
/*    */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\server\component\UpgradeTankController.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */