/*    */ package li.cil.oc.server.component;
/*    */ 
/*    */ import li.cil.oc.api.machine.Arguments;
/*    */ import li.cil.oc.api.machine.Callback;
/*    */ import li.cil.oc.api.machine.Context;
/*    */ import li.cil.oc.server.component.traits.FluidContainerTransfer;
/*    */ import li.cil.oc.server.component.traits.InventoryTransfer;
/*    */ import li.cil.oc.server.component.traits.WorldAware;
/*    */ import li.cil.oc.server.component.traits.WorldFluidContainerAnalytics;
/*    */ import li.cil.oc.server.component.traits.WorldInventoryAnalytics;
/*    */ import li.cil.oc.server.component.traits.WorldTankAnalytics;
/*    */ import li.cil.oc.util.BlockPosition;
/*    */ import net.minecraftforge.common.util.ForgeDirection;
/*    */ import scala.Option;
/*    */ import scala.Predef$;
/*    */ import scala.Predef$ArrowAssoc$;
/*    */ import scala.reflect.ClassTag;
/*    */ 
/*    */ @ScalaSignature(bytes = "\006\001\005Ut!B\001\003\021\003i\021A\003+sC:\034\bo\\:fe*\0211\001B\001\nG>l\007o\0348f]RT!!\002\004\002\rM,'O^3s\025\t9\001\"\001\002pG*\021\021BC\001\004G&d'\"A\006\002\0051L7\001\001\t\003\035=i\021A\001\004\006!\tA\t!\005\002\013)J\fgn\0359pg\026\0248CA\b\023!\t\031b#D\001\025\025\005)\022!B:dC2\f\027BA\f\025\005\031\te.\037*fM\")\021d\004C\0015\0051A(\0338jiz\"\022!\004\004\0069=\t\t!\b\002\007\007>lWn\0348\024\021mqb\005L\0303ka\002\"a\b\023\016\003\001R!!\t\022\002\rA\024XMZ1c\025\t\031c!A\002ba&L!!\n\021\003%5\013g.Y4fI\026sg/\033:p]6,g\016\036\t\003O)j\021\001\013\006\003S\t\ta\001\036:bSR\034\030BA\026)\005]9vN\0357e\023:4XM\034;pef\fe.\0317zi&\0347\017\005\002([%\021a\006\013\002\023/>\024H\016\032+b].\fe.\0317zi&\0347\017\005\002(a%\021\021\007\013\002\035/>\024H\016\032$mk&$7i\0348uC&tWM]!oC2LH/[2t!\t93'\003\0025Q\t\t\022J\034<f]R|'/\037+sC:\034h-\032:\021\005\0352\024BA\034)\005Y1E.^5e\007>tG/Y5oKJ$&/\0318tM\026\024\bCA\035=\033\005Q$BA\036#\003\031!'/\033<fe&\021QH\017\002\013\t\0264\030nY3J]\032|\007\"B\r\034\t\003yD#\001!\021\005\005[R\"A\b\t\017\r[\"\031!C!\t\006!an\0343f+\005)\005C\001$J\033\0059%B\001%#\003\035qW\r^<pe.L!AS$\003%\r{W\016]8oK:$8i\0348oK\016$xN\035\005\007\031n\001\013\021B#\002\0139|G-\032\021\t\0219[\002R1A\005\016=\013!\002Z3wS\016,\027J\0344p+\005\001\006\003B)W1bk\021A\025\006\003'R\013\021\"[7nkR\f'\r\\3\013\005U#\022AC2pY2,7\r^5p]&\021qK\025\002\004\033\006\004\bCA-_\033\005Q&BA.]\003\021a\027M\\4\013\003u\013AA[1wC&\021qL\027\002\007'R\024\030N\\4\t\021\005\\\002\022!Q!\016A\0131\002Z3wS\016,\027J\0344pA!)1m\007C!I\006iq-\032;EKZL7-Z%oM>$\022!\032\t\005M&T'.D\001h\025\tAG,\001\003vi&d\027BA,h!\tYgN\004\002\024Y&\021Q\016F\001\007!J,G-\0324\n\005}{'BA7\025\021\025\t8\004\"\025s\003I\031\007.Z2l'&$WMR8s\003\016$\030n\0348\025\tMt\030Q\002\t\003irl\021!\036\006\003QZT!a\036=\002\r\r|W.\\8o\025\tI(0\001\bnS:,7M]1gi\032|'oZ3\013\003m\f1A\\3u\023\tiXO\001\bG_J<W\rR5sK\016$\030n\0348\t\r}\004\b\031AA\001\003\021\t'oZ:\021\t\005\r\021\021B\007\003\003\013Q1!a\002#\003\035i\027m\0315j]\026LA!a\003\002\006\tI\021I]4v[\026tGo\035\005\b\003\037\001\b\031AA\t\003\005q\007cA\n\002\024%\031\021Q\003\013\003\007%sG\017C\004\002\032m!\t%a\007\002%=tGK]1og\032,'oQ8oi\026tGo\035\013\003\003;\001BaEA\020U&\031\021\021\005\013\003\r=\003H/[8o\r\031\t)c\004\001\002(\t)!\t\\8dWN\031\0211\005!\t\027\005-\0221\005BC\002\023\005\021QF\001\005Q>\034H/\006\002\0020A!\021\021GA\035\033\t\t\031D\003\003\0026\005]\022A\003;jY\026,g\016^5us*\021qOB\005\004!\005M\002bCA\037\003G\021\t\021)A\005\003_\tQ\001[8ti\002Bq!GA\022\t\003\t\t\005\006\003\002D\005\025\003cA!\002$!A\0211FA \001\004\ty\003\003\005\002J\005\rB\021IA&\003!\001xn]5uS>tWCAA'!\021\ty%a\025\016\005\005E#B\0015\007\023\021\t)&!\025\003\033\tcwnY6Q_NLG/[8o\021!\tI\"a\t\005B\005maABA.\037\001\tiFA\004Va\036\024\030\rZ3\024\007\005e\003\tC\006\002,\005e#Q1A\005\002\005\005TCAA2!\r1\025QM\005\004\003O:%aD#om&\024xN\\7f]RDun\035;\t\027\005u\022\021\fB\001B\003%\0211\r\005\b3\005eC\021AA7)\021\ty'!\035\021\007\005\013I\006\003\005\002,\005-\004\031AA2\021!\tI%!\027\005B\005-\003")
/*    */ public final class Transposer {
/*    */   public static abstract class Common extends ManagedEnvironment implements WorldInventoryAnalytics, WorldTankAnalytics, WorldFluidContainerAnalytics, InventoryTransfer, FluidContainerTransfer, DeviceInfo {
/*    */     private final ComponentConnector node;
/*    */     
/*    */     @Callback(doc = "function(tankSide:number, inventorySide:number, inventorySlot:number [, count:number [, sourceTank:number [, outputSide:number[, outputSlot:number]]]]):boolean, number -- Transfer some fluid from the tank to the container. Returns operation result and filled amount")
/* 25 */     public Object[] transferFluidFromTankToContainer(Context context, Arguments args) { return FluidContainerTransfer.class.transferFluidFromTankToContainer(this, context, args); } private Map<String, String> deviceInfo; private volatile boolean bitmap$0; @Callback(doc = "function(inventorySide:number, inventorySlot:number, tankSide:number [, count:number [, outputSide:number[, outputSlot:number]]]):boolean, number -- Transfer some fluid from the container to the tank. Returns operation result and filled amount") public Object[] transferFluidFromContainerToTank(Context context, Arguments args) { return FluidContainerTransfer.class.transferFluidFromContainerToTank(this, context, args); } @Callback(doc = "function(sourceSide:number, sourceSlot:number, sinkSide:number, sinkSlot:number[, count:number [, sourceOutputSide:number[, sinkOutputSide:number[, sourceOutputSlot:number[, sinkOutputSlot:number]]]]]):boolean, number -- Transfer some fluid from a container to another container. Returns operation result and filled amount") public Object[] transferFluidBetweenContainers(Context context, Arguments args) { return FluidContainerTransfer.class.transferFluidBetweenContainers(this, context, args); } @Callback(doc = "function(sourceSide:number, sinkSide:number[, count:number[, sourceSlot:number[, sinkSlot:number]]]):number -- Transfer some items between two inventories.") public Object[] transferItem(Context context, Arguments args) { return InventoryTransfer.class.transferItem(this, context, args); } @Callback(doc = "function(sourceSide:number, sinkSide:number[, count:number [, sourceTank:number]]):boolean, number -- Transfer some fluid between two tanks. Returns operation result and filled amount") public Object[] transferFluid(Context context, Arguments args) { return InventoryTransfer.class.transferFluid(this, context, args); } @Callback(doc = "function(side:number, slot:number):number -- Get the capacity of the fluid container in the specified slot of the inventory on the specified side of the device.") public Object[] getContainerCapacityInSlot(Context context, Arguments args) { return WorldFluidContainerAnalytics.class.getContainerCapacityInSlot(this, context, args); } @Callback(doc = "function(side:number, slot:number):number -- Get the capacity the fluid container in the specified slot of the inventory on the specified side of the device.") public Object[] getContainerLevelInSlot(Context context, Arguments args) { return WorldFluidContainerAnalytics.class.getContainerLevelInSlot(this, context, args); } @Callback(doc = "function(side:number, slot:number):table -- Get a description of the fluid in the fluid container in the specified slot of the inventory on the specified side of the device.") public Object[] getFluidInContainerInSlot(Context context, Arguments args) { return WorldFluidContainerAnalytics.class.getFluidInContainerInSlot(this, context, args); } @Callback(doc = "function(side:number [, tank:number]):number -- Get the amount of fluid in the specified tank on the specified side.") public Object[] getTankLevel(Context context, Arguments args) { return WorldTankAnalytics.class.getTankLevel(this, context, args); } @Callback(doc = "function(side:number [, tank:number]):number -- Get the capacity of the specified tank on the specified side.") public Object[] getTankCapacity(Context context, Arguments args) { return WorldTankAnalytics.class.getTankCapacity(this, context, args); } @Callback(doc = "function(side:number [, tank:number]):table -- Get a description of the fluid in the the specified tank on the specified side.") public Object[] getFluidInTank(Context context, Arguments args) { return WorldTankAnalytics.class.getFluidInTank(this, context, args); } @Callback(doc = "function(side:number):number -- Get the number of tanks available on the specified side.") public Object[] getTankCount(Context context, Arguments args) { return WorldTankAnalytics.class.getTankCount(this, context, args); } @Callback(doc = "function(side:number):number -- Get the number of slots in the inventory on the specified side of the device.") public Object[] getInventorySize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getInventorySize(this, context, args); } @Callback(doc = "function(side:number, slot:number):number -- Get number of items in the specified slot of the inventory on the specified side of the device.") public Object[] getSlotStackSize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getSlotStackSize(this, context, args); } @Callback(doc = "function(side:number, slot:number):number -- Get the maximum number of items in the specified slot of the inventory on the specified side of the device.") public Object[] getSlotMaxStackSize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getSlotMaxStackSize(this, context, args); } @Callback(doc = "function(side:number, slotA:number, slotB:number[, checkNBT:boolean=false]):boolean -- Get whether the items in the two specified slots of the inventory on the specified side of the device are of the same type.") public Object[] compareStacks(Context context, Arguments args) { return WorldInventoryAnalytics.class.compareStacks(this, context, args); } @Callback(doc = "function(side:number, slot:number, dbAddress:string, dbSlot:number[, checkNBT:boolean=false]):boolean -- Compare an item in the specified slot in the inventory on the specified side with one in the database with the specified address.") public Object[] compareStackToDatabase(Context context, Arguments args) { return WorldInventoryAnalytics.class.compareStackToDatabase(this, context, args); } @Callback(doc = "function(side:number, slotA:number, slotB:number):boolean -- Get whether the items in the two specified slots of the inventory on the specified side of the device are equivalent (have shared OreDictionary IDs).") public Object[] areStacksEquivalent(Context context, Arguments args) { return WorldInventoryAnalytics.class.areStacksEquivalent(this, context, args); } @Callback(doc = "function(side:number, slot:number, label:string):boolean -- Change the display name of the stack in the inventory on the specified side of the device.") public Object[] setStackDisplayName(Context context, Arguments args) { return WorldInventoryAnalytics.class.setStackDisplayName(this, context, args); } @Callback(doc = "function(side:number, slot:number):table -- Get a description of the stack in the inventory on the specified side of the device.") public Object[] getStackInSlot(Context context, Arguments args) { return WorldInventoryAnalytics.class.getStackInSlot(this, context, args); } @Callback(doc = "function(side:number):userdata -- Get a description of all stacks in the inventory on the specified side of the device.") public Object[] getAllStacks(Context context, Arguments args) { return WorldInventoryAnalytics.class.getAllStacks(this, context, args); } @Callback(doc = "function(side:number):string -- Get the the name of the inventory on the specified side of the device.") public Object[] getInventoryName(Context context, Arguments args) { return WorldInventoryAnalytics.class.getInventoryName(this, context, args); } @Callback(doc = "function(side:number, slot:number, dbAddress:string, dbSlot:number):boolean -- Store an item stack description in the specified slot of the database with the specified address.") public Object[] store(Context context, Arguments args) { return WorldInventoryAnalytics.class.store(this, context, args); } public World world() { return WorldAware.class.world((WorldAware)this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer((WorldAware)this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract((WorldAware)this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds((WorldAware)this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock((WorldAware)this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide((WorldAware)this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity((WorldAware)this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent((WorldAware)this, side); } public Common() { WorldAware.class.$init$((WorldAware)this); WorldInventoryAnalytics.class.$init$(this); WorldTankAnalytics.class.$init$(this); WorldFluidContainerAnalytics.class.$init$(this); InventoryTransfer.class.$init$(this); FluidContainerTransfer.class.$init$(this);
/* 26 */       this.node = (ComponentConnector)Network.newNode((Environment)this, Visibility.Network)
/* 27 */         .withComponent("transposer")
/* 28 */         .withConnector()
/* 29 */         .create(); }
/*    */     public ComponentConnector node() { return this.node; }
/* 31 */     private Map deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { (new Tuple2[4])[0] = Predef$ArrowAssoc$.MODULE$
/* 32 */             .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("class"), "generic");
/* 33 */           (new Tuple2[4])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("description"), "Transposer");
/* 34 */           (new Tuple2[4])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("vendor"), "MightyPirates GmbH & Co. KG");
/* 35 */           (new Tuple2[4])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("product"), "TP4k-iX"); this.deviceInfo = (Map<String, String>)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[4])); this.bitmap$0 = true; }
/*    */          return this.deviceInfo; }
/*    */        } private final Map<String, String> deviceInfo() { return this.bitmap$0 ? this.deviceInfo : deviceInfo$lzycompute(); }
/* 38 */     public Map<String, String> getDeviceInfo() { return WrapAsJava$.MODULE$.mapAsJavaMap((Map)deviceInfo()); }
/*    */     
/*    */     public ForgeDirection checkSideForAction(Arguments args, int n) {
/* 41 */       return ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(n);
/*    */     }
/*    */     public Option<String> onTransferContents() {
/* 44 */       return node().tryChangeBuffer(-Settings$.MODULE$.get().transposerCost()) ? (Option<String>)None$.MODULE$ : 
/* 45 */         Option$.MODULE$.apply("not enough energy");
/*    */     } }
/*    */   public static class Block extends Common { private final li.cil.oc.common.tileentity.Transposer host;
/*    */     
/* 49 */     public li.cil.oc.common.tileentity.Transposer host() { return this.host; } public Block(li.cil.oc.common.tileentity.Transposer host) {} public BlockPosition position() {
/* 50 */       return BlockPosition$.MODULE$.apply((EnvironmentHost)host());
/*    */     }
/*    */     public Option<String> onTransferContents() {
/* 53 */       Option<String> result = super.onTransferContents();
/* 54 */       if (result.isEmpty()) PacketSender$.MODULE$.sendTransposerActivity(host()); 
/* 55 */       return result;
/*    */     } }
/*    */   public static class Upgrade extends Common { private final EnvironmentHost host;
/*    */     
/* 59 */     public EnvironmentHost host() { return this.host; } public Upgrade(EnvironmentHost host) {
/* 60 */       node().setVisibility(Visibility.Neighbors);
/*    */     } public BlockPosition position() {
/* 62 */       return BlockPosition$.MODULE$.apply(host());
/*    */     } }
/*    */ 
/*    */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\server\component\Transposer.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */