/*     */ package li.cil.oc.server.component;
/*     */ 
/*     */ import li.cil.oc.api.machine.Arguments;
/*     */ import li.cil.oc.api.machine.Callback;
/*     */ import li.cil.oc.api.machine.Context;
/*     */ import li.cil.oc.server.component.traits.InventoryAware;
/*     */ import li.cil.oc.server.component.traits.InventoryControl;
/*     */ import li.cil.oc.server.component.traits.TankAware;
/*     */ import li.cil.oc.server.component.traits.TankControl;
/*     */ import li.cil.oc.server.component.traits.WorldAware;
/*     */ import net.minecraft.entity.Entity;
/*     */ import net.minecraftforge.common.util.ForgeDirection;
/*     */ import scala.Option;
/*     */ import scala.Predef$;
/*     */ import scala.collection.Seq;
/*     */ import scala.reflect.ClassTag;
/*     */ import scala.runtime.BoxesRunTime;
/*     */ 
/*     */ @ScalaSignature(bytes = "\006\001\005uh\001B\001\003\0015\021Q\001\022:p]\026T!a\001\003\002\023\r|W\016]8oK:$(BA\003\007\003\031\031XM\035<fe*\021q\001C\001\003_\016T!!\003\006\002\007\rLGNC\001\f\003\ta\027n\001\001\024\t\001qaC\007\t\003\037Qi\021\001\005\006\003#I\ta\001\035:fM\006\024'BA\n\007\003\r\t\007/[\005\003+A\021!#T1oC\036,G-\0228wSJ|g.\\3oiB\021q\003G\007\002\005%\021\021D\001\002\006\003\036,g\016\036\t\0037yi\021\001\b\006\003;I\ta\001\032:jm\026\024\030BA\020\035\005)!UM^5dK&sgm\034\005\tC\001\021)\031!C\001E\005)\021mZ3oiV\t1\005\005\002%S5\tQE\003\002'O\0051QM\034;jifT!\001\013\004\002\r\r|W.\\8o\023\t\tQ\005\003\005,\001\t\005\t\025!\003$\003\031\tw-\0328uA!)Q\006\001C\001]\0051A(\0338jiz\"\"a\f\031\021\005]\001\001\"B\021-\001\004\031\003b\002\032\001\005\004%\teM\001\005]>$W-F\0015!\t)\004(D\0017\025\t9$#A\004oKR<xN]6\n\005e2$AE\"p[B|g.\0328u\007>tg.Z2u_JDaa\017\001!\002\023!\024!\0028pI\026\004\003\002C\037\001\021\013\007IQ\002 \002\025\021,g/[2f\023:4w.F\001@!\021\001u)S%\016\003\005S!AQ\"\002\023%lW.\036;bE2,'B\001#F\003)\031w\016\0347fGRLwN\034\006\002\r\006)1oY1mC&\021\001*\021\002\004\033\006\004\bC\001&P\033\005Y%B\001'N\003\021a\027M\\4\013\0039\013AA[1wC&\021\001k\023\002\007'R\024\030N\\4\t\021I\003\001\022!Q!\016}\n1\002Z3wS\016,\027J\0344pA!)A\013\001C!+\006iq-\032;EKZL7-Z%oM>$\022A\026\t\005/j[6,D\001Y\025\tIV*\001\003vi&d\027B\001%Y!\ta\006M\004\002^=6\tQ)\003\002`\013\0061\001K]3eK\032L!\001U1\013\005}+\005\"B2\001\t#\"\027AE2iK\016\\7+\0333f\r>\024\030i\031;j_:$2!Z8x!\t1W.D\001h\025\tI\006N\003\002)S*\021!n[\001\017[&tWm\031:bMR4wN]4f\025\005a\027a\0018fi&\021an\032\002\017\r>\024x-\032#je\026\034G/[8o\021\025\001(\r1\001r\003\021\t'oZ:\021\005I,X\"A:\013\005Q\024\022aB7bG\"Lg.Z\005\003mN\024\021\"\021:hk6,g\016^:\t\013a\024\007\031A=\002\0039\004\"!\030>\n\005m,%aA%oi\")Q\020\001C)}\006i1/^2lC\ndW-\023;f[N$2a`A\017!\031\t\t!a\002\002\f5\021\0211\001\006\004\003\013\031\025aB7vi\006\024G.Z\005\005\003\023\t\031A\001\004Ck\0324WM\035\t\005\003\033\tI\"\004\002\002\020)!\021\021CA\n\003\021IG/Z7\013\007\031\n)BC\002\002\030-\f\021\"\\5oK\016\024\030M\032;\n\t\005m\021q\002\002\013\013:$\030\016^=Ji\026l\007BBA\020y\002\007Q-\001\003tS\022,\007bBA\022\001\021E\023QE\001\016_:\034VoY6D_2dWm\031;\025\t\005\035\022Q\006\t\004;\006%\022bAA\026\013\n!QK\\5u\021\0351\023\021\005a\001\003\027Aq!!\r\001\t\003\n\031$\001\np]^{'\017\0343J]R,'/Y2uS>tGCBA\024\003k\ty\004\003\005\0028\005=\002\031AA\035\003\035\031wN\034;fqR\0042A]A\036\023\r\tid\035\002\b\007>tG/\032=u\021!\t\t%a\fA\002\005\r\023\001\0033ve\006$\030n\0348\021\007u\013)%C\002\002H\025\023a\001R8vE2,\007bBA&\001\021\005\021QJ\001\016O\026$8\013^1ukN$V\r\037;\025\r\005=\0231LA/!\025i\026\021KA+\023\r\t\031&\022\002\006\003J\024\030-\037\t\004;\006]\023bAA-\013\n1\021I\\=SK\032D\001\"a\016\002J\001\007\021\021\b\005\007a\006%\003\031A9)\021\005%\023\021MA4\003S\0022A]A2\023\r\t)g\035\002\t\007\006dGNY1dW\006\031Am\\2\"\005\005-\024A\0244v]\016$\030n\0348)Si\032HO]5oO\002jS\006I$fi\002\"\b.\032\021ti\006$Xo\035\021uKb$\beY;se\026tG\017\\=!E\026Lgn\032\021eSN\004H.Y=fI\002Jg\016\t;iK\002:U+\023\030\t\017\005=\004\001\"\001\002r\005i1/\032;Ti\006$Xo\035+fqR$b!a\024\002t\005U\004\002CA\034\003[\002\r!!\017\t\rA\fi\0071\001rQ!\ti'!\031\002h\005e\024EAA>\003y3WO\\2uS>t\007F^1mk\026T4\017\036:j]\036L#h\035;sS:<\007%L\027!'\026$\b\005\0365fAM$\030\r^;tAQ,\007\020\036\021u_\002\"\027n\0359mCf\004\023N\034\021uQ\026\004s)V%-AI,G/\036:og\002rWm\036\021wC2,XM\f\005\b\003\002A\021AAA\00359W\r\036'jO\"$8i\0347peR1\021qJAB\003\013C\001\"a\016\002~\001\007\021\021\b\005\007a\006u\004\031A9)\021\005u\024\021MA4\003\023\013#!a#\002S\032,hn\031;j_:D\023F\0178v[\n,'\017I\027.A\035+G\017\t;iK\002\032WO\035:f]R\0043m\0347pe\002zg\r\t;iK\0022G.\0319!Y&<\007\016^:!CN\004\023M\034\021j]R,w-\032:!K:\034w\016Z3eAI;%\t\t<bYV,\007\005\013\031y%J;uI\021\"*]!9\021q\022\001\005\002\005E\025!D:fi2Kw\r\033;D_2|'\017\006\004\002P\005M\025Q\023\005\t\003o\ti\t1\001\002:!1\001/!$A\002ED\003\"!$\002b\005\035\024\021T\021\003\0037\013\001PZ;oGRLwN\034\025wC2,XM\0178v[\n,'/\013\036ok6\024WM\035\021.[\001\032V\r\036\021uQ\026\0043m\0347pe\002zg\r\t;iK\0022G.\0319!Y&<\007\016^:!i>\004C\017[3!gB,7-\0334jK\022\004\023N\034;fO\026\024\b%\0328d_\022,G\r\t*H\005\0022\030\r\\;fA!\002\004P\025*H\017\n\023\025F\f\005\b\003?\003A\021AAQ\003\021iwN^3\025\r\005=\0231UAS\021!\t9$!(A\002\005e\002B\0029\002\036\002\007\021\017\013\005\002\036\006\005\024qMAUC\t\tY+\0011gk:\034G/[8oQ\021D(H\\;nE\026\024H\006\t3zu9,XNY3sY\001\"'P\0178v[\n,'/\013\021.[\001\032\005.\0318hK\002\"\b.\032\021uCJ<W\r\036\021q_NLG/[8oA\tL\b\005\0365fAM\004XmY5gS\026$\007e\0344gg\026$h\006C\004\0020\002!\t!!-\002\023\035,Go\0244gg\026$HCBA(\003g\013)\f\003\005\0028\0055\006\031AA\035\021\031\001\030Q\026a\001c\"B\021QVA1\003O\nI,\t\002\002<\006)e-\0368di&|g\016K\025;]Vl'-\032:![5\002s)\032;!i\",\007eY;se\026tG\017\t3jgR\fgnY3!i>\004C\017[3!i\006\024x-\032;!a>\034\030\016^5p]:Bq!a0\001\t\003\t\t-A\006hKR4V\r\\8dSRLHCBA(\003\007\f)\r\003\005\0028\005u\006\031AA\035\021\031\001\030Q\030a\001c\"B\021QXA1\003O\nI-\t\002\002L\006)d-\0368di&|g\016K\025;]Vl'-\032:![5\002s)\032;!i\",\007eY;se\026tG\017\t<fY>\034\027\016^=!S:\004SnL:/\021\035\ty\r\001C\001\003#\fabZ3u\033\006Dh+\0327pG&$\030\020\006\004\002P\005M\027Q\033\005\t\003o\ti\r1\001\002:!1\001/!4A\002ED\003\"!4\002b\005\035\024\021\\\021\003\0037\faGZ;oGRLwN\034\025*u9,XNY3sA5j\003eR3uAQDW\rI7bq&lW/\034\021wK2|7-\033;zY\001Jg\016I70g:Bq!a8\001\t\003\t\t/A\bhKR\f5mY3mKJ\fG/[8o)\031\ty%a9\002f\"A\021qGAo\001\004\tI\004\003\004q\003;\004\r!\035\025\t\003;\f\t'a\032\002j\006\022\0211^\0019MVt7\r^5p]\"J#H\\;nE\026\024\b%L\027!\017\026$\b\005\0365fA\r,(O]3oi2L\be]3uA\005\0347-\0327fe\006$\030n\0348/\021\035\ty\017\001C\001\003c\fqb]3u\003\016\034W\r\\3sCRLwN\034\013\007\003\037\n\0310!>\t\021\005]\022Q\036a\001\003sAa\001]Aw\001\004\t\b\006CAw\003C\n9'!?\"\005\005m\030\001\0364v]\016$\030n\0348)m\006dW/\032\036ok6\024WM]\025;]Vl'-\032:![5\002CK]=!i>\0043/\032;!i\",\007%Y2dK2,'/\031;j_:\004Co\034\021uQ\026\0043\017]3dS\032LW\r\032\021wC2,X\rI1oI\002\022X\r^;s]\002\"\b.\032\021oK^\004\023mY2fY\026\024\030\r^5p]:\002")
/*     */ public class Drone extends ManagedEnvironment implements Agent, DeviceInfo {
/*     */   private final li.cil.oc.common.entity.Drone agent;
/*     */   private final ComponentConnector node;
/*     */   
/*  24 */   public BlockPosition position() { return Agent$class.position(this); } private Map<String, String> deviceInfo; private volatile boolean bitmap$0; public EntityPlayer fakePlayer() { return Agent$class.fakePlayer(this); } public Player rotatedPlayer(ForgeDirection facing, ForgeDirection side) { return Agent$class.rotatedPlayer(this, facing, side); } public IInventory inventory() { return Agent$class.inventory(this); } public int selectedSlot() { return Agent$class.selectedSlot(this); } public void selectedSlot_$eq(int value) { Agent$class.selectedSlot_$eq(this, value); } public MultiTank tank() { return Agent$class.tank(this); } public int selectedTank() { return Agent$class.selectedTank(this); } public void selectedTank_$eq(int value) { Agent$class.selectedTank_$eq(this, value); } public boolean canPlaceInAir() { return Agent$class.canPlaceInAir(this); } @Callback(doc = "function():string -- Get the name of the agent.") public Object[] name(Context context, Arguments args) { return Agent$class.name(this, context, args); } @Callback(doc = "function(side:number[, face:number=side[, sneaky:boolean=false]]):boolean, string -- Perform a 'left click' towards the specified side. The `face' allows a more precise click calibration, and is relative to the targeted blockspace.") public Object[] swing(Context context, Arguments args) { return Agent$class.swing(this, context, args); } @Callback(doc = "function(side:number[, face:number=side[, sneaky:boolean=false[, duration:number=0]]]):boolean, string -- Perform a 'right click' towards the specified side. The `face' allows a more precise click calibration, and is relative to the targeted blockspace.") public Object[] use(Context context, Arguments args) { return Agent$class.use(this, context, args); } @Callback(doc = "function(side:number[, face:number=side[, sneaky:boolean=false]]):boolean -- Place a block towards the specified side. The `face' allows a more precise click calibration, and is relative to the targeted blockspace.") public Object[] place(Context context, Arguments args) { return Agent$class.place(this, context, args); } public void beginConsumeDrops(Entity entity) { Agent$class.beginConsumeDrops(this, entity); } public void endConsumeDrops(Player player, Entity entity) { Agent$class.endConsumeDrops(this, player, entity); } public ForgeDirection checkSideForFace(Arguments args, int n, ForgeDirection facing) { return Agent$class.checkSideForFace(this, args, n, facing); } public ForgeDirection checkSideForUse(Arguments args, int n) { return Agent$class.checkSideForUse(this, args, n); } public MovingObjectPosition pick(Player player, double range) { return Agent$class.pick(this, player, range); } public Tuple6<Object, Object, Object, Object, Object, Object> clickParamsFromHit(MovingObjectPosition hit) { return Agent$class.clickParamsFromHit(this, hit); } public Tuple6<Object, Object, Object, Object, Object, Object> clickParamsForItemActivate(ForgeDirection facing, ForgeDirection side) { return Agent$class.clickParamsForItemActivate(this, facing, side); } public Tuple6<Object, Object, Object, Object, Object, Object> clickParamsForItemUse(ForgeDirection facing, ForgeDirection side) { return Agent$class.clickParamsForItemUse(this, facing, side); } public Tuple6<Object, Object, Object, Object, Object, Object> clickParamsForPlace(ForgeDirection facing) { return Agent$class.clickParamsForPlace(this, facing); } public ForgeDirection rotatedPlayer$default$1() { return Agent$class.rotatedPlayer$default$1(this); } public ForgeDirection rotatedPlayer$default$2() { return Agent$class.rotatedPlayer$default$2(this); } @Callback(doc = "function(side:number [, tank:number]):boolean -- Compare the fluid in the selected tank with the fluid in the specified tank on the specified side. Returns true if equal.") public Object[] compareFluid(Context context, Arguments args) { return TankWorldControl.class.compareFluid(this, context, args); } @Callback(doc = "function(side:boolean[, amount:number=1000]):boolean, number or string -- Drains the specified amount of fluid from the specified side. Returns the amount drained, or an error message.") public Object[] drain(Context context, Arguments args) { return TankWorldControl.class.drain(this, context, args); } @Callback(doc = "function(side:number[, amount:number=1000]):boolean, number of string -- Eject the specified amount of fluid to the specified side. Returns the amount ejected or an error message.") public Object[] fill(Context context, Arguments args) { return TankWorldControl.class.fill(this, context, args); } @Callback(doc = "function():number -- The number of tanks installed in the device.") public Object[] tankCount(Context context, Arguments args) { return TankControl.class.tankCount(this, context, args); } @Callback(doc = "function([index:number]):number -- Select a tank and/or get the number of the currently selected tank.") public Object[] selectTank(Context context, Arguments args) { return TankControl.class.selectTank(this, context, args); } @Callback(direct = true, doc = "function([index:number]):number -- Get the fluid amount in the specified or selected tank.") public Object[] tankLevel(Context context, Arguments args) { return TankControl.class.tankLevel(this, context, args); } @Callback(direct = true, doc = "function([index:number]):number -- Get the remaining fluid capacity in the specified or selected tank.") public Object[] tankSpace(Context context, Arguments args) { return TankControl.class.tankSpace(this, context, args); } @Callback(doc = "function(index:number):boolean -- Compares the fluids in the selected and the specified tank. Returns true if equal.") public Object[] compareFluidTo(Context context, Arguments args) { return TankControl.class.compareFluidTo(this, context, args); } @Callback(doc = "function(index:number[, count:number=1000]):boolean -- Move the specified amount of fluid from the selected tank into the specified tank.") public Object[] transferFluidTo(Context context, Arguments args) { return TankControl.class.transferFluidTo(this, context, args); } public int optTank(Arguments args, int n) { return TankAware.class.optTank((TankAware)this, args, n); } public Option<IFluidTank> getTank(int index) { return TankAware.class.getTank((TankAware)this, index); } public Option<FluidStack> fluidInTank(int index) { return TankAware.class.fluidInTank((TankAware)this, index); } public boolean haveSameFluidType(FluidStack stackA, FluidStack stackB) { return TankAware.class.haveSameFluidType((TankAware)this, stackA, stackB); } @Callback(doc = "function(side:number[, fuzzy:boolean=false]):boolean -- Compare the block on the specified side with the one in the selected slot. Returns true if equal.") public Object[] compare(Context context, Arguments args) { return InventoryWorldControl.class.compare(this, context, args); } @Callback(doc = "function(side:number[, count:number=64]):boolean -- Drops items from the selected slot towards the specified side.") public Object[] drop(Context context, Arguments args) { return InventoryWorldControl.class.drop(this, context, args); } public int suckFromItems(ForgeDirection facing) { return InventoryWorldControl.class.suckFromItems(this, facing); } @Callback(doc = "function(side:number[, count:number=64]):boolean -- Suck up items from the specified side.") public Object[] suck(Context context, Arguments args) { return InventoryWorldControl.class.suck(this, context, args); } @Callback(doc = "function():number -- The size of this device's internal inventory.") public Object[] inventorySize(Context context, Arguments args) { return InventoryControl.class.inventorySize(this, context, args); } @Callback(doc = "function([slot:number]):number -- Get the currently selected slot; set the selected slot if specified.") public Object[] select(Context context, Arguments args) { return InventoryControl.class.select(this, context, args); } @Callback(direct = true, doc = "function([slot:number]):number -- Get the number of items in the specified slot, otherwise in the selected slot.") public Object[] count(Context context, Arguments args) { return InventoryControl.class.count(this, context, args); } @Callback(direct = true, doc = "function([slot:number]):number -- Get the remaining space in the specified slot, otherwise in the selected slot.") public Object[] space(Context context, Arguments args) { return InventoryControl.class.space(this, context, args); } @Callback(doc = "function(otherSlot:number[, checkNBT:boolean=false]):boolean -- Compare the contents of the selected slot to the contents of the specified slot.") public Object[] compareTo(Context context, Arguments args) { return InventoryControl.class.compareTo(this, context, args); } @Callback(doc = "function(toSlot:number[, amount:number]):boolean -- Move up to the specified amount of items from the selected slot into the specified slot.") public Object[] transferTo(Context context, Arguments args) { return InventoryControl.class.transferTo(this, context, args); } public IndexedSeq<Object> insertionSlots() { return InventoryAware.class.insertionSlots((InventoryAware)this); } public int optSlot(Arguments args, int n) { return InventoryAware.class.optSlot((InventoryAware)this, args, n); } public Option<ItemStack> stackInSlot(int slot) { return InventoryAware.class.stackInSlot((InventoryAware)this, slot); } @Callback(doc = "function(side:number):boolean, string -- Checks the contents of the block on the specified sides and returns the findings.") public Object[] detect(Context context, Arguments args) { return WorldControl.class.detect(this, context, args); } public World world() { return WorldAware.class.world((WorldAware)this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract((WorldAware)this, blockPos, face); } public <Type extends Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds((WorldAware)this, bounds, evidence$1); } public <Type extends Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock((WorldAware)this, blockPos, evidence$2); } public <Type extends Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide((WorldAware)this, side, evidence$3); } public <Type extends Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity((WorldAware)this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent((WorldAware)this, side); } public li.cil.oc.common.entity.Drone agent() { return this.agent; } public Drone(li.cil.oc.common.entity.Drone agent) { WorldAware.class.$init$((WorldAware)this); WorldControl.class.$init$(this); InventoryAware.class.$init$((InventoryAware)this); InventoryControl.class.$init$(this); InventoryWorldControl.class.$init$(this); TankAware.class.$init$((TankAware)this); TankControl.class.$init$(this); TankWorldControl.class.$init$(this); Agent$class.$init$(this);
/*  25 */     this.node = (ComponentConnector)Network.newNode((Environment)this, Visibility.Network)
/*  26 */       .withComponent("drone")
/*  27 */       .withConnector(Settings$.MODULE$.get().bufferDrone())
/*  28 */       .create(); }
/*     */   public ComponentConnector node() { return this.node; }
/*  30 */   private Map deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { (new Tuple2[5])[0] = Predef$ArrowAssoc$.MODULE$
/*  31 */           .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("class"), "system");
/*  32 */         (new Tuple2[5])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("description"), "Drone");
/*  33 */         (new Tuple2[5])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("vendor"), "MightyPirates GmbH & Co. KG");
/*  34 */         (new Tuple2[5])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("product"), "Overwatcher");
/*  35 */         (new Tuple2[5])[4] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("capacity"), BoxesRunTime.boxToInteger(agent().inventorySize()).toString()); this.deviceInfo = (Map<String, String>)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[5])); this.bitmap$0 = true; }
/*     */        return this.deviceInfo; }
/*     */      } private final Map<String, String> deviceInfo() { return this.bitmap$0 ? this.deviceInfo : deviceInfo$lzycompute(); }
/*  38 */   public Map<String, String> getDeviceInfo() { return WrapAsJava$.MODULE$.mapAsJavaMap((Map)deviceInfo()); }
/*     */   
/*     */   public ForgeDirection checkSideForAction(Arguments args, int n) {
/*  41 */     return ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(n);
/*     */   } public Buffer<EntityItem> suckableItems(ForgeDirection side) {
/*  43 */     return entitiesInBlock(position(), ClassTag$.MODULE$.apply(EntityItem.class)).$plus$plus((GenTraversableOnce)InventoryWorldControl.class.suckableItems(this, side));
/*     */   }
/*     */   public void onSuckCollect(EntityItem entity) {
/*  46 */     ItemStack x$1 = entity.func_92059_d(); IInventory x$2 = inventory(); Option x$3 = Option$.MODULE$.apply(insertionSlots()), x$4 = InventoryUtils$.MODULE$.insertIntoInventory$default$3(); int x$5 = InventoryUtils$.MODULE$.insertIntoInventory$default$4(); boolean x$6 = InventoryUtils$.MODULE$.insertIntoInventory$default$5(); if (InventoryUtils$.MODULE$.insertIntoInventory(x$1, x$2, x$4, x$5, x$6, x$3)) {
/*  47 */       world().func_72956_a((Entity)agent(), "random.pop", 0.2F, (((world()).field_73012_v.nextFloat() - (world()).field_73012_v.nextFloat()) * 0.7F + true) * 2);
/*     */     }
/*     */   }
/*     */   
/*     */   public void onWorldInteraction(Context context, double duration) {
/*  52 */     Agent$class.onWorldInteraction(this, context, duration * 2);
/*     */   }
/*     */ 
/*     */   
/*     */   @Callback(doc = "function():string -- Get the status text currently being displayed in the GUI.")
/*     */   public Object[] getStatusText(Context context, Arguments args) {
/*  58 */     return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { agent().statusText() }));
/*     */   }
/*     */   @Callback(doc = "function(value:string):string -- Set the status text to display in the GUI, returns new value.")
/*     */   public Object[] setStatusText(Context context, Arguments args) {
/*  62 */     agent().statusText_$eq(args.checkString(0));
/*  63 */     context.pause(0.1D);
/*  64 */     return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { agent().statusText() }));
/*     */   }
/*     */   @Callback(doc = "function():number -- Get the current color of the flap lights as an integer encoded RGB value (0xRRGGBB).")
/*     */   public Object[] getLightColor(Context context, Arguments args) {
/*  68 */     return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToInteger(agent().lightColor()) }));
/*     */   }
/*     */   @Callback(doc = "function(value:number):number -- Set the color of the flap lights to the specified integer encoded RGB value (0xRRGGBB).")
/*     */   public Object[] setLightColor(Context context, Arguments args) {
/*  72 */     agent().lightColor_$eq(args.checkInteger(0));
/*  73 */     context.pause(0.1D);
/*  74 */     return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToInteger(agent().lightColor()) }));
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   @Callback(doc = "function(dx:number, dy:number, dz:number) -- Change the target position by the specified offset.")
/*     */   public Object[] move(Context context, Arguments args) {
/*  81 */     float dx = (float)args.checkDouble(0);
/*  82 */     float dy = (float)args.checkDouble(1);
/*  83 */     float dz = (float)args.checkDouble(2);
/*  84 */     agent().targetX_$eq(agent().targetX() + dx);
/*  85 */     agent().targetY_$eq(agent().targetY() + dy);
/*  86 */     agent().targetZ_$eq(agent().targetZ() + dz);
/*  87 */     return null;
/*     */   }
/*     */   
/*     */   @Callback(doc = "function():number -- Get the current distance to the target position.")
/*     */   public Object[] getOffset(Context context, Arguments args) {
/*  92 */     return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToDouble(agent().func_70011_f(agent().targetX(), agent().targetY(), agent().targetZ())) }));
/*     */   }
/*     */   @Callback(doc = "function():number -- Get the current velocity in m/s.")
/*     */   public Object[] getVelocity(Context context, Arguments args) {
/*  96 */     return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToDouble(package$.MODULE$.sqrt((agent()).field_70159_w * (agent()).field_70159_w + (agent()).field_70181_x * (agent()).field_70181_x + (agent()).field_70179_y * (agent()).field_70179_y) * 20) }));
/*     */   }
/*     */   @Callback(doc = "function():number -- Get the maximum velocity, in m/s.")
/*     */   public Object[] getMaxVelocity(Context context, Arguments args) {
/* 100 */     return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToFloat(agent().maxVelocity() * 20) }));
/*     */   }
/*     */   
/*     */   @Callback(doc = "function():number -- Get the currently set acceleration.")
/*     */   public Object[] getAcceleration(Context context, Arguments args) {
/* 105 */     return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToFloat(agent().targetAcceleration() * 20) }));
/*     */   }
/*     */   
/*     */   @Callback(doc = "function(value:number):number -- Try to set the acceleration to the specified value and return the new acceleration.")
/*     */   public Object[] setAcceleration(Context context, Arguments args) {
/* 110 */     agent().targetAcceleration_$eq((float)(args.checkDouble(0) / 20.0D));
/* 111 */     return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToFloat(agent().targetAcceleration() * 20) }));
/*     */   }
/*     */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\server\component\Drone.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */