/*    */ package li.cil.oc.server.component;
/*    */ 
/*    */ import li.cil.oc.api.machine.Arguments;
/*    */ import li.cil.oc.api.machine.Callback;
/*    */ import li.cil.oc.api.machine.Context;
/*    */ import li.cil.oc.api.network.Node;
/*    */ import net.minecraft.nbt.NBTTagCompound;
/*    */ import scala.collection.immutable.Map;
/*    */ 
/*    */ @ScalaSignature(bytes = "\006\001\005Es!B\001\003\021\003i\021\001\003*fIN$xN\\3\013\005\r!\021!C2p[B|g.\0328u\025\t)a!\001\004tKJ4XM\035\006\003\017!\t!a\\2\013\005%Q\021aA2jY*\t1\"\001\002mS\016\001\001C\001\b\020\033\005\021a!\002\t\003\021\003\t\"\001\003*fIN$xN\\3\024\005=\021\002CA\n\027\033\005!\"\"A\013\002\013M\034\027\r\\1\n\005]!\"AB!osJ+g\rC\003\032\037\021\005!$\001\004=S:LGO\020\013\002\033\031!Ad\004\001\036\005\0351\026M\\5mY\006\0342a\007\020'!\tyB%D\001!\025\t\t#%\001\004qe\0264\027M\031\006\003G\031\t1!\0319j\023\t)\003E\001\nNC:\fw-\0323F]ZL'o\0348nK:$\bC\001\b(\023\tA#AA\bSK\022\034Ho\0348f-\006t\027\016\0347b\021!Q3D!b\001\n\003Y\023\001\003:fIN$xN\\3\026\0031\0222!L\0306\r\021qs\002\001\027\003\031q\022XMZ5oK6,g\016\036 \021\005A\032T\"A\031\013\005I\022\023a\0028fi^|'o[\005\003iE\022q\"\0228wSJ|g.\\3oi\"{7\017\036\t\003muj\021a\016\006\003qe\na\001\036:bSR\034(B\001\036<\003)!\030\016\\3f]RLG/\037\006\003y\031\taaY8n[>t\027B\001 8\0055\021V\rZ:u_:,\027i^1sK\"A\001i\007B\001B\003%A&A\005sK\022\034Ho\0348fA!)\021d\007C\001\005R\0211)\022\t\003\tni\021a\004\005\006U\005\003\rA\022\n\004\017>*d\001\002\030\020\001\0313A!S\b\001\025\n9!)\0368eY\026$7\003\002%\037M-\003\"A\004'\n\0055\023!a\004*fIN$xN\\3Ck:$G.\0323\t\021)B%Q1A\005\002=+\022\001\025\n\004#>\022f\001\002\030\020\001A\003\"AN*\n\005Q;$\001\006\"v]\022dW\r\032*fIN$xN\\3Bo\006\024X\r\003\005A\021\n\005\t\025!\003Q\021\025I\002\n\"\001X)\tA\026\f\005\002E\021\")!F\026a\0015J\0311l\f*\007\t9z\001A\027\004\005;>\001aL\001\005XSJ,G.Z:t'\rafd\030\t\003\035\001L!!\031\002\003!I+Gm\035;p]\026<\026N]3mKN\034\b\002\003\026]\005\013\007I\021A2\026\003=B\001\002\021/\003\002\003\006Ia\f\005\0063q#\tA\032\013\003O\"\004\"\001\022/\t\013)*\007\031A\030\007\t)|\001a\033\002\020-\006t\027\016\0347b/&\024X\r\\3tgN!\021N\b\024`\021!Q\023N!b\001\n\003iW#\0018\023\007=|SG\002\003/\037\001q\007\002\003!j\005\003\005\013\021\0028\t\013eIG\021\001:\025\005M$\bC\001#j\021\025Q\023\0171\001v%\r1x&\016\004\005]=\001QO\002\003y\037\001I(a\004\"v]\022dW\rZ,je\026dWm]:\024\013]tbeS0\t\021):(Q1A\005\002m,\022\001 \n\004{>\022f\001\002\030\020\001qD\001\002Q<\003\002\003\006I\001 \005\0073]$\t!!\001\025\t\005\r\021Q\001\t\003\t^DaAK@A\002\005\035!\003BA\005_I3QAL\b\001\003\017A!\"!\004x\021\013\007IQBA\b\003)!WM^5dK&sgm\\\013\003\003#\001\002\"a\005\002\036\005\005\022\021E\007\003\003+QA!a\006\002\032\005I\021.\\7vi\006\024G.\032\006\004\0037!\022AC2pY2,7\r^5p]&!\021qDA\013\005\ri\025\r\035\t\005\003G\ti#\004\002\002&)!\021qEA\025\003\021a\027M\\4\013\005\005-\022\001\0026bm\006LA!a\f\002&\t11\013\036:j]\036D!\"a\rx\021\003\005\013UBA\t\003-!WM^5dK&sgm\034\021\t\017\005]r\017\"\021\002:\005iq-\032;EKZL7-Z%oM>$\"!a\017\021\021\005u\0221IA#\003\013j!!a\020\013\t\005\005\023\021F\001\005kRLG.\003\003\002 \005}\002\003BA$\003\033r1aEA%\023\r\tY\005F\001\007!J,G-\0324\n\t\005=\022q\n\006\004\003\027\"\002")
/*    */ public final class Redstone {
/*    */   public static class Vanilla extends ManagedEnvironment implements RedstoneVanilla {
/*    */     private final EnvironmentHost redstone;
/*    */     private final Map<String, String> li$cil$oc$server$component$RedstoneVanilla$$deviceInfo;
/*    */     private final ForgeDirection[] SIDE_RANGE;
/*    */     
/* 17 */     private Map li$cil$oc$server$component$RedstoneVanilla$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo = RedstoneVanilla$class.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo; }  } private final Component node; private int wakeThreshold; private boolean wakeNeighborsOnly; private volatile boolean bitmap$0; public final Map<String, String> li$cil$oc$server$component$RedstoneVanilla$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo : li$cil$oc$server$component$RedstoneVanilla$$deviceInfo$lzycompute(); } public ForgeDirection[] SIDE_RANGE() { return this.SIDE_RANGE; } public void li$cil$oc$server$component$RedstoneVanilla$_setter_$SIDE_RANGE_$eq(ForgeDirection[] x$1) { this.SIDE_RANGE = x$1; } public Map<String, String> getDeviceInfo() { return RedstoneVanilla$class.getDeviceInfo(this); } @Callback(direct = true, doc = "function([side:number]):number or table -- Get the redstone input (all sides, or optionally on the specified side)") public Object[] getInput(Context context, Arguments args) { return RedstoneVanilla$class.getInput(this, context, args); } @Callback(direct = true, doc = "function([side:number]):number or table -- Get the redstone output (all sides, or optionally on the specified side)") public Object[] getOutput(Context context, Arguments args) { return RedstoneVanilla$class.getOutput(this, context, args); } @Callback(doc = "function([side:number, ]value:number or table):number or table --  Set the redstone output (all sides, or optionally on the specified side). Returns previous values") public Object[] setOutput(Context context, Arguments args) { return RedstoneVanilla$class.setOutput(this, context, args); } @Callback(direct = true, doc = "function(side:number):number -- Get the comparator input on the specified side.") public Object[] getComparatorInput(Context context, Arguments args) { return RedstoneVanilla$class.getComparatorInput(this, context, args); } public void onMessage(Message message) { RedstoneVanilla$class.onMessage(this, message); } public ForgeDirection checkSide(Arguments args, int index) { return RedstoneVanilla$class.checkSide(this, args, index); } public Component node() { return this.node; } public int wakeThreshold() { return this.wakeThreshold; } public void wakeThreshold_$eq(int x$1) { this.wakeThreshold = x$1; } public boolean wakeNeighborsOnly() { return this.wakeNeighborsOnly; } public void wakeNeighborsOnly_$eq(boolean x$1) { this.wakeNeighborsOnly = x$1; } public void li$cil$oc$server$component$RedstoneSignaller$_setter_$node_$eq(Component x$1) { this.node = x$1; } @Callback(direct = true, doc = "function():number -- Get the current wake-up threshold.") public Object[] getWakeThreshold(Context context, Arguments args) { return RedstoneSignaller$class.getWakeThreshold(this, context, args); } @Callback(doc = "function(threshold:number):number -- Set the wake-up threshold.") public Object[] setWakeThreshold(Context context, Arguments args) { return RedstoneSignaller$class.setWakeThreshold(this, context, args); } public void onRedstoneChanged(RedstoneChangedEventArgs args) { RedstoneSignaller$class.onRedstoneChanged(this, args); } public void load(NBTTagCompound nbt) { RedstoneSignaller$class.load(this, nbt); } public void save(NBTTagCompound nbt) { RedstoneSignaller$class.save(this, nbt); } public EnvironmentHost redstone() { return this.redstone; } public Vanilla(EnvironmentHost redstone) {
/* 18 */       RedstoneSignaller$class.$init$(this); RedstoneVanilla$class.$init$(this);
/*    */     } } public static class Bundled extends ManagedEnvironment implements RedstoneBundled { private final EnvironmentHost redstone; private final Map<String, String> li$cil$oc$server$component$RedstoneBundled$$deviceInfo; private final Range li$cil$oc$server$component$RedstoneBundled$$COLOR_RANGE; private final Map<String, String> li$cil$oc$server$component$RedstoneVanilla$$deviceInfo; private final ForgeDirection[] SIDE_RANGE; private final Component node; private int wakeThreshold; private boolean wakeNeighborsOnly; private volatile byte bitmap$0;
/* 20 */     private Map li$cil$oc$server$component$RedstoneBundled$$deviceInfo$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x1) == 0) { this.li$cil$oc$server$component$RedstoneBundled$$deviceInfo = RedstoneBundled$class.li$cil$oc$server$component$RedstoneBundled$$deviceInfo(this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x1); }  return this.li$cil$oc$server$component$RedstoneBundled$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$RedstoneBundled$$deviceInfo() { return ((byte)(this.bitmap$0 & 0x1) == 0) ? li$cil$oc$server$component$RedstoneBundled$$deviceInfo$lzycompute() : this.li$cil$oc$server$component$RedstoneBundled$$deviceInfo; } public Range li$cil$oc$server$component$RedstoneBundled$$COLOR_RANGE() { return this.li$cil$oc$server$component$RedstoneBundled$$COLOR_RANGE; } public void li$cil$oc$server$component$RedstoneBundled$_setter_$li$cil$oc$server$component$RedstoneBundled$$COLOR_RANGE_$eq(Range x$1) { this.li$cil$oc$server$component$RedstoneBundled$$COLOR_RANGE = x$1; } public Map<String, String> getDeviceInfo() { return RedstoneBundled$class.getDeviceInfo(this); } @Callback(direct = true, doc = "function([side:number[, color:number]]):number or table -- Fewer params returns set of inputs") public Object[] getBundledInput(Context context, Arguments args) { return RedstoneBundled$class.getBundledInput(this, context, args); } @Callback(direct = true, doc = "function([side:number[, color:number]]):number or table -- Fewer params returns set of outputs") public Object[] getBundledOutput(Context context, Arguments args) { return RedstoneBundled$class.getBundledOutput(this, context, args); } @Callback(doc = "function([side:number[, color:number,]] value:number or table):number or table --  Fewer params to assign set of outputs. Returns previous values") public Object[] setBundledOutput(Context context, Arguments args) { return RedstoneBundled$class.setBundledOutput(this, context, args); } private Map li$cil$oc$server$component$RedstoneVanilla$$deviceInfo$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x2) == 0) { this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo = RedstoneVanilla$class.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo(this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x2); }  return this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$RedstoneVanilla$$deviceInfo() { return ((byte)(this.bitmap$0 & 0x2) == 0) ? li$cil$oc$server$component$RedstoneVanilla$$deviceInfo$lzycompute() : this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo; } public ForgeDirection[] SIDE_RANGE() { return this.SIDE_RANGE; } public void li$cil$oc$server$component$RedstoneVanilla$_setter_$SIDE_RANGE_$eq(ForgeDirection[] x$1) { this.SIDE_RANGE = x$1; } @Callback(direct = true, doc = "function([side:number]):number or table -- Get the redstone input (all sides, or optionally on the specified side)") public Object[] getInput(Context context, Arguments args) { return RedstoneVanilla$class.getInput(this, context, args); } @Callback(direct = true, doc = "function([side:number]):number or table -- Get the redstone output (all sides, or optionally on the specified side)") public Object[] getOutput(Context context, Arguments args) { return RedstoneVanilla$class.getOutput(this, context, args); } @Callback(doc = "function([side:number, ]value:number or table):number or table --  Set the redstone output (all sides, or optionally on the specified side). Returns previous values") public Object[] setOutput(Context context, Arguments args) { return RedstoneVanilla$class.setOutput(this, context, args); } @Callback(direct = true, doc = "function(side:number):number -- Get the comparator input on the specified side.") public Object[] getComparatorInput(Context context, Arguments args) { return RedstoneVanilla$class.getComparatorInput(this, context, args); } public void onMessage(Message message) { RedstoneVanilla$class.onMessage(this, message); } public ForgeDirection checkSide(Arguments args, int index) { return RedstoneVanilla$class.checkSide(this, args, index); } public Component node() { return this.node; } public int wakeThreshold() { return this.wakeThreshold; } public void wakeThreshold_$eq(int x$1) { this.wakeThreshold = x$1; } public boolean wakeNeighborsOnly() { return this.wakeNeighborsOnly; } public void wakeNeighborsOnly_$eq(boolean x$1) { this.wakeNeighborsOnly = x$1; } public void li$cil$oc$server$component$RedstoneSignaller$_setter_$node_$eq(Component x$1) { this.node = x$1; } @Callback(direct = true, doc = "function():number -- Get the current wake-up threshold.") public Object[] getWakeThreshold(Context context, Arguments args) { return RedstoneSignaller$class.getWakeThreshold(this, context, args); } @Callback(doc = "function(threshold:number):number -- Set the wake-up threshold.") public Object[] setWakeThreshold(Context context, Arguments args) { return RedstoneSignaller$class.setWakeThreshold(this, context, args); } public void onRedstoneChanged(RedstoneChangedEventArgs args) { RedstoneSignaller$class.onRedstoneChanged(this, args); } public void load(NBTTagCompound nbt) { RedstoneSignaller$class.load(this, nbt); } public void save(NBTTagCompound nbt) { RedstoneSignaller$class.save(this, nbt); } public EnvironmentHost redstone() { return this.redstone; } public Bundled(EnvironmentHost redstone) {
/* 21 */       RedstoneSignaller$class.$init$(this); RedstoneVanilla$class.$init$(this); RedstoneBundled$class.$init$(this);
/*    */     } } public static class Wireless extends ManagedEnvironment implements RedstoneWireless { private final EnvironmentHost redstone; private int wirelessFrequency; private boolean wirelessInput; private boolean wirelessOutput; private final Map<String, String> li$cil$oc$server$component$RedstoneWireless$$deviceInfo; private final Component node; private int wakeThreshold; private boolean wakeNeighborsOnly; private volatile boolean bitmap$0;
/* 23 */     public int wirelessFrequency() { return this.wirelessFrequency; } public void wirelessFrequency_$eq(int x$1) { this.wirelessFrequency = x$1; } public boolean wirelessInput() { return this.wirelessInput; } public void wirelessInput_$eq(boolean x$1) { this.wirelessInput = x$1; } public boolean wirelessOutput() { return this.wirelessOutput; } public void wirelessOutput_$eq(boolean x$1) { this.wirelessOutput = x$1; } private Map li$cil$oc$server$component$RedstoneWireless$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$RedstoneWireless$$deviceInfo = RedstoneWireless$class.li$cil$oc$server$component$RedstoneWireless$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$RedstoneWireless$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$RedstoneWireless$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$RedstoneWireless$$deviceInfo : li$cil$oc$server$component$RedstoneWireless$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return RedstoneWireless$class.getDeviceInfo(this); } @Callback(doc = "function():number -- Get the wireless redstone input.") public Object[] getWirelessInput(Context context, Arguments args) { return RedstoneWireless$class.getWirelessInput(this, context, args); } @Callback(direct = true, doc = "function():boolean -- Get the wireless redstone output.") public Object[] getWirelessOutput(Context context, Arguments args) { return RedstoneWireless$class.getWirelessOutput(this, context, args); } @Callback(doc = "function(value:boolean):boolean -- Set the wireless redstone output.") public Object[] setWirelessOutput(Context context, Arguments args) { return RedstoneWireless$class.setWirelessOutput(this, context, args); } @Callback(direct = true, doc = "function():number -- Get the currently set wireless redstone frequency.") public Object[] getWirelessFrequency(Context context, Arguments args) { return RedstoneWireless$class.getWirelessFrequency(this, context, args); } @Callback(doc = "function(frequency:number):number -- Set the wireless redstone frequency to use.") public Object[] setWirelessFrequency(Context context, Arguments args) { return RedstoneWireless$class.setWirelessFrequency(this, context, args); } @Method(modid = "WR-CBE|Core") public void updateDevice(int frequency, boolean on) { RedstoneWireless$class.updateDevice(this, frequency, on); } @Method(modid = "WR-CBE|Core") public Vector3 getPosition() { return RedstoneWireless$class.getPosition(this); } @Method(modid = "WR-CBE|Core") public int getDimension() { return RedstoneWireless$class.getDimension(this); } @Method(modid = "WR-CBE|Core") public int getFreq() { return RedstoneWireless$class.getFreq(this); } @Method(modid = "WR-CBE|Core") public Null$ getAttachedEntity() { RedstoneWireless$class.getAttachedEntity(this); return null; } public void onConnect(Node node) { RedstoneWireless$class.onConnect(this, node); } public void onDisconnect(Node node) { RedstoneWireless$class.onDisconnect(this, node); } public void load(NBTTagCompound nbt) { RedstoneWireless$class.load(this, nbt); } public void save(NBTTagCompound nbt) { RedstoneWireless$class.save(this, nbt); } public Component node() { return this.node; } public int wakeThreshold() { return this.wakeThreshold; } public void wakeThreshold_$eq(int x$1) { this.wakeThreshold = x$1; } public boolean wakeNeighborsOnly() { return this.wakeNeighborsOnly; } public void wakeNeighborsOnly_$eq(boolean x$1) { this.wakeNeighborsOnly = x$1; } public void li$cil$oc$server$component$RedstoneSignaller$_setter_$node_$eq(Component x$1) { this.node = x$1; } @Callback(direct = true, doc = "function():number -- Get the current wake-up threshold.") public Object[] getWakeThreshold(Context context, Arguments args) { return RedstoneSignaller$class.getWakeThreshold(this, context, args); } @Callback(doc = "function(threshold:number):number -- Set the wake-up threshold.") public Object[] setWakeThreshold(Context context, Arguments args) { return RedstoneSignaller$class.setWakeThreshold(this, context, args); } public void onRedstoneChanged(RedstoneChangedEventArgs args) { RedstoneSignaller$class.onRedstoneChanged(this, args); } public EnvironmentHost redstone() { return this.redstone; } public Wireless(EnvironmentHost redstone) {
/* 24 */       RedstoneSignaller$class.$init$(this); RedstoneWireless$class.$init$(this);
/*    */     } } public static class VanillaWireless extends ManagedEnvironment implements RedstoneVanilla, RedstoneWireless { private final EnvironmentHost redstone; private int wirelessFrequency; private boolean wirelessInput; private boolean wirelessOutput; private final Map<String, String> li$cil$oc$server$component$RedstoneWireless$$deviceInfo; private final Map<String, String> li$cil$oc$server$component$RedstoneVanilla$$deviceInfo; private final ForgeDirection[] SIDE_RANGE; private final Component node; private int wakeThreshold; private boolean wakeNeighborsOnly; private volatile byte bitmap$0;
/* 26 */     public int wirelessFrequency() { return this.wirelessFrequency; } public void wirelessFrequency_$eq(int x$1) { this.wirelessFrequency = x$1; } public boolean wirelessInput() { return this.wirelessInput; } public void wirelessInput_$eq(boolean x$1) { this.wirelessInput = x$1; } public boolean wirelessOutput() { return this.wirelessOutput; } public void wirelessOutput_$eq(boolean x$1) { this.wirelessOutput = x$1; } private Map li$cil$oc$server$component$RedstoneWireless$$deviceInfo$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x1) == 0) { this.li$cil$oc$server$component$RedstoneWireless$$deviceInfo = RedstoneWireless$class.li$cil$oc$server$component$RedstoneWireless$$deviceInfo(this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x1); }  return this.li$cil$oc$server$component$RedstoneWireless$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$RedstoneWireless$$deviceInfo() { return ((byte)(this.bitmap$0 & 0x1) == 0) ? li$cil$oc$server$component$RedstoneWireless$$deviceInfo$lzycompute() : this.li$cil$oc$server$component$RedstoneWireless$$deviceInfo; } public Map<String, String> getDeviceInfo() { return RedstoneWireless$class.getDeviceInfo(this); } @Callback(doc = "function():number -- Get the wireless redstone input.") public Object[] getWirelessInput(Context context, Arguments args) { return RedstoneWireless$class.getWirelessInput(this, context, args); } @Callback(direct = true, doc = "function():boolean -- Get the wireless redstone output.") public Object[] getWirelessOutput(Context context, Arguments args) { return RedstoneWireless$class.getWirelessOutput(this, context, args); } @Callback(doc = "function(value:boolean):boolean -- Set the wireless redstone output.") public Object[] setWirelessOutput(Context context, Arguments args) { return RedstoneWireless$class.setWirelessOutput(this, context, args); } @Callback(direct = true, doc = "function():number -- Get the currently set wireless redstone frequency.") public Object[] getWirelessFrequency(Context context, Arguments args) { return RedstoneWireless$class.getWirelessFrequency(this, context, args); } @Callback(doc = "function(frequency:number):number -- Set the wireless redstone frequency to use.") public Object[] setWirelessFrequency(Context context, Arguments args) { return RedstoneWireless$class.setWirelessFrequency(this, context, args); } @Method(modid = "WR-CBE|Core") public void updateDevice(int frequency, boolean on) { RedstoneWireless$class.updateDevice(this, frequency, on); } @Method(modid = "WR-CBE|Core") public Vector3 getPosition() { return RedstoneWireless$class.getPosition(this); } @Method(modid = "WR-CBE|Core") public int getDimension() { return RedstoneWireless$class.getDimension(this); } @Method(modid = "WR-CBE|Core") public int getFreq() { return RedstoneWireless$class.getFreq(this); } @Method(modid = "WR-CBE|Core") public Null$ getAttachedEntity() { RedstoneWireless$class.getAttachedEntity(this); return null; } public void onConnect(Node node) { RedstoneWireless$class.onConnect(this, node); } public void onDisconnect(Node node) { RedstoneWireless$class.onDisconnect(this, node); } public void load(NBTTagCompound nbt) { RedstoneWireless$class.load(this, nbt); } public void save(NBTTagCompound nbt) { RedstoneWireless$class.save(this, nbt); } private Map li$cil$oc$server$component$RedstoneVanilla$$deviceInfo$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x2) == 0) { this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo = RedstoneVanilla$class.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo(this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x2); }  return this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$RedstoneVanilla$$deviceInfo() { return ((byte)(this.bitmap$0 & 0x2) == 0) ? li$cil$oc$server$component$RedstoneVanilla$$deviceInfo$lzycompute() : this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo; } public ForgeDirection[] SIDE_RANGE() { return this.SIDE_RANGE; } public void li$cil$oc$server$component$RedstoneVanilla$_setter_$SIDE_RANGE_$eq(ForgeDirection[] x$1) { this.SIDE_RANGE = x$1; } @Callback(direct = true, doc = "function([side:number]):number or table -- Get the redstone input (all sides, or optionally on the specified side)") public Object[] getInput(Context context, Arguments args) { return RedstoneVanilla$class.getInput(this, context, args); } @Callback(direct = true, doc = "function([side:number]):number or table -- Get the redstone output (all sides, or optionally on the specified side)") public Object[] getOutput(Context context, Arguments args) { return RedstoneVanilla$class.getOutput(this, context, args); } @Callback(doc = "function([side:number, ]value:number or table):number or table --  Set the redstone output (all sides, or optionally on the specified side). Returns previous values") public Object[] setOutput(Context context, Arguments args) { return RedstoneVanilla$class.setOutput(this, context, args); } @Callback(direct = true, doc = "function(side:number):number -- Get the comparator input on the specified side.") public Object[] getComparatorInput(Context context, Arguments args) { return RedstoneVanilla$class.getComparatorInput(this, context, args); } public void onMessage(Message message) { RedstoneVanilla$class.onMessage(this, message); } public ForgeDirection checkSide(Arguments args, int index) { return RedstoneVanilla$class.checkSide(this, args, index); } public Component node() { return this.node; } public int wakeThreshold() { return this.wakeThreshold; } public void wakeThreshold_$eq(int x$1) { this.wakeThreshold = x$1; } public boolean wakeNeighborsOnly() { return this.wakeNeighborsOnly; } public void wakeNeighborsOnly_$eq(boolean x$1) { this.wakeNeighborsOnly = x$1; } public void li$cil$oc$server$component$RedstoneSignaller$_setter_$node_$eq(Component x$1) { this.node = x$1; } @Callback(direct = true, doc = "function():number -- Get the current wake-up threshold.") public Object[] getWakeThreshold(Context context, Arguments args) { return RedstoneSignaller$class.getWakeThreshold(this, context, args); } @Callback(doc = "function(threshold:number):number -- Set the wake-up threshold.") public Object[] setWakeThreshold(Context context, Arguments args) { return RedstoneSignaller$class.setWakeThreshold(this, context, args); } public void onRedstoneChanged(RedstoneChangedEventArgs args) { RedstoneSignaller$class.onRedstoneChanged(this, args); } public EnvironmentHost redstone() { return this.redstone; } public VanillaWireless(EnvironmentHost redstone) {
/* 27 */       RedstoneSignaller$class.$init$(this); RedstoneVanilla$class.$init$(this); RedstoneWireless$class.$init$(this);
/*    */     } } public static class BundledWireless extends ManagedEnvironment implements RedstoneBundled, RedstoneWireless { private final EnvironmentHost redstone; private Map<String, String> deviceInfo; private int wirelessFrequency; private boolean wirelessInput; private boolean wirelessOutput; private final Map<String, String> li$cil$oc$server$component$RedstoneWireless$$deviceInfo; private final Map<String, String> li$cil$oc$server$component$RedstoneBundled$$deviceInfo; private final Range li$cil$oc$server$component$RedstoneBundled$$COLOR_RANGE; private final Map<String, String> li$cil$oc$server$component$RedstoneVanilla$$deviceInfo; private final ForgeDirection[] SIDE_RANGE; private final Component node; private int wakeThreshold; private boolean wakeNeighborsOnly; private volatile byte bitmap$0;
/* 29 */     public int wirelessFrequency() { return this.wirelessFrequency; } public void wirelessFrequency_$eq(int x$1) { this.wirelessFrequency = x$1; } public boolean wirelessInput() { return this.wirelessInput; } public void wirelessInput_$eq(boolean x$1) { this.wirelessInput = x$1; } public boolean wirelessOutput() { return this.wirelessOutput; } public void wirelessOutput_$eq(boolean x$1) { this.wirelessOutput = x$1; } private Map li$cil$oc$server$component$RedstoneWireless$$deviceInfo$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x2) == 0) { this.li$cil$oc$server$component$RedstoneWireless$$deviceInfo = RedstoneWireless$class.li$cil$oc$server$component$RedstoneWireless$$deviceInfo(this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x2); }  return this.li$cil$oc$server$component$RedstoneWireless$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$RedstoneWireless$$deviceInfo() { return ((byte)(this.bitmap$0 & 0x2) == 0) ? li$cil$oc$server$component$RedstoneWireless$$deviceInfo$lzycompute() : this.li$cil$oc$server$component$RedstoneWireless$$deviceInfo; } @Callback(doc = "function():number -- Get the wireless redstone input.") public Object[] getWirelessInput(Context context, Arguments args) { return RedstoneWireless$class.getWirelessInput(this, context, args); } @Callback(direct = true, doc = "function():boolean -- Get the wireless redstone output.") public Object[] getWirelessOutput(Context context, Arguments args) { return RedstoneWireless$class.getWirelessOutput(this, context, args); } @Callback(doc = "function(value:boolean):boolean -- Set the wireless redstone output.") public Object[] setWirelessOutput(Context context, Arguments args) { return RedstoneWireless$class.setWirelessOutput(this, context, args); } @Callback(direct = true, doc = "function():number -- Get the currently set wireless redstone frequency.") public Object[] getWirelessFrequency(Context context, Arguments args) { return RedstoneWireless$class.getWirelessFrequency(this, context, args); } @Callback(doc = "function(frequency:number):number -- Set the wireless redstone frequency to use.") public Object[] setWirelessFrequency(Context context, Arguments args) { return RedstoneWireless$class.setWirelessFrequency(this, context, args); } @Method(modid = "WR-CBE|Core") public void updateDevice(int frequency, boolean on) { RedstoneWireless$class.updateDevice(this, frequency, on); } @Method(modid = "WR-CBE|Core") public Vector3 getPosition() { return RedstoneWireless$class.getPosition(this); } @Method(modid = "WR-CBE|Core") public int getDimension() { return RedstoneWireless$class.getDimension(this); } @Method(modid = "WR-CBE|Core") public int getFreq() { return RedstoneWireless$class.getFreq(this); } @Method(modid = "WR-CBE|Core") public Null$ getAttachedEntity() { RedstoneWireless$class.getAttachedEntity(this); return null; } public void onConnect(Node node) { RedstoneWireless$class.onConnect(this, node); } public void onDisconnect(Node node) { RedstoneWireless$class.onDisconnect(this, node); } public void load(NBTTagCompound nbt) { RedstoneWireless$class.load(this, nbt); } public void save(NBTTagCompound nbt) { RedstoneWireless$class.save(this, nbt); } private Map li$cil$oc$server$component$RedstoneBundled$$deviceInfo$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x4) == 0) { this.li$cil$oc$server$component$RedstoneBundled$$deviceInfo = RedstoneBundled$class.li$cil$oc$server$component$RedstoneBundled$$deviceInfo(this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x4); }  return this.li$cil$oc$server$component$RedstoneBundled$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$RedstoneBundled$$deviceInfo() { return ((byte)(this.bitmap$0 & 0x4) == 0) ? li$cil$oc$server$component$RedstoneBundled$$deviceInfo$lzycompute() : this.li$cil$oc$server$component$RedstoneBundled$$deviceInfo; } public Range li$cil$oc$server$component$RedstoneBundled$$COLOR_RANGE() { return this.li$cil$oc$server$component$RedstoneBundled$$COLOR_RANGE; } public void li$cil$oc$server$component$RedstoneBundled$_setter_$li$cil$oc$server$component$RedstoneBundled$$COLOR_RANGE_$eq(Range x$1) { this.li$cil$oc$server$component$RedstoneBundled$$COLOR_RANGE = x$1; } @Callback(direct = true, doc = "function([side:number[, color:number]]):number or table -- Fewer params returns set of inputs") public Object[] getBundledInput(Context context, Arguments args) { return RedstoneBundled$class.getBundledInput(this, context, args); } @Callback(direct = true, doc = "function([side:number[, color:number]]):number or table -- Fewer params returns set of outputs") public Object[] getBundledOutput(Context context, Arguments args) { return RedstoneBundled$class.getBundledOutput(this, context, args); } @Callback(doc = "function([side:number[, color:number,]] value:number or table):number or table --  Fewer params to assign set of outputs. Returns previous values") public Object[] setBundledOutput(Context context, Arguments args) { return RedstoneBundled$class.setBundledOutput(this, context, args); } private Map li$cil$oc$server$component$RedstoneVanilla$$deviceInfo$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x8) == 0) { this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo = RedstoneVanilla$class.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo(this); this.bitmap$0 = (byte)(this.bitmap$0 | 0x8); }  return this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$RedstoneVanilla$$deviceInfo() { return ((byte)(this.bitmap$0 & 0x8) == 0) ? li$cil$oc$server$component$RedstoneVanilla$$deviceInfo$lzycompute() : this.li$cil$oc$server$component$RedstoneVanilla$$deviceInfo; } public ForgeDirection[] SIDE_RANGE() { return this.SIDE_RANGE; } public void li$cil$oc$server$component$RedstoneVanilla$_setter_$SIDE_RANGE_$eq(ForgeDirection[] x$1) { this.SIDE_RANGE = x$1; } @Callback(direct = true, doc = "function([side:number]):number or table -- Get the redstone input (all sides, or optionally on the specified side)") public Object[] getInput(Context context, Arguments args) { return RedstoneVanilla$class.getInput(this, context, args); } @Callback(direct = true, doc = "function([side:number]):number or table -- Get the redstone output (all sides, or optionally on the specified side)") public Object[] getOutput(Context context, Arguments args) { return RedstoneVanilla$class.getOutput(this, context, args); } @Callback(doc = "function([side:number, ]value:number or table):number or table --  Set the redstone output (all sides, or optionally on the specified side). Returns previous values") public Object[] setOutput(Context context, Arguments args) { return RedstoneVanilla$class.setOutput(this, context, args); } @Callback(direct = true, doc = "function(side:number):number -- Get the comparator input on the specified side.") public Object[] getComparatorInput(Context context, Arguments args) { return RedstoneVanilla$class.getComparatorInput(this, context, args); } public void onMessage(Message message) { RedstoneVanilla$class.onMessage(this, message); } public ForgeDirection checkSide(Arguments args, int index) { return RedstoneVanilla$class.checkSide(this, args, index); } public Component node() { return this.node; } public int wakeThreshold() { return this.wakeThreshold; } public void wakeThreshold_$eq(int x$1) { this.wakeThreshold = x$1; } public boolean wakeNeighborsOnly() { return this.wakeNeighborsOnly; } public void wakeNeighborsOnly_$eq(boolean x$1) { this.wakeNeighborsOnly = x$1; } public void li$cil$oc$server$component$RedstoneSignaller$_setter_$node_$eq(Component x$1) { this.node = x$1; } @Callback(direct = true, doc = "function():number -- Get the current wake-up threshold.") public Object[] getWakeThreshold(Context context, Arguments args) { return RedstoneSignaller$class.getWakeThreshold(this, context, args); } @Callback(doc = "function(threshold:number):number -- Set the wake-up threshold.") public Object[] setWakeThreshold(Context context, Arguments args) { return RedstoneSignaller$class.setWakeThreshold(this, context, args); } public void onRedstoneChanged(RedstoneChangedEventArgs args) { RedstoneSignaller$class.onRedstoneChanged(this, args); } public EnvironmentHost redstone() { return this.redstone; }
/* 30 */     public BundledWireless(EnvironmentHost redstone) { RedstoneSignaller$class.$init$(this); RedstoneVanilla$class.$init$(this); RedstoneBundled$class.$init$(this); RedstoneWireless$class.$init$(this); }
/* 31 */     private Map deviceInfo$lzycompute() { synchronized (this) { if ((byte)(this.bitmap$0 & 0x1) == 0) { (new scala.Tuple2[6])[0] = Predef$ArrowAssoc$.MODULE$
/* 32 */             .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("class"), "communication");
/* 33 */           (new scala.Tuple2[6])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("description"), "Combined redstone controller");
/* 34 */           (new scala.Tuple2[6])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("vendor"), "MightyPirates GmbH & Co. KG");
/* 35 */           (new scala.Tuple2[6])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("product"), "Rx900-M");
/* 36 */           (new scala.Tuple2[6])[4] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("capacity"), "65536");
/* 37 */           (new scala.Tuple2[6])[5] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("width"), "16"); this.deviceInfo = (Map<String, String>)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new scala.Tuple2[6])); this.bitmap$0 = (byte)(this.bitmap$0 | 0x1); }
/*    */          return this.deviceInfo; }
/*    */        } private final Map<String, String> deviceInfo() { return ((byte)(this.bitmap$0 & 0x1) == 0) ? deviceInfo$lzycompute() : this.deviceInfo; }
/* 40 */     public Map<String, String> getDeviceInfo() { return WrapAsJava$.MODULE$.mapAsJavaMap((Map)deviceInfo()); }
/*    */      }
/*    */ 
/*    */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\server\component\Redstone.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */