/*     */ package li.cil.oc.server.component.traits;
/*     */ 
/*     */ import net.minecraftforge.fluids.IFluidHandler;
/*     */ 
/*     */ @ScalaSignature(bytes = "\006\001\005=eaB\001\003!\003\r\ta\004\002\027\r2,\030\016Z\"p]R\f\027N\\3s)J\fgn\0354fe*\0211\001B\001\007iJ\f\027\016^:\013\005\0251\021!C2p[B|g.\0328u\025\t9\001\"\001\004tKJ4XM\035\006\003\023)\t!a\\2\013\005-a\021aA2jY*\tQ\"\001\002mS\016\0011\003\002\001\021-i\001\"!\005\013\016\003IQ\021aE\001\006g\016\fG.Y\005\003+I\021a!\0218z%\0264\007CA\f\031\033\005\021\021BA\r\003\005)9vN\0357e\003^\f'/\032\t\003/mI!\001\b\002\003\035MKG-\032*fgR\024\030n\031;fI\")a\004\001C\001?\0051A%\0338ji\022\"\022\001\t\t\003#\005J!A\t\n\003\tUs\027\016\036\005\006I\0011\t!J\001\023_:$&/\0318tM\026\0248i\0348uK:$8\017F\001'!\r\tr%K\005\003QI\021aa\0249uS>t\007C\001\026.\035\t\t2&\003\002-%\0051\001K]3eK\032L!AL\030\003\rM#(/\0338h\025\ta#\003C\0032\001\021\005!'\001\021ue\006t7OZ3s\r2,\030\016\032$s_6$\026M\\6U_\016{g\016^1j]\026\024HcA\0327\001B\031\021\003\016\t\n\005U\022\"!B!se\006L\b\"B\0341\001\004A\024aB2p]R,\007\020\036\t\003syj\021A\017\006\003wq\nq!\\1dQ&tWM\003\002>\021\005\031\021\r]5\n\005}R$aB\"p]R,\007\020\036\005\006\003B\002\rAQ\001\005CJ<7\017\005\002:\007&\021AI\017\002\n\003J<W/\\3oiNDC\001\r$J\025B\021\021hR\005\003\021j\022\001bQ1mY\n\f7m[\001\004I>\034\027%A&\002\005'1WO\\2uS>t\007\006^1oWNKG-\032\036ok6\024WM\035\027!S:4XM\034;pef\034\026\016Z3;]Vl'-\032:-A%tg/\0328u_JL8\013\\8uu9,XNY3sAmc\003eY8v]RTd.^7cKJ\0043\f\f\021t_V\0248-\032+b].Td.^7cKJ\0043\f\f\021pkR\004X\017^*jI\026Td.^7cKJ\\F\006I8viB,Ho\0257pijrW/\0342fevkV,X\025;E>|G.Z1oY\001rW/\0342fe\002jS\006\t+sC:\034h-\032:!g>lW\r\t4mk&$\007E\032:p[\002\"\b.\032\021uC:\\\007\005^8!i\",\007eY8oi\006Lg.\032:/AI+G/\036:og\002z\007/\032:bi&|g\016\t:fgVdG\017I1oI\0022\027\016\0347fI\002\nWn\\;oi\")Q\n\001C\001\035\006\001CO]1og\032,'O\0227vS\0224%o\\7D_:$\030-\0338feR{G+\0318l)\r\031t\n\025\005\006o1\003\r\001\017\005\006\0032\003\rA\021\025\005\031\032K%+I\001T\003\005\035h-\0368di&|g\016K5om\026tGo\034:z'&$WM\0178v[\n,'\017\f\021j]Z,g\016^8ssNcw\016\036\036ok6\024WM\035\027!i\006t7nU5eKjrW/\0342fe\002ZF\006I2pk:$(H\\;nE\026\024\be\027\027!_V$\b/\036;TS\022,'H\\;nE\026\0248\f\f\021pkR\004X\017^*m_RTd.^7cKJlV,X\025;E>|G.Z1oY\001rW/\0342fe\002jS\006\t+sC:\034h-\032:!g>lW\r\t4mk&$\007E\032:p[\002\"\b.\032\021d_:$\030-\0338fe\002\"x\016\t;iK\002\"\030M\\6/AI+G/\036:og\002z\007/\032:bi&|g\016\t:fgVdG\017I1oI\0022\027\016\0347fI\002\nWn\\;oi\")Q\013\001C\001-\006qBO]1og\032,'O\0227vS\022\024U\r^<fK:\034uN\034;bS:,'o\035\013\004g]C\006\"B\034U\001\004A\004\"B!U\001\004\021\005\006\002+G\023j\013\023aW\001\003\006\032,hn\031;j_:D3o\\;sG\026\034\026\016Z3;]Vl'-\032:-AM|WO]2f'2|GO\0178v[\n,'\017\f\021tS:\\7+\0333fu9,XNY3sY\001\032\030N\\6TY>$(H\\;nE\026\0248\f\f\021d_VtGO\0178v[\n,'\017I.-AM|WO]2f\037V$\b/\036;TS\022,'H\\;nE\026\0248\f\f\021tS:\\w*\036;qkR\034\026\016Z3;]Vl'-\032:\\Y\001\032x.\036:dK>+H\017];u'2|GO\0178v[\n,'o\027\027!g&t7nT;uaV$8\013\\8uu9,XNY3s;vkV,X\025;E>|G.Z1oY\001rW/\0342fe\002jS\006\t+sC:\034h-\032:!g>lW\r\t4mk&$\007E\032:p[\002\n\007eY8oi\006Lg.\032:!i>\004\023M\\8uQ\026\024\beY8oi\006Lg.\032:/AI+G/\036:og\002z\007/\032:bi&|g\016\t:fgVdG\017I1oI\0022\027\016\0347fI\002\nWn\\;oi\")Q\f\001C\005=\006Q1/\0378d%\026\034X\017\034;\025\033}\023W.\037@\002\002\005\025\0211BA\016!\t\t\002-\003\002b%\t9!i\\8mK\006t\007\"B2]\001\004!\027!C5om\026tGo\034:z!\t)7.D\001g\025\t\031wM\003\002iS\006IQ.\0338fGJ\fg\r\036\006\002U\006\031a.\032;\n\00514'AC%J]Z,g\016^8ss\")a\016\030a\001_\006i\021N\034<f]R|'/_*jI\026\004\"\001]<\016\003ET!A]:\002\tU$\030\016\034\006\003iV\faaY8n[>t'B\001<j\0039i\027N\\3de\0064GOZ8sO\026L!\001_9\003\035\031{'oZ3ESJ,7\r^5p]\")!\020\030a\001w\006i\021N\034<f]R|'/_*m_R\004\"!\005?\n\005u\024\"aA%oi\")q\020\030a\001I\0061q.\036;qkRDa!a\001]\001\004y\027AC8viB,HoU5eK\"9\021q\001/A\002\005%\021AC8viB,Ho\0257piB\031\021cJ>\t\017\0055A\f1\001\002\020\0051!/Z:vYR\004B!!\005\002\0305\021\0211\003\006\004\003+9\027\001B5uK6LA!!\007\002\024\tI\021\n^3n'R\f7m\033\005\t\003;a\006\023!a\001?\006A1/[7vY\006$X\rC\004\002\"\001!I!a\t\002%]LG\017\033*fa2\f\0270\0312mK6{g/\032\013\ng\005\025\022qGA\036\003\013B\001\"a\n\002 \001\007\021\021F\001\tQ\006tG\r\\3s\003B!\021cJA\026!\021\ti#a\r\016\005\005=\"bAA\031k\0061a\r\\;jINLA!!\016\0020\ti\021J\0227vS\022D\025M\0343mKJD\001\"!\017\002 \001\007\021\021F\001\tQ\006tG\r\\3s\005\"A\021QHA\020\001\004\ty$\001\005n_Z,g)\0368d!!\t\022\021IA\026\003WY\030bAA\"%\tIa)\0368di&|gN\r\005\t\003\017\ny\0021\001\002J\005q\021M\032;fe6{g/\0323Gk:\034\007\003D\t\002L\005-\0221FA(\003\037z\026bAA'%\tIa)\0368di&|g\016\016\t\007#\005E\0231\006\021\n\007\005M#CA\005Gk:\034G/[8oc!9\021q\013\001\005\n\005e\023\001C<ji\"luN^3\025\023M\nY&!\030\002`\005\005\004\002CA\024\003+\002\r!!\013\t\021\005e\022Q\013a\001\003SA\001\"!\020\002V\001\007\021q\b\005\t\003\017\n)\0061\001\002dAA\021#!\021\002,\005-r\fC\004\002h\001!I!!\033\002\033]LG\017[%om\026tGo\034:z)\025\031\0241NA8\021\035\ti'!\032A\002=\fAa]5eK\"A\021\021OA3\001\004\t\031(A\001g!\025\t\022\021\01334\021%\t9\bAI\001\n\023\tI(\001\013ts:\034'+Z:vYR$C-\0324bk2$H\005O\013\003\003wR3aXA?W\t\ty\b\005\003\002\002\006-UBAAB\025\021\t))a\"\002\023Ut7\r[3dW\026$'bAAE%\005Q\021M\0348pi\006$\030n\0348\n\t\0055\0251\021\002\022k:\034\007.Z2lK\0224\026M]5b]\016,\007")
/*     */ public interface FluidContainerTransfer extends WorldAware, SideRestricted {
/*     */   Option<String> onTransferContents();
/*     */   
/*     */   @Callback(doc = "function(tankSide:number, inventorySide:number, inventorySlot:number [, count:number [, sourceTank:number [, outputSide:number[, outputSlot:number]]]]):boolean, number -- Transfer some fluid from the tank to the container. Returns operation result and filled amount")
/*     */   Object[] transferFluidFromTankToContainer(Context paramContext, Arguments paramArguments);
/*     */   
/*     */   @Callback(doc = "function(inventorySide:number, inventorySlot:number, tankSide:number [, count:number [, outputSide:number[, outputSlot:number]]]):boolean, number -- Transfer some fluid from the container to the tank. Returns operation result and filled amount")
/*     */   Object[] transferFluidFromContainerToTank(Context paramContext, Arguments paramArguments);
/*     */   
/*     */   @Callback(doc = "function(sourceSide:number, sourceSlot:number, sinkSide:number, sinkSlot:number[, count:number [, sourceOutputSide:number[, sinkOutputSide:number[, sourceOutputSlot:number[, sinkOutputSlot:number]]]]]):boolean, number -- Transfer some fluid from a container to another container. Returns operation result and filled amount")
/*     */   Object[] transferFluidBetweenContainers(Context paramContext, Arguments paramArguments);
/*     */   
/*     */   public final class FluidContainerTransfer$$anonfun$3 extends AbstractFunction1<IInventory, Object> implements Serializable { public static final long serialVersionUID = 0L;
/*     */     
/*     */     public final int apply(IInventory inventory) {
/*  21 */       return ExtendedArguments$.MODULE$.extendedArguments(this.args$1).checkSlot(inventory, 2);
/*     */     } private final Arguments args$1; public FluidContainerTransfer$$anonfun$3(FluidContainerTransfer $outer, Arguments args$1) {} }
/*     */   public final class FluidContainerTransfer$$anonfun$4 extends AbstractFunction1<IInventory, Option<Object>> implements Serializable { public static final long serialVersionUID = 0L; private final Arguments args$1;
/*     */     public final Option<Object> apply(IInventory inventory) {
/*  25 */       return (this.args$1.count() > 6) ? (Option<Object>)new Some(BoxesRunTime.boxToInteger(ExtendedArguments$.MODULE$.extendedArguments(this.args$1).checkSlot(inventory, 6))) : (Option<Object>)None$.MODULE$;
/*     */     }
/*     */     public FluidContainerTransfer$$anonfun$4(FluidContainerTransfer $outer, Arguments args$1) {} }
/*     */   public final class FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1 extends AbstractFunction1<IInventory, Object[]> implements Serializable { public static final long serialVersionUID = 0L; public final ForgeDirection tankSide$1; public final BlockPosition tankPos$1; public final ForgeDirection inventorySide$1; public final Function1 checkInventorySlot$1; public final int count$1; public final int sourceTank$1; public final ForgeDirection outputSide$1; public final Function1 checkOutputSlot$1;
/*     */     
/*     */     public FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1(FluidContainerTransfer $outer, ForgeDirection tankSide$1, BlockPosition tankPos$1, ForgeDirection inventorySide$1, Function1 checkInventorySlot$1, int count$1, int sourceTank$1, ForgeDirection outputSide$1, Function1 checkOutputSlot$1) {}
/*     */     
/*  32 */     public final Object[] apply(IInventory inventory) { return FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$withInventory(this.$outer, this.outputSide$1, (Function1)new FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3(this, inventory)); } public final class FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3 extends AbstractFunction1<IInventory, Object[]> implements Serializable { public static final long serialVersionUID = 0L; public final IInventory inventory$2; public FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3(FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1 $outer, IInventory inventory$2) {}
/*  33 */       public final Object[] apply(IInventory output) { return FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$withReplayableMove(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), 
/*  34 */             FluidUtils$.MODULE$.fluidHandlerAt(this.$outer.tankPos$1), 
/*  35 */             FluidContainerUtils$.MODULE$.fluidHandlerIn(this.inventory$2, BoxesRunTime.unboxToInt(this.$outer.checkInventorySlot$1.apply(this.inventory$2))), 
/*  36 */             (Function2)new FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3$$anonfun$apply$4(this), 
/*  37 */             (Function4)new FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3$$anonfun$apply$5(this, output)); } public final class FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3$$anonfun$apply$4 extends AbstractFunction2<IFluidHandler, IFluidHandler, Object> implements Serializable {
/*  38 */         public static final long serialVersionUID = 0L; public final int apply(IFluidHandler replayableTank, IFluidHandler replayableContainer) { return FluidUtils$.MODULE$.transferBetweenFluidHandlers(replayableTank, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).tankSide$1, replayableContainer, ForgeDirection.UNKNOWN, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).count$1, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).sourceTank$1); } public FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3$$anonfun$apply$4(FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3 $outer) {} } public final class FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3$$anonfun$apply$5 extends AbstractFunction4<IFluidHandler, IFluidHandler, Function1<IFluidHandler, BoxedUnit>, Function1<IFluidHandler, BoxedUnit>, Object> implements Serializable { public static final long serialVersionUID = 0L; private final IInventory output$2; public FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3$$anonfun$apply$5(FluidContainerTransfer$$anonfun$transferFluidFromTankToContainer$1$$anonfun$apply$3 $outer, IInventory output$2) {} public final boolean apply(IFluidHandler tank, IFluidHandler container, Function1 tankReplay, Function1 containerReplay) { containerReplay.apply(container);
/*  39 */           ItemStack result = FluidContainerUtils$.MODULE$.getContainerResult(container);
/*     */           
/*  41 */           tankReplay.apply(tank);
/*     */           return FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), this.$outer.inventory$2, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).inventorySide$1, BoxesRunTime.unboxToInt((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkInventorySlot$1.apply(this.$outer.inventory$2)), this.output$2, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).outputSide$1, (Option)(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkOutputSlot$1.apply(this.output$2), result, FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult$default$8(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer())); }
/*     */          }
/*     */        }
/*     */      }
/*     */ 
/*     */   
/*     */   public final class FluidContainerTransfer$$anonfun$5
/*     */     extends AbstractFunction1<IInventory, Object>
/*     */     implements Serializable
/*     */   {
/*     */     public static final long serialVersionUID = 0L;
/*     */     private final Arguments args$2;
/*     */     
/*     */     public final int apply(IInventory inventory) {
/*  56 */       return ExtendedArguments$.MODULE$.extendedArguments(this.args$2).checkSlot(inventory, 1);
/*     */     }
/*     */     public FluidContainerTransfer$$anonfun$5(FluidContainerTransfer $outer, Arguments args$2) {} }
/*     */   public final class FluidContainerTransfer$$anonfun$6 extends AbstractFunction1<IInventory, Option<Object>> implements Serializable { public static final long serialVersionUID = 0L; private final Arguments args$2;
/*     */     public final Option<Object> apply(IInventory inventory) {
/*  61 */       return (this.args$2.count() > 5) ? (Option<Object>)new Some(BoxesRunTime.boxToInteger(ExtendedArguments$.MODULE$.extendedArguments(this.args$2).checkSlot(inventory, 5))) : (Option<Object>)None$.MODULE$;
/*     */     }
/*     */     public FluidContainerTransfer$$anonfun$6(FluidContainerTransfer $outer, Arguments args$2) {} }
/*     */   public final class FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1 extends AbstractFunction1<IInventory, Object[]> implements Serializable { public static final long serialVersionUID = 0L; public final ForgeDirection inventorySide$3; public final Function1 checkInventorySlot$2; public final ForgeDirection tankSide$2; public final BlockPosition tankPos$2; public final int count$2; public final ForgeDirection outputSide$3; public final Function1 checkOutputSlot$2;
/*     */     
/*     */     public FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1(FluidContainerTransfer $outer, ForgeDirection inventorySide$3, Function1 checkInventorySlot$2, ForgeDirection tankSide$2, BlockPosition tankPos$2, int count$2, ForgeDirection outputSide$3, Function1 checkOutputSlot$2) {}
/*     */     
/*  68 */     public final Object[] apply(IInventory inventory) { return FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$withInventory(this.$outer, this.outputSide$3, (Function1)new FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6(this, inventory)); } public final class FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6 extends AbstractFunction1<IInventory, Object[]> implements Serializable { public static final long serialVersionUID = 0L; public final IInventory inventory$3; public FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6(FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1 $outer, IInventory inventory$3) {}
/*  69 */       public final Object[] apply(IInventory output) { return FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$withReplayableMove(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), 
/*  70 */             FluidContainerUtils$.MODULE$.fluidHandlerIn(this.inventory$3, BoxesRunTime.unboxToInt(this.$outer.checkInventorySlot$2.apply(this.inventory$3))), 
/*  71 */             FluidUtils$.MODULE$.fluidHandlerAt(this.$outer.tankPos$2), 
/*  72 */             (Function2)new FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6$$anonfun$apply$7(this), 
/*  73 */             (Function4)new FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6$$anonfun$apply$8(this, output)); } public final class FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6$$anonfun$apply$7 extends AbstractFunction2<IFluidHandler, IFluidHandler, Object> implements Serializable {
/*  74 */         public static final long serialVersionUID = 0L; public final int apply(IFluidHandler replayableContainer, IFluidHandler replayableTank) { return FluidUtils$.MODULE$.transferBetweenFluidHandlers(replayableContainer, ForgeDirection.UNKNOWN, replayableTank, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).tankSide$2, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).count$2, FluidUtils$.MODULE$.transferBetweenFluidHandlers$default$6()); } public FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6$$anonfun$apply$7(FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6 $outer) {} } public final class FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6$$anonfun$apply$8 extends AbstractFunction4<IFluidHandler, IFluidHandler, Function1<IFluidHandler, BoxedUnit>, Function1<IFluidHandler, BoxedUnit>, Object> implements Serializable { public static final long serialVersionUID = 0L; private final IInventory output$3; public FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6$$anonfun$apply$8(FluidContainerTransfer$$anonfun$transferFluidFromContainerToTank$1$$anonfun$apply$6 $outer, IInventory output$3) {} public final boolean apply(IFluidHandler container, IFluidHandler tank, Function1 containerReplay, Function1 tankReplay) { containerReplay.apply(container);
/*  75 */           ItemStack result = FluidContainerUtils$.MODULE$.getContainerResult(container);
/*     */           
/*  77 */           tankReplay.apply(tank);
/*     */           return FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), this.$outer.inventory$3, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).inventorySide$3, BoxesRunTime.unboxToInt((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkInventorySlot$2.apply(this.$outer.inventory$3)), this.output$3, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).outputSide$3, (Option)(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkOutputSlot$2.apply(this.output$3), result, FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult$default$8(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer())); }
/*     */          }
/*     */        }
/*     */      }
/*     */ 
/*     */   
/*     */   public final class FluidContainerTransfer$$anonfun$7
/*     */     extends AbstractFunction1<IInventory, Object>
/*     */     implements Serializable
/*     */   {
/*     */     public static final long serialVersionUID = 0L;
/*     */     private final Arguments args$3;
/*     */     
/*     */     public final int apply(IInventory inventory) {
/*  92 */       return ExtendedArguments$.MODULE$.extendedArguments(this.args$3).checkSlot(inventory, 1);
/*     */     } public FluidContainerTransfer$$anonfun$7(FluidContainerTransfer $outer, Arguments args$3) {} } public final class FluidContainerTransfer$$anonfun$8 extends AbstractFunction1<IInventory, Object> implements Serializable { public static final long serialVersionUID = 0L; private final Arguments args$3; public final int apply(IInventory inventory) {
/*  94 */       return ExtendedArguments$.MODULE$.extendedArguments(this.args$3).checkSlot(inventory, 3);
/*     */     }
/*     */     public FluidContainerTransfer$$anonfun$8(FluidContainerTransfer $outer, Arguments args$3) {} }
/*     */   public final class FluidContainerTransfer$$anonfun$9 extends AbstractFunction1<IInventory, Option<Object>> implements Serializable { public static final long serialVersionUID = 0L; private final Arguments args$3;
/*  98 */     public final Option<Object> apply(IInventory inventory) { return (this.args$3.count() > 7) ? (Option<Object>)new Some(BoxesRunTime.boxToInteger(ExtendedArguments$.MODULE$.extendedArguments(this.args$3).checkSlot(inventory, 7))) : (Option<Object>)None$.MODULE$; } public FluidContainerTransfer$$anonfun$9(FluidContainerTransfer $outer, Arguments args$3) {} } public final class FluidContainerTransfer$$anonfun$10 extends AbstractFunction1<IInventory, Option<Object>> implements Serializable { public static final long serialVersionUID = 0L; private final Arguments args$3; public final Option<Object> apply(IInventory inventory) {
/*  99 */       return (this.args$3.count() > 8) ? (Option<Object>)new Some(BoxesRunTime.boxToInteger(ExtendedArguments$.MODULE$.extendedArguments(this.args$3).checkSlot(inventory, 8))) : (Option<Object>)None$.MODULE$;
/*     */     }
/*     */     public FluidContainerTransfer$$anonfun$10(FluidContainerTransfer $outer, Arguments args$3) {} }
/*     */   public final class FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1 extends AbstractFunction1<IInventory, Object[]> implements Serializable { public static final long serialVersionUID = 0L; public final ForgeDirection sourceSide$1; public final Function1 checkSourceSlot$1; public final ForgeDirection sinkSide$1; public final Function1 checkSinkSlot$1; public final int count$3; public final ForgeDirection sourceOutputSide$1; public final ForgeDirection sinkOutputSide$1; public final Function1 checkSourceOutputSlot$1; public final Function1 checkSinkOutputSlot$1;
/*     */     
/*     */     public FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1(FluidContainerTransfer $outer, ForgeDirection sourceSide$1, Function1 checkSourceSlot$1, ForgeDirection sinkSide$1, Function1 checkSinkSlot$1, int count$3, ForgeDirection sourceOutputSide$1, ForgeDirection sinkOutputSide$1, Function1 checkSourceOutputSlot$1, Function1 checkSinkOutputSlot$1) {}
/*     */     
/* 106 */     public final Object[] apply(IInventory source) { return FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$withInventory(this.$outer, this.sinkSide$1, (Function1)new FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9(this, source)); } public final class FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9 extends AbstractFunction1<IInventory, Object[]> implements Serializable { public static final long serialVersionUID = 0L; public final IInventory source$1; public FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9(FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1 $outer, IInventory source$1) {}
/* 107 */       public final Object[] apply(IInventory sink) { return FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$withInventory(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), this.$outer.sourceOutputSide$1, (Function1)new FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10(this, sink)); } public final class FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10 extends AbstractFunction1<IInventory, Object[]> implements Serializable { public static final long serialVersionUID = 0L; public final IInventory sink$1; public FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10(FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9 $outer, IInventory sink$1) {}
/* 108 */         public final Object[] apply(IInventory sourceOutput) { return FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$withInventory(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).sinkOutputSide$1, (Function1)new FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11(this, sourceOutput)); } public final class FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11 extends AbstractFunction1<IInventory, Object[]> implements Serializable { public static final long serialVersionUID = 0L; public final IInventory sourceOutput$1; public FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11(FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10 $outer, IInventory sourceOutput$1) {}
/* 109 */           public final Object[] apply(IInventory sinkOutput) { return FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$withMove(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), 
/* 110 */                 FluidContainerUtils$.MODULE$.fluidHandlerIn((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer()).source$1, BoxesRunTime.unboxToInt((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkSourceSlot$1.apply((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer()).source$1))), 
/* 111 */                 FluidContainerUtils$.MODULE$.fluidHandlerIn(this.$outer.sink$1, BoxesRunTime.unboxToInt((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkSinkSlot$1.apply(this.$outer.sink$1))), 
/* 112 */                 (Function2)new FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11$$anonfun$apply$12(this), 
/* 113 */                 (Function2)new FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11$$anonfun$apply$13(this, sinkOutput)); } public final class FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11$$anonfun$apply$12 extends AbstractFunction2<IFluidHandler, IFluidHandler, Object> implements Serializable {
/* 114 */             public static final long serialVersionUID = 0L; public final int apply(IFluidHandler sourceContainer, IFluidHandler sinkContainer) { return FluidUtils$.MODULE$.transferBetweenFluidHandlers(sourceContainer, ForgeDirection.UNKNOWN, sinkContainer, ForgeDirection.UNKNOWN, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).count$3, FluidUtils$.MODULE$.transferBetweenFluidHandlers$default$6()); } public FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11$$anonfun$apply$12(FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11 $outer) {} } public final class FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11$$anonfun$apply$13 extends AbstractFunction2<IFluidHandler, IFluidHandler, Object> implements Serializable { public static final long serialVersionUID = 0L; private final IInventory sinkOutput$1; public FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11$$anonfun$apply$13(FluidContainerTransfer$$anonfun$transferFluidBetweenContainers$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$apply$11 $outer, IInventory sinkOutput$1) {} public final boolean apply(IFluidHandler sourceContainer, IFluidHandler sinkContainer) { ItemStack sourceResult = FluidContainerUtils$.MODULE$.getContainerResult(sourceContainer);
/* 115 */               ItemStack sinkResult = FluidContainerUtils$.MODULE$.getContainerResult(sinkContainer);
/*     */ 
/*     */ 
/*     */ 
/*     */               
/* 120 */               FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer()).source$1, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).sourceSide$1, BoxesRunTime.unboxToInt((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkSourceSlot$1.apply((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer()).source$1)), this.$outer.sourceOutput$1, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).sourceOutputSide$1, (Option)(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkSourceOutputSlot$1.apply(this.$outer.sourceOutput$1), sourceResult, FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult$default$8(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer()));
/* 121 */               FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer()).sink$1, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).sinkSide$1, BoxesRunTime.unboxToInt((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkSinkSlot$1.apply((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer()).sink$1)), this.sinkOutput$1, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).sinkOutputSide$1, (Option)(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkSinkOutputSlot$1.apply(this.sinkOutput$1), sinkResult, FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult$default$8(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer()));
/*     */               return (FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer()).source$1, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).sourceSide$1, BoxesRunTime.unboxToInt((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkSourceSlot$1.apply((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer()).source$1)), this.$outer.sourceOutput$1, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).sourceOutputSide$1, (Option)(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkSourceOutputSlot$1.apply(this.$outer.sourceOutput$1), sourceResult, true) && FluidContainerTransfer$class.li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$$outer(), (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer()).sink$1, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).sinkSide$1, BoxesRunTime.unboxToInt((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkSinkSlot$1.apply((this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer()).sink$1)), this.sinkOutput$1, (this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).sinkOutputSide$1, (Option)(this.$outer.li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$anonfun$$$outer().li$cil$oc$server$component$traits$FluidContainerTransfer$$anonfun$$anonfun$$$outer()).checkSinkOutputSlot$1.apply(this.sinkOutput$1), sinkResult, true)); }
/*     */              }
/*     */            }
/*     */          }
/*     */        }
/*     */      }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final class FluidContainerTransfer$$anonfun$replaceOr$1$1
/*     */     extends AbstractFunction0.mcI.sp
/*     */     implements Serializable
/*     */   {
/*     */     public static final long serialVersionUID = 0L;
/*     */ 
/*     */     
/*     */     private final int inventorySlot$1;
/*     */ 
/*     */ 
/*     */     
/*     */     public final int apply() {
/* 145 */       return apply$mcI$sp(); } public int apply$mcI$sp() { return this.inventorySlot$1; }
/*     */     
/*     */     public FluidContainerTransfer$$anonfun$replaceOr$1$1(FluidContainerTransfer $outer, int inventorySlot$1) {} }
/*     */   public final class FluidContainerTransfer$$anonfun$li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult$1 extends AbstractFunction0.mcZ.sp implements Serializable { public static final long serialVersionUID = 0L; private final IInventory inventory$1;
/*     */     private final int inventorySlot$1;
/*     */     private final IInventory output$1;
/*     */     private final ForgeDirection outputSide$2;
/*     */     private final boolean simulate$1;
/*     */     private final ItemStack stack$1;
/*     */     
/* 155 */     public final boolean apply() { return apply$mcZ$sp(); } public boolean apply$mcZ$sp() { ItemStack x$3 = this.stack$1; IInventory x$4 = this.output$1; Some x$5 = new Some(this.outputSide$2.getOpposite()); boolean x$6 = this.simulate$1; int x$7 = InventoryUtils$.MODULE$.insertIntoInventory$default$4(); Option x$8 = InventoryUtils$.MODULE$.insertIntoInventory$default$6(); return FluidContainerTransfer$class.decrStackSizeIfInserted$1(this.$outer, InventoryUtils$.MODULE$.insertIntoInventory(x$3, x$4, (Option)x$5, x$7, x$6, x$8), this.inventory$1, this.inventorySlot$1, this.simulate$1); }
/*     */     
/*     */     public FluidContainerTransfer$$anonfun$li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult$1(FluidContainerTransfer $outer, IInventory inventory$1, int inventorySlot$1, IInventory output$1, ForgeDirection outputSide$2, boolean simulate$1, ItemStack stack$1) {} }
/*     */   public final class FluidContainerTransfer$$anonfun$li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult$2 extends AbstractFunction0.mcZ.sp implements Serializable { public static final long serialVersionUID = 0L; private final IInventory inventory$1; private final int inventorySlot$1; private final IInventory output$1; private final ForgeDirection outputSide$2; private final boolean simulate$1; private final ItemStack stack$1; private final int slot$1;
/* 159 */     public final boolean apply() { return apply$mcZ$sp(); } public boolean apply$mcZ$sp() { ItemStack x$9 = this.stack$1; IInventory x$10 = this.output$1; Some x$11 = new Some(this.outputSide$2.getOpposite()); int x$12 = this.slot$1; boolean x$13 = this.simulate$1; int x$14 = InventoryUtils$.MODULE$.insertIntoInventorySlot$default$5(); return FluidContainerTransfer$class.decrStackSizeIfInserted$1(this.$outer, InventoryUtils$.MODULE$.insertIntoInventorySlot(x$9, x$10, (Option)x$11, x$12, x$14, x$13), this.inventory$1, this.inventorySlot$1, this.simulate$1); }
/*     */     
/*     */     public FluidContainerTransfer$$anonfun$li$cil$oc$server$component$traits$FluidContainerTransfer$$syncResult$2(FluidContainerTransfer $outer, IInventory inventory$1, int inventorySlot$1, IInventory output$1, ForgeDirection outputSide$2, boolean simulate$1, ItemStack stack$1, int slot$1) {} }
/*     */   
/*     */   public final class FluidContainerTransfer$$anonfun$1 extends AbstractFunction0.mcI.sp implements Serializable { public static final long serialVersionUID = 0L;
/*     */     
/* 165 */     public final int apply() { return apply$mcI$sp(); } public int apply$mcI$sp() { return 0; } public FluidContainerTransfer$$anonfun$1(FluidContainerTransfer $outer) {} } public final class FluidContainerTransfer$$anonfun$11 extends AbstractFunction1<IFluidHandler, Object> implements Serializable { public static final long serialVersionUID = 0L; private final Option handlerB$1; public final Function2 moveFunc$1; public final Function4 afterMovedFunc$1; public FluidContainerTransfer$$anonfun$11(FluidContainerTransfer $outer, Option handlerB$1, Function2 moveFunc$1, Function4 afterMovedFunc$1) {}
/* 166 */     public final int apply(IFluidHandler a) { return BoxesRunTime.unboxToInt(this.handlerB$1.fold((Function0)new FluidContainerTransfer$$anonfun$11$$anonfun$apply$1(this), (Function1)new FluidContainerTransfer$$anonfun$11$$anonfun$apply$14(this, a))); } public final class FluidContainerTransfer$$anonfun$11$$anonfun$apply$1 extends AbstractFunction0.mcI.sp implements Serializable { public static final long serialVersionUID = 0L; public final int apply() { return apply$mcI$sp(); } public int apply$mcI$sp() { return 0; } public FluidContainerTransfer$$anonfun$11$$anonfun$apply$1(FluidContainerTransfer$$anonfun$11 $outer) {} } public final class FluidContainerTransfer$$anonfun$11$$anonfun$apply$14 extends AbstractFunction1<IFluidHandler, Object> implements Serializable { public static final long serialVersionUID = 0L; private final IFluidHandler a$1; public FluidContainerTransfer$$anonfun$11$$anonfun$apply$14(FluidContainerTransfer$$anonfun$11 $outer, IFluidHandler a$1) {}
/* 167 */       public final int apply(IFluidHandler b) { IFluidHandler replayableA = FluidContainerUtils$.MODULE$.replayableFluidHandler(this.a$1, FluidContainerUtils$.MODULE$.replayableFluidHandler$default$2());
/* 168 */         IFluidHandler replayableB = FluidContainerUtils$.MODULE$.replayableFluidHandler(b, FluidContainerUtils$.MODULE$.replayableFluidHandler$default$2());
/* 169 */         int i = BoxesRunTime.unboxToInt(this.$outer.moveFunc$1.apply(replayableA, replayableB)); switch (i)
/*     */         
/*     */         { default:
/* 172 */             return BoxesRunTime.unboxToBoolean(this.$outer.afterMovedFunc$1.apply(this.a$1, b, new FluidContainerTransfer$$anonfun$11$$anonfun$apply$14$$anonfun$apply$15(this, replayableA), new FluidContainerTransfer$$anonfun$11$$anonfun$apply$14$$anonfun$apply$16(this, replayableB))) ? i : 0;case 0: break; }  return 0; } public final class FluidContainerTransfer$$anonfun$11$$anonfun$apply$14$$anonfun$apply$15 extends AbstractFunction1<IFluidHandler, BoxedUnit> implements Serializable { public static final long serialVersionUID = 0L; private final IFluidHandler replayableA$1; public final void apply(IFluidHandler h) { FluidContainerUtils$.MODULE$.replay(this.replayableA$1, h); } public FluidContainerTransfer$$anonfun$11$$anonfun$apply$14$$anonfun$apply$15(FluidContainerTransfer$$anonfun$11$$anonfun$apply$14 $outer, IFluidHandler replayableA$1) {} } public final class FluidContainerTransfer$$anonfun$11$$anonfun$apply$14$$anonfun$apply$16 extends AbstractFunction1<IFluidHandler, BoxedUnit> implements Serializable { public static final long serialVersionUID = 0L; private final IFluidHandler replayableB$1; public final void apply(IFluidHandler h) { FluidContainerUtils$.MODULE$.replay(this.replayableB$1, h); }
/*     */ 
/*     */         
/*     */         public FluidContainerTransfer$$anonfun$11$$anonfun$apply$14$$anonfun$apply$16(FluidContainerTransfer$$anonfun$11$$anonfun$apply$14 $outer, IFluidHandler replayableB$1) {} }
/*     */        } }
/*     */   
/*     */   public final class FluidContainerTransfer$$anonfun$2 extends AbstractFunction0.mcI.sp implements Serializable { public static final long serialVersionUID = 0L;
/*     */     
/* 180 */     public final int apply() { return apply$mcI$sp(); } public int apply$mcI$sp() { return 0; } public FluidContainerTransfer$$anonfun$2(FluidContainerTransfer $outer) {} } public final class FluidContainerTransfer$$anonfun$12 extends AbstractFunction1<IFluidHandler, Object> implements Serializable { public static final long serialVersionUID = 0L; private final Option handlerB$2; public final Function2 moveFunc$2; public final Function2 afterMovedFunc$2; public FluidContainerTransfer$$anonfun$12(FluidContainerTransfer $outer, Option handlerB$2, Function2 moveFunc$2, Function2 afterMovedFunc$2) {}
/* 181 */     public final int apply(IFluidHandler a) { return BoxesRunTime.unboxToInt(this.handlerB$2.fold((Function0)new FluidContainerTransfer$$anonfun$12$$anonfun$apply$2(this), (Function1)new FluidContainerTransfer$$anonfun$12$$anonfun$apply$17(this, a))); } public final class FluidContainerTransfer$$anonfun$12$$anonfun$apply$2 extends AbstractFunction0.mcI.sp implements Serializable { public static final long serialVersionUID = 0L; public final int apply() { return apply$mcI$sp(); } public int apply$mcI$sp() { return 0; } public FluidContainerTransfer$$anonfun$12$$anonfun$apply$2(FluidContainerTransfer$$anonfun$12 $outer) {} } public final class FluidContainerTransfer$$anonfun$12$$anonfun$apply$17 extends AbstractFunction1<IFluidHandler, Object> implements Serializable { public static final long serialVersionUID = 0L; private final IFluidHandler a$2; public FluidContainerTransfer$$anonfun$12$$anonfun$apply$17(FluidContainerTransfer$$anonfun$12 $outer, IFluidHandler a$2) {} public final int apply(IFluidHandler b) {
/* 182 */         int i = BoxesRunTime.unboxToInt(this.$outer.moveFunc$2.apply(this.a$2, b)); switch (i) { default: return 
/*     */ 
/*     */               
/* 185 */               BoxesRunTime.unboxToBoolean(this.$outer.afterMovedFunc$2.apply(this.a$2, b)) ? i : 0;
/*     */           case 0:
/*     */             break; }
/*     */         
/*     */         return 0;
/*     */       } }
/*     */      }
/*     */ 
/*     */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\server\component\traits\FluidContainerTransfer.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */