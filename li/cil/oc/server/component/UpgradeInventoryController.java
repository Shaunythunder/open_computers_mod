/*     */ package li.cil.oc.server.component;
/*     */ 
/*     */ import li.cil.oc.api.machine.Arguments;
/*     */ import li.cil.oc.api.machine.Callback;
/*     */ import li.cil.oc.api.machine.Context;
/*     */ import li.cil.oc.api.network.Component;
/*     */ import li.cil.oc.server.component.traits.InventoryAnalytics;
/*     */ import li.cil.oc.server.component.traits.InventoryAware;
/*     */ import li.cil.oc.server.component.traits.InventoryWorldControlMk2;
/*     */ import li.cil.oc.server.component.traits.ItemInventoryControl;
/*     */ import li.cil.oc.server.component.traits.WorldAware;
/*     */ import li.cil.oc.server.component.traits.WorldInventoryAnalytics;
/*     */ import li.cil.oc.util.BlockPosition;
/*     */ import net.minecraft.item.ItemStack;
/*     */ import net.minecraftforge.common.util.ForgeDirection;
/*     */ import scala.Predef$;
/*     */ import scala.collection.Seq;
/*     */ import scala.collection.immutable.Map;
/*     */ import scala.collection.mutable.Buffer;
/*     */ import scala.reflect.ClassTag;
/*     */ import scala.runtime.BoxesRunTime;
/*     */ 
/*     */ @ScalaSignature(bytes = "\006\001\t]s!B\001\003\021\003i\021AG+qOJ\fG-Z%om\026tGo\034:z\007>tGO]8mY\026\024(BA\002\005\003%\031w.\0349p]\026tGO\003\002\006\r\00511/\032:wKJT!a\002\005\002\005=\034'BA\005\013\003\r\031\027\016\034\006\002\027\005\021A.[\002\001!\tqq\"D\001\003\r\025\001\"\001#\001\022\005i)\006o\032:bI\026LeN^3oi>\024\030pQ8oiJ|G\016\\3s'\ty!\003\005\002\024-5\tACC\001\026\003\025\0318-\0317b\023\t9BC\001\004B]f\024VM\032\005\0063=!\tAG\001\007y%t\027\016\036 \025\00351q\001H\b\021\002\007\005QD\001\004D_6lwN\\\n\0047y1\003CA\020%\033\005\001#BA\021#\003\021a\027M\\4\013\003\r\nAA[1wC&\021Q\005\t\002\007\037\nTWm\031;\021\005\035bS\"\001\025\013\005%R\023A\0023sSZ,'O\003\002,\r\005\031\021\r]5\n\0055B#A\003#fm&\034W-\0238g_\")qf\007C\001a\0051A%\0338ji\022\"\022!\r\t\003'IJ!a\r\013\003\tUs\027\016\036\005\tkmA)\031!C\007m\005QA-\032<jG\026LeNZ8\026\003]\002B\001O\037@5\t\021H\003\002;w\005I\021.\\7vi\006\024G.\032\006\003yQ\t!bY8mY\026\034G/[8o\023\tq\024HA\002NCB\004\"a\b!\n\005\005\003#AB*ue&tw\r\003\005D7!\005\t\025)\0048\003-!WM^5dK&sgm\034\021\t\013\025[B\021\t$\002\033\035,G\017R3wS\016,\027J\0344p)\0059\005\003\002%L\0312k\021!\023\006\003\025\n\nA!\036;jY&\021a(\023\t\003\033Bs!a\005(\n\005=#\022A\002)sK\022,g-\003\002B#*\021q\n\006\004\005'>\001AKA\004BI\006\004H/\032:\024\tI+6,\031\t\003-fk\021a\026\006\0031*\na\001\035:fM\006\024\027B\001.X\005Ii\025M\\1hK\022,eN^5s_:lWM\034;\021\005q{V\"A/\013\005y\023\021A\002;sC&$8/\003\002a;\n9rk\034:mI&sg/\0328u_JL\030I\\1msRL7m\035\t\003Eni\021a\004\005\tIJ\023)\031!C\001K\006!\001n\\:u+\0051\007CA4k\033\005A'BA5+\003\035qW\r^<pe.L!a\0335\003\037\025sg/\033:p]6,g\016\036%pgRD\001\"\034*\003\002\003\006IAZ\001\006Q>\034H\017\t\005\0063I#\ta\034\013\003aF\004\"A\031*\t\013\021t\007\031\0014\t\017M\024&\031!C!i\006!an\0343f+\005)\bCA4w\023\t9\bNA\005D_6\004xN\\3oi\"1\021P\025Q\001\nU\fQA\\8eK\002BQa\037*\005Bq\f\001\002]8tSRLwN\\\013\002{B\031a0!\001\016\003}T!A\023\004\n\007\005\rqPA\007CY>\0347\016U8tSRLwN\034\005\b\003\017\021F\021KA\005\003I\031\007.Z2l'&$WMR8s\003\016$\030n\0348\025\r\005-\021\021EA\031!\021\ti!!\b\016\005\005=!b\001&\002\022)!\0211CA\013\003\031\031w.\\7p]*!\021qCA\r\0039i\027N\\3de\0064GOZ8sO\026T!!a\007\002\0079,G/\003\003\002 \005=!A\004$pe\036,G)\033:fGRLwN\034\005\t\003G\t)\0011\001\002&\005!\021M]4t!\021\t9#!\f\016\005\005%\"bAA\026U\0059Q.Y2iS:,\027\002BA\030\003S\021\021\"\021:hk6,g\016^:\t\021\005M\022Q\001a\001\003k\t\021A\034\t\004'\005]\022bAA\035)\t\031\021J\034;\007\r\005ur\002AA \005\025!%o\0348f'-\tY$VA!\003\017Z\026QJ1\021\007q\013\031%C\002\002Fu\023!#\0238wK:$xN]=B]\006d\027\020^5dgB\031A,!\023\n\007\005-SL\001\rJ]Z,g\016^8ss^{'\017\0343D_:$(o\0347NWJ\0022\001XA(\023\r\t\t&\030\002\025\023R,W.\0238wK:$xN]=D_:$(o\0347\t\025\021\fYD!b\001\n\003\t)&\006\002\002XI)\021\021\f4\002^\0311\0211L\b\001\003/\022A\002\020:fM&tW-\\3oiz\002B!a\030\002f5\021\021\021\r\006\004\003GR\023\001C5oi\026\024h.\0317\n\t\005\035\024\021\r\002\006\003\036,g\016\036\005\013[\006m\"\021!Q\001\n\005]\003bB\r\002<\021\005\021Q\016\013\005\003_\n\t\bE\002c\003wAq\001ZA6\001\004\t\031HE\003\002v\031\fiF\002\004\002\\=\001\0211\017\005\tg\006m\"\031!C!i\"9\0210a\017!\002\023)\bBB>\002<\021\005C\020\003\005\002\000\005mB\021IAA\003%IgN^3oi>\024\0300\006\002\002\004B!\021QQAG\033\t\t9I\003\003\002\000\005%%\002BAF\0033\t\021\"\\5oK\016\024\030M\032;\n\t\005=\025q\021\002\013\023&sg/\0328u_JL\b\002CAJ\003w!\t%!&\002\031M,G.Z2uK\022\034Fn\034;\026\005\005U\002\002CAM\003w!\t%a'\002!M,G.Z2uK\022\034Fn\034;`I\025\fHcA\031\002\036\"A\021qTAL\001\004\t)$A\003wC2,X\r\003\005\002\b\005mB\021KAR)\031\tY!!*\002(\"A\0211EAQ\001\004\t)\003\003\005\0024\005\005\006\031AA\033\r\031\tYk\004\001\002.\n)!k\0342piNY\021\021V+\002B\005\0353,!\024b\021)!\027\021\026BC\002\023\005\021\021W\013\003\003g\023R!!.g\003o3a!a\027\020\001\005M\006\003BA]\003\003l!!a/\013\t\005u\026qX\001\013i&dW-\0328uSRL(bAA\n\r%!\0211VA^\021)i\027\021\026B\001B\003%\0211\027\005\b3\005%F\021AAd)\021\tI-a3\021\007\t\fI\013C\004e\003\013\004\r!!4\023\013\005=g-a.\007\r\005ms\002AAg\021!\031\030\021\026b\001\n\003\"\bbB=\002*\002\006I!\036\005\007w\006%F\021\t?\t\021\005}\024\021\026C!\0033,\"!a7\023\013\005ug$a9\007\r\005m\003\001AAn\023\021\t\t/!1\002\0355\f\027N\\%om\026tGo\034:zAA!\021Q]Au\033\t\t9O\003\003\002\000\005}\026\002BAv\003O\024a\"\0238wK:$xN]=Qe>D\030\020\003\005\002\000\005uG\021IAx+\t\t9\f\003\005\002\024\006%F\021IAK\021!\tI*!+\005B\005UHcA\031\002x\"A\021qTAz\001\004\t)\004\003\005\002\b\005%F\021KA~)\031\tY!!@\002\000\"A\0211EA}\001\004\t)\003\003\005\0024\005e\b\031AA\033\021!\021\031!!+\005\002\t\025\021!B3rk&\004HC\002B\004\005\033\0219\002\005\003\024\005\023\021\022b\001B\006)\t)\021I\035:bs\"A!q\002B\001\001\004\021\t\"A\004d_:$X\r\037;\021\t\005\035\"1C\005\005\005+\tICA\004D_:$X\r\037;\t\021\005\r\"\021\001a\001\003KA\003B!\001\003\034\t\005\"1\005\t\005\003O\021i\"\003\003\003 \005%\"\001C\"bY2\024\027mY6\002\007\021|7-\t\002\003&\005Ag-\0368di&|g\016K\025;E>|G.Z1oA5j\003eU<baN\004C\017[3!KF,\030\016\0359fI\002\"xn\0347!o&$\b\016\t;iK\002\032wN\034;f]R\004sN\032\021uQ\026\0043-\036:sK:$H.\037\021tK2,7\r^3eA%tg/\0328u_JL\be\0357pi:B\001B!\013\002*\022\005!1F\001\017S:\034H/\0317m+B<'/\0313f)\031\0219A!\f\0030!A!q\002B\024\001\004\021\t\002\003\005\002$\t\035\002\031AA\023Q!\0219Ca\007\003\"\tM\022E\001B\033\003\005%b-\0368di&|g\016K.tY>$(H\\;nE\026\024X,\013\036c_>dW-\0318![5\0023k^1qg\002\"\b.\032\021j]N$\030\r\0347fI\002*\bo\032:bI\026\004\023N\034\021uQ\026\0043\017\\8uA!\n\004EY=!I\0264\027-\0367uS\001:\030\016\0365!i\",\007eY8oi\026tG\017I8gAQDW\rI2veJ,g\016\0367zAM,G.Z2uK\022\004\023N\034<f]R|'/\037\021tY>$h\006\003\005\003:\005%F\021\001B\036\003]9W\r^+qOJ\fG-Z\"p]R\f\027N\\3s)f\004X\r\006\004\003\b\tu\"q\b\005\t\005\037\0219\0041\001\003\022!A\0211\005B\034\001\004\t)\003\013\005\0038\tm!\021\005B\"C\t\021)%A'gk:\034G/[8oQMdw\016\036\036ok6\024WM]\025;gR\024\030N\\4![5\002s-\032;!kB<'/\0313fA\r|g\016^1j]\026\024\b\005^=qK\002\nG\017\t;iK\002:\027N^3oAMdw\016\036\030\t\021\t%\023\021\026C\001\005\027\nqcZ3u+B<'/\0313f\007>tG/Y5oKJ$\026.\032:\025\r\t\035!Q\nB(\021!\021yAa\022A\002\tE\001\002CA\022\005\017\002\r!!\n)\021\t\035#1\004B\021\005'\n#A!\026\002\033\032,hn\031;j_:D3\017\\8uu9,XNY3sSirW/\0342fe\002jS\006I4fi\002*\bo\032:bI\026\0043m\0348uC&tWM\035\021uS\026\024\b%\031;!i\",\007eZ5wK:\0043\017\\8u]\001")
/*     */ public final class UpgradeInventoryController {
/*     */   public static abstract class Common$class { public static final Map li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo(UpgradeInventoryController.Common $this) {
/*  26 */       (new Tuple2[4])[0] = Predef$ArrowAssoc$.MODULE$
/*  27 */         .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("class"), "generic");
/*  28 */       (new Tuple2[4])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("description"), "Inventory controller");
/*  29 */       (new Tuple2[4])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("vendor"), "MightyPirates GmbH & Co. KG");
/*  30 */       (new Tuple2[4])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("product"), "Item Cataloguer R1");
/*     */       return (Map)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[4]));
/*     */     } public static void $init$(UpgradeInventoryController.Common $this) {} public static Map getDeviceInfo(UpgradeInventoryController.Common $this) {
/*  33 */       return WrapAsJava$.MODULE$.mapAsJavaMap((Map)$this.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo());
/*     */     } }
/*     */   public static class Adapter extends ManagedEnvironment implements WorldInventoryAnalytics, Common { private final EnvironmentHost host; private final Component node; private final Map<String, String> li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo; private volatile boolean bitmap$0;
/*  36 */     private Map li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo = UpgradeInventoryController.Common$class.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo : li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return UpgradeInventoryController.Common$class.getDeviceInfo(this); } @Callback(doc = "function(side:number):number -- Get the number of slots in the inventory on the specified side of the device.") public Object[] getInventorySize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getInventorySize(this, context, args); } @Callback(doc = "function(side:number, slot:number):number -- Get number of items in the specified slot of the inventory on the specified side of the device.") public Object[] getSlotStackSize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getSlotStackSize(this, context, args); } @Callback(doc = "function(side:number, slot:number):number -- Get the maximum number of items in the specified slot of the inventory on the specified side of the device.") public Object[] getSlotMaxStackSize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getSlotMaxStackSize(this, context, args); } @Callback(doc = "function(side:number, slotA:number, slotB:number[, checkNBT:boolean=false]):boolean -- Get whether the items in the two specified slots of the inventory on the specified side of the device are of the same type.") public Object[] compareStacks(Context context, Arguments args) { return WorldInventoryAnalytics.class.compareStacks(this, context, args); } @Callback(doc = "function(side:number, slot:number, dbAddress:string, dbSlot:number[, checkNBT:boolean=false]):boolean -- Compare an item in the specified slot in the inventory on the specified side with one in the database with the specified address.") public Object[] compareStackToDatabase(Context context, Arguments args) { return WorldInventoryAnalytics.class.compareStackToDatabase(this, context, args); } @Callback(doc = "function(side:number, slotA:number, slotB:number):boolean -- Get whether the items in the two specified slots of the inventory on the specified side of the device are equivalent (have shared OreDictionary IDs).") public Object[] areStacksEquivalent(Context context, Arguments args) { return WorldInventoryAnalytics.class.areStacksEquivalent(this, context, args); } @Callback(doc = "function(side:number, slot:number, label:string):boolean -- Change the display name of the stack in the inventory on the specified side of the device.") public Object[] setStackDisplayName(Context context, Arguments args) { return WorldInventoryAnalytics.class.setStackDisplayName(this, context, args); } @Callback(doc = "function(side:number, slot:number):table -- Get a description of the stack in the inventory on the specified side of the device.") public Object[] getStackInSlot(Context context, Arguments args) { return WorldInventoryAnalytics.class.getStackInSlot(this, context, args); } @Callback(doc = "function(side:number):userdata -- Get a description of all stacks in the inventory on the specified side of the device.") public Object[] getAllStacks(Context context, Arguments args) { return WorldInventoryAnalytics.class.getAllStacks(this, context, args); } @Callback(doc = "function(side:number):string -- Get the the name of the inventory on the specified side of the device.") public Object[] getInventoryName(Context context, Arguments args) { return WorldInventoryAnalytics.class.getInventoryName(this, context, args); } @Callback(doc = "function(side:number, slot:number, dbAddress:string, dbSlot:number):boolean -- Store an item stack description in the specified slot of the database with the specified address.") public Object[] store(Context context, Arguments args) { return WorldInventoryAnalytics.class.store(this, context, args); } public World world() { return WorldAware.class.world((WorldAware)this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer((WorldAware)this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract((WorldAware)this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds((WorldAware)this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock((WorldAware)this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide((WorldAware)this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity((WorldAware)this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent((WorldAware)this, side); } public EnvironmentHost host() { return this.host; } public Adapter(EnvironmentHost host) { WorldAware.class.$init$((WorldAware)this); WorldInventoryAnalytics.class.$init$(this); UpgradeInventoryController.Common$class.$init$(this);
/*  37 */       this.node = (Component)Network.newNode((Environment)this, Visibility.Network)
/*  38 */         .withComponent("inventory_controller", Visibility.Network)
/*  39 */         .create(); }
/*     */      public Component node() {
/*     */       return this.node;
/*     */     } public BlockPosition position() {
/*  43 */       return BlockPosition$.MODULE$.apply(host());
/*     */     } public ForgeDirection checkSideForAction(Arguments args, int n) {
/*  45 */       return ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(n);
/*     */     } }
/*     */   public static class Drone extends ManagedEnvironment implements InventoryAnalytics, InventoryWorldControlMk2, WorldInventoryAnalytics, ItemInventoryControl, Common { private final Agent host; private final Component node; private final Map<String, String> li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo; private volatile boolean bitmap$0;
/*  48 */     private Map li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo = UpgradeInventoryController.Common$class.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo : li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return UpgradeInventoryController.Common$class.getDeviceInfo(this); } @Callback(doc = "function(slot:number):number -- The size of an item inventory in the specified slot.") public Object[] getItemInventorySize(Context context, Arguments args) { return ItemInventoryControl.class.getItemInventorySize(this, context, args); } @Callback(doc = "function(inventorySlot:number, slot:number[, count:number=64]):number -- Drops an item into the specified slot in the item inventory.") public Object[] dropIntoItemInventory(Context context, Arguments args) { return ItemInventoryControl.class.dropIntoItemInventory(this, context, args); } @Callback(doc = "function(inventorySlot:number, slot:number[, count:number=64]):number -- Sucks an item out of the specified slot in the item inventory.") public Object[] suckFromItemInventory(Context context, Arguments args) { return ItemInventoryControl.class.suckFromItemInventory(this, context, args); } @Callback(doc = "function(side:number):number -- Get the number of slots in the inventory on the specified side of the device.") public Object[] getInventorySize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getInventorySize(this, context, args); } @Callback(doc = "function(side:number, slot:number):number -- Get number of items in the specified slot of the inventory on the specified side of the device.") public Object[] getSlotStackSize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getSlotStackSize(this, context, args); } @Callback(doc = "function(side:number, slot:number):number -- Get the maximum number of items in the specified slot of the inventory on the specified side of the device.") public Object[] getSlotMaxStackSize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getSlotMaxStackSize(this, context, args); } @Callback(doc = "function(side:number, slotA:number, slotB:number[, checkNBT:boolean=false]):boolean -- Get whether the items in the two specified slots of the inventory on the specified side of the device are of the same type.") public Object[] compareStacks(Context context, Arguments args) { return WorldInventoryAnalytics.class.compareStacks(this, context, args); } @Callback(doc = "function(side:number, slot:number, dbAddress:string, dbSlot:number[, checkNBT:boolean=false]):boolean -- Compare an item in the specified slot in the inventory on the specified side with one in the database with the specified address.") public Object[] compareStackToDatabase(Context context, Arguments args) { return WorldInventoryAnalytics.class.compareStackToDatabase(this, context, args); } @Callback(doc = "function(side:number, slotA:number, slotB:number):boolean -- Get whether the items in the two specified slots of the inventory on the specified side of the device are equivalent (have shared OreDictionary IDs).") public Object[] areStacksEquivalent(Context context, Arguments args) { return WorldInventoryAnalytics.class.areStacksEquivalent(this, context, args); } @Callback(doc = "function(side:number, slot:number, label:string):boolean -- Change the display name of the stack in the inventory on the specified side of the device.") public Object[] setStackDisplayName(Context context, Arguments args) { return WorldInventoryAnalytics.class.setStackDisplayName(this, context, args); } @Callback(doc = "function(side:number, slot:number):table -- Get a description of the stack in the inventory on the specified side of the device.") public Object[] getStackInSlot(Context context, Arguments args) { return WorldInventoryAnalytics.class.getStackInSlot(this, context, args); } @Callback(doc = "function(side:number):userdata -- Get a description of all stacks in the inventory on the specified side of the device.") public Object[] getAllStacks(Context context, Arguments args) { return WorldInventoryAnalytics.class.getAllStacks(this, context, args); } @Callback(doc = "function(side:number):string -- Get the the name of the inventory on the specified side of the device.") public Object[] getInventoryName(Context context, Arguments args) { return WorldInventoryAnalytics.class.getInventoryName(this, context, args); } @Callback(doc = "function(side:number, slot:number, dbAddress:string, dbSlot:number):boolean -- Store an item stack description in the specified slot of the database with the specified address.") public Object[] store(Context context, Arguments args) { return WorldInventoryAnalytics.class.store(this, context, args); } @Callback(doc = "function(facing:number, slot:number[, count:number[, fromSide:number]]):boolean -- Drops the selected item stack into the specified slot of an inventory.") public Object[] dropIntoSlot(Context context, Arguments args) { return InventoryWorldControlMk2.class.dropIntoSlot(this, context, args); } @Callback(doc = "function(facing:number, slot:number[, count:number[, fromSide:number]]):boolean -- Sucks items from the specified slot of an inventory.") public Object[] suckFromSlot(Context context, Arguments args) { return InventoryWorldControlMk2.class.suckFromSlot(this, context, args); } public World world() { return WorldAware.class.world((WorldAware)this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer((WorldAware)this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract((WorldAware)this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds((WorldAware)this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock((WorldAware)this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide((WorldAware)this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity((WorldAware)this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent((WorldAware)this, side); } @Callback(doc = "function([slot:number]):table -- Get a description of the stack in the specified slot or the selected slot.") public Object[] getStackInInternalSlot(Context context, Arguments args) { return InventoryAnalytics.class.getStackInInternalSlot(this, context, args); } @Callback(doc = "function(otherSlot:number):boolean -- Get whether the stack in the selected slot is equivalent to the item in the specified slot (have shared OreDictionary IDs).") public Object[] isEquivalentTo(Context context, Arguments args) { return InventoryAnalytics.class.isEquivalentTo(this, context, args); } @Callback(doc = "function(slot:number, dbAddress:string, dbSlot:number):boolean -- Store an item stack description in the specified slot of the database with the specified address.") public Object[] storeInternal(Context context, Arguments args) { return InventoryAnalytics.class.storeInternal(this, context, args); } @Callback(doc = "function(slot:number, dbAddress:string, dbSlot:number[, checkNBT:boolean=false]):boolean -- Compare an item in the specified slot with one in the database with the specified address.") public Object[] compareToDatabase(Context context, Arguments args) { return InventoryAnalytics.class.compareToDatabase(this, context, args); } public IndexedSeq<Object> insertionSlots() { return InventoryAware.class.insertionSlots((InventoryAware)this); } public int optSlot(Arguments args, int n) { return InventoryAware.class.optSlot((InventoryAware)this, args, n); } public Option<ItemStack> stackInSlot(int slot) { return InventoryAware.class.stackInSlot((InventoryAware)this, slot); } public Agent host() { return this.host; } public Drone(Agent host) { InventoryAware.class.$init$((InventoryAware)this); InventoryAnalytics.class.$init$(this); WorldAware.class.$init$((WorldAware)this); InventoryWorldControlMk2.class.$init$(this); WorldInventoryAnalytics.class.$init$(this); ItemInventoryControl.class.$init$(this); UpgradeInventoryController.Common$class.$init$(this);
/*  49 */       this.node = (Component)Network.newNode((Environment)this, Visibility.Network)
/*  50 */         .withComponent("inventory_controller", Visibility.Neighbors)
/*  51 */         .create(); }
/*     */      public Component node() {
/*     */       return this.node;
/*     */     } public BlockPosition position() {
/*  55 */       return BlockPosition$.MODULE$.apply((EnvironmentHost)host());
/*     */     } public IInventory inventory() {
/*  57 */       return host().mainInventory();
/*     */     } public int selectedSlot() {
/*  59 */       return host().selectedSlot();
/*     */     } public void selectedSlot_$eq(int value) {
/*  61 */       host().setSelectedSlot(value);
/*     */     } public ForgeDirection checkSideForAction(Arguments args, int n) {
/*  63 */       return ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(n);
/*     */     } }
/*     */   public static class Robot extends ManagedEnvironment implements InventoryAnalytics, InventoryWorldControlMk2, WorldInventoryAnalytics, ItemInventoryControl, Common { private final li.cil.oc.common.tileentity.Robot host; private final Component node; private final Map<String, String> li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo; private volatile boolean bitmap$0;
/*  66 */     private Map li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo = UpgradeInventoryController.Common$class.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo : li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return UpgradeInventoryController.Common$class.getDeviceInfo(this); } @Callback(doc = "function(slot:number):number -- The size of an item inventory in the specified slot.") public Object[] getItemInventorySize(Context context, Arguments args) { return ItemInventoryControl.class.getItemInventorySize(this, context, args); } @Callback(doc = "function(inventorySlot:number, slot:number[, count:number=64]):number -- Drops an item into the specified slot in the item inventory.") public Object[] dropIntoItemInventory(Context context, Arguments args) { return ItemInventoryControl.class.dropIntoItemInventory(this, context, args); } @Callback(doc = "function(inventorySlot:number, slot:number[, count:number=64]):number -- Sucks an item out of the specified slot in the item inventory.") public Object[] suckFromItemInventory(Context context, Arguments args) { return ItemInventoryControl.class.suckFromItemInventory(this, context, args); } @Callback(doc = "function(side:number):number -- Get the number of slots in the inventory on the specified side of the device.") public Object[] getInventorySize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getInventorySize(this, context, args); } @Callback(doc = "function(side:number, slot:number):number -- Get number of items in the specified slot of the inventory on the specified side of the device.") public Object[] getSlotStackSize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getSlotStackSize(this, context, args); } @Callback(doc = "function(side:number, slot:number):number -- Get the maximum number of items in the specified slot of the inventory on the specified side of the device.") public Object[] getSlotMaxStackSize(Context context, Arguments args) { return WorldInventoryAnalytics.class.getSlotMaxStackSize(this, context, args); } @Callback(doc = "function(side:number, slotA:number, slotB:number[, checkNBT:boolean=false]):boolean -- Get whether the items in the two specified slots of the inventory on the specified side of the device are of the same type.") public Object[] compareStacks(Context context, Arguments args) { return WorldInventoryAnalytics.class.compareStacks(this, context, args); } @Callback(doc = "function(side:number, slot:number, dbAddress:string, dbSlot:number[, checkNBT:boolean=false]):boolean -- Compare an item in the specified slot in the inventory on the specified side with one in the database with the specified address.") public Object[] compareStackToDatabase(Context context, Arguments args) { return WorldInventoryAnalytics.class.compareStackToDatabase(this, context, args); } @Callback(doc = "function(side:number, slotA:number, slotB:number):boolean -- Get whether the items in the two specified slots of the inventory on the specified side of the device are equivalent (have shared OreDictionary IDs).") public Object[] areStacksEquivalent(Context context, Arguments args) { return WorldInventoryAnalytics.class.areStacksEquivalent(this, context, args); } @Callback(doc = "function(side:number, slot:number, label:string):boolean -- Change the display name of the stack in the inventory on the specified side of the device.") public Object[] setStackDisplayName(Context context, Arguments args) { return WorldInventoryAnalytics.class.setStackDisplayName(this, context, args); } @Callback(doc = "function(side:number, slot:number):table -- Get a description of the stack in the inventory on the specified side of the device.") public Object[] getStackInSlot(Context context, Arguments args) { return WorldInventoryAnalytics.class.getStackInSlot(this, context, args); } @Callback(doc = "function(side:number):userdata -- Get a description of all stacks in the inventory on the specified side of the device.") public Object[] getAllStacks(Context context, Arguments args) { return WorldInventoryAnalytics.class.getAllStacks(this, context, args); } @Callback(doc = "function(side:number):string -- Get the the name of the inventory on the specified side of the device.") public Object[] getInventoryName(Context context, Arguments args) { return WorldInventoryAnalytics.class.getInventoryName(this, context, args); } @Callback(doc = "function(side:number, slot:number, dbAddress:string, dbSlot:number):boolean -- Store an item stack description in the specified slot of the database with the specified address.") public Object[] store(Context context, Arguments args) { return WorldInventoryAnalytics.class.store(this, context, args); } @Callback(doc = "function(facing:number, slot:number[, count:number[, fromSide:number]]):boolean -- Drops the selected item stack into the specified slot of an inventory.") public Object[] dropIntoSlot(Context context, Arguments args) { return InventoryWorldControlMk2.class.dropIntoSlot(this, context, args); } @Callback(doc = "function(facing:number, slot:number[, count:number[, fromSide:number]]):boolean -- Sucks items from the specified slot of an inventory.") public Object[] suckFromSlot(Context context, Arguments args) { return InventoryWorldControlMk2.class.suckFromSlot(this, context, args); } public World world() { return WorldAware.class.world((WorldAware)this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer((WorldAware)this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract((WorldAware)this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds((WorldAware)this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock((WorldAware)this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide((WorldAware)this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity((WorldAware)this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent((WorldAware)this, side); } @Callback(doc = "function([slot:number]):table -- Get a description of the stack in the specified slot or the selected slot.") public Object[] getStackInInternalSlot(Context context, Arguments args) { return InventoryAnalytics.class.getStackInInternalSlot(this, context, args); } @Callback(doc = "function(otherSlot:number):boolean -- Get whether the stack in the selected slot is equivalent to the item in the specified slot (have shared OreDictionary IDs).") public Object[] isEquivalentTo(Context context, Arguments args) { return InventoryAnalytics.class.isEquivalentTo(this, context, args); } @Callback(doc = "function(slot:number, dbAddress:string, dbSlot:number):boolean -- Store an item stack description in the specified slot of the database with the specified address.") public Object[] storeInternal(Context context, Arguments args) { return InventoryAnalytics.class.storeInternal(this, context, args); } @Callback(doc = "function(slot:number, dbAddress:string, dbSlot:number[, checkNBT:boolean=false]):boolean -- Compare an item in the specified slot with one in the database with the specified address.") public Object[] compareToDatabase(Context context, Arguments args) { return InventoryAnalytics.class.compareToDatabase(this, context, args); } public IndexedSeq<Object> insertionSlots() { return InventoryAware.class.insertionSlots((InventoryAware)this); } public int optSlot(Arguments args, int n) { return InventoryAware.class.optSlot((InventoryAware)this, args, n); } public Option<ItemStack> stackInSlot(int slot) { return InventoryAware.class.stackInSlot((InventoryAware)this, slot); } public li.cil.oc.common.tileentity.Robot host() { return this.host; } public Robot(li.cil.oc.common.tileentity.Robot host) { InventoryAware.class.$init$((InventoryAware)this); InventoryAnalytics.class.$init$(this); WorldAware.class.$init$((WorldAware)this); InventoryWorldControlMk2.class.$init$(this); WorldInventoryAnalytics.class.$init$(this); ItemInventoryControl.class.$init$(this); UpgradeInventoryController.Common$class.$init$(this);
/*  67 */       this.node = (Component)Network.newNode((Environment)this, Visibility.Network)
/*  68 */         .withComponent("inventory_controller", Visibility.Neighbors)
/*  69 */         .create(); }
/*     */      public Component node() {
/*     */       return this.node;
/*     */     } public BlockPosition position() {
/*  73 */       return BlockPosition$.MODULE$.apply((EnvironmentHost)host());
/*     */     } public InventoryProxy inventory() {
/*  75 */       return host().mainInventory();
/*     */     } public int selectedSlot() {
/*  77 */       return host().selectedSlot();
/*     */     } public void selectedSlot_$eq(int value) {
/*  79 */       host().setSelectedSlot(value);
/*     */     } public ForgeDirection checkSideForAction(Arguments args, int n) {
/*  81 */       return host().toGlobal(ExtendedArguments$.MODULE$.extendedArguments(args).checkSideForAction(n));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function():boolean -- Swaps the equipped tool with the content of the currently selected inventory slot.")
/*     */     public Object[] equip(Context context, Arguments args) {
/*  86 */       ItemStack equipped = host().func_70301_a(0);
/*  87 */       ItemStack selected = inventory().func_70301_a(selectedSlot());
/*  88 */       host().func_70299_a(0, selected);
/*  89 */       inventory().func_70299_a(selectedSlot(), equipped);
/*  90 */       return (inventory().func_70302_i_() > 0) ? package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true)
/*     */             
/*  92 */             })) : package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false) }));
/*     */     }
/*     */     @Callback(doc = "function([slot:number]):boolean -- Swaps the installed upgrade in the slot (1 by default) with the content of the currently selected inventory slot.")
/*     */     public Object[] installUpgrade(Context context, Arguments args) {
/*  96 */       if (inventory().func_70302_i_() > 0)
/*  97 */       { int slot = args.optInteger(0, 1);
/*  98 */         if (host().isContainerSlot(slot))
/*     */         
/* 100 */         { ItemStack selected = inventory().func_70301_a(selectedSlot());
/* 101 */           if (selected == null || host().func_94041_b(slot, selected))
/*     */           
/* 103 */           { ItemStack equipped = host().func_70301_a(slot);
/* 104 */             host().func_70299_a(slot, selected);
/* 105 */             inventory().func_70299_a(selectedSlot(), equipped); } else { return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "Invalid upgrade" })); }  } else { return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "not a container slot" })); }
/*     */          }
/*     */       else {  }
/* 108 */        return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false) }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(slot:number):string -- get upgrade container type at the given slot.")
/*     */     public Object[] getUpgradeContainerType(Context context, Arguments args) {
/* 113 */       int slot = args.checkInteger(0);
/* 114 */       if (host().isContainerSlot(slot))
/*     */       {
/* 116 */         return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { host().containerSlotType(slot) })); } 
/*     */       return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { "None" }));
/*     */     }
/*     */     @Callback(doc = "function(slot:number):number -- get upgrade container tier at the given slot.")
/*     */     public Object[] getUpgradeContainerTier(Context context, Arguments args) {
/* 121 */       int slot = args.checkInteger(0);
/* 122 */       if (host().isContainerSlot(slot))
/*     */       {
/* 124 */         return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToInteger(host().containerSlotTier(slot)) }));
/*     */       }
/*     */       return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToInteger(0) }));
/*     */     } }
/*     */ 
/*     */   
/*     */   public static interface Common extends DeviceInfo {
/*     */     Map<String, String> li$cil$oc$server$component$UpgradeInventoryController$Common$$deviceInfo();
/*     */     
/*     */     Map<String, String> getDeviceInfo();
/*     */   }
/*     */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\server\component\UpgradeInventoryController.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */