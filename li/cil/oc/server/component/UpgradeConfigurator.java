/*     */ package li.cil.oc.server.component;
/*     */ 
/*     */ import com.enderio.core.common.util.DyeColor;
/*     */ import crazypants.enderio.conduit.IConduitBundle;
/*     */ import crazypants.enderio.conduit.item.IItemConduit;
/*     */ import crazypants.enderio.conduit.liquid.AbstractEnderLiquidConduit;
/*     */ import crazypants.enderio.conduit.liquid.ILiquidConduit;
/*     */ import li.cil.oc.api.machine.Arguments;
/*     */ import li.cil.oc.api.machine.Callback;
/*     */ import li.cil.oc.api.machine.Context;
/*     */ import li.cil.oc.server.component.traits.WorldAware;
/*     */ import li.cil.oc.util.BlockPosition;
/*     */ import li.cil.oc.util.ExtendedArguments$;
/*     */ import net.minecraftforge.common.util.ForgeDirection;
/*     */ import net.minecraftforge.fluids.FluidStack;
/*     */ import scala.Function1;
/*     */ import scala.Option;
/*     */ import scala.Predef$;
/*     */ import scala.Predef$ArrowAssoc$;
/*     */ import scala.Serializable;
/*     */ import scala.Some;
/*     */ import scala.collection.Seq;
/*     */ import scala.collection.immutable.Map;
/*     */ import scala.reflect.ClassTag;
/*     */ import scala.runtime.AbstractFunction1;
/*     */ import scala.runtime.BoxesRunTime;
/*     */ 
/*     */ @ScalaSignature(bytes = "\006\001\rmx!B\001\003\021\003i\021aE+qOJ\fG-Z\"p]\032Lw-\036:bi>\024(BA\002\005\003%\031w.\0349p]\026tGO\003\002\006\r\00511/\032:wKJT!a\002\005\002\005=\034'BA\005\013\003\r\031\027\016\034\006\002\027\005\021A.[\002\001!\tqq\"D\001\003\r\025\001\"\001#\001\022\005M)\006o\032:bI\026\034uN\0344jOV\024\030\r^8s'\ty!\003\005\002\024-5\tACC\001\026\003\025\0318-\0317b\023\t9BC\001\004B]f\024VM\032\005\0063=!\tAG\001\007y%t\027\016\036 \025\00351q\001H\b\021\002\007\005QD\001\004D_6lwN\\\n\0047y1\003CA\020%\033\005\001#BA\021#\003\021a\027M\\4\013\003\r\nAA[1wC&\021Q\005\t\002\007\037\nTWm\031;\021\005\035bS\"\001\025\013\005%R\023A\0023sSZ,'O\003\002,\r\005\031\021\r]5\n\0055B#A\003#fm&\034W-\0238g_\")qf\007C\001a\0051A%\0338ji\022\"\022!\r\t\003'IJ!a\r\013\003\tUs\027\016\036\005\tkmA)\031!C\007m\005QA-\032<jG\026LeNZ8\026\003]\002B\001O\037@5\t\021H\003\002;w\005I\021.\\7vi\006\024G.\032\006\003yQ\t!bY8mY\026\034G/[8o\023\tq\024HA\002NCB\004\"a\b!\n\005\005\003#AB*ue&tw\r\003\005D7!\005\t\025)\0048\003-!WM^5dK&sgm\034\021\t\013\025[B\021\t$\002\033\035,G\017R3wS\016,\027J\0344p)\0059\005\003\002%L\0312k\021!\023\006\003\025\n\nA!\036;jY&\021a(\023\t\003\033Bs!a\005(\n\005=#\022A\002)sK\022,g-\003\002B#*\021q\n\006\004\005'>\001AKA\004BI\006\004H/\032:\024\013I+6L!6\021\005YKV\"A,\013\005aS\023A\0029sK\032\f'-\003\002[/\n\021R*\0318bO\026$WI\034<je>tW.\0328u!\taV,D\001\020\r\035qv\002%A\002\002}\023AbQ8oM&<WO]1u_J\034r!\030\na\003\007\013I\t\005\002]C\0329!m\004I\001\004\003\031'\001E\"p]\032Lw-\036:bi>\024()Y:f'\r\t'\003\032\t\003K\"l\021A\032\006\003O\n\ta\001\036:bSR\034\030BA5g\005)9vN\0357e\003^\f'/\032\005\006_\005$\t\001\r\005\006Y\006$\t!\\\001\nG>tG-^5u\003R$\"A\\>\021\007My\027/\003\002q)\t1q\n\035;j_:\004\"A]=\016\003MT!\001^;\002\017\r|g\016Z;ji*\021ao^\001\bK:$WM]5p\025\005A\030AC2sCjL\b/\0318ug&\021!p\035\002\017\023\016{g\016Z;ji\n+h\016\0327f\021\025a8\0161\001~\003!\001xn]5uS>t\007c\001@\002\0025\tqP\003\002K\r%\031\0211A@\003\033\tcwnY6Q_NLG/[8o\021\035\t9!\031C\001\003\023\tqb^5uQ&#X-\\\"p]\022,\030\016\036\013\007\003\027\t\t\"a\013\021\tM\tiAE\005\004\003\037!\"!B!se\006L\b\002CA\n\003\013\001\r!!\006\002\tMLG-\032\t\005\003/\t9#\004\002\002\032)\031!*a\007\013\t\005u\021qD\001\007G>lWn\0348\013\t\005\005\0221E\001\017[&tWm\031:bMR4wN]4f\025\t\t)#A\002oKRLA!!\013\002\032\tqai\034:hK\022K'/Z2uS>t\007\002CA\027\003\013\001\r!a\f\002\003\031\004raEA\031\003k\tY!C\002\0024Q\021\021BR;oGRLwN\\\031\021\t\005]\022QH\007\003\003sQ1!a\017t\003\021IG/Z7\n\t\005}\022\021\b\002\r\023&#X-\\\"p]\022,\030\016\036\005\b\003\007\nG\021AA#\003U9\030\016\0365F]\022,'O\0227vS\022\034uN\0343vSR$b!a\003\002H\005%\003\002CA\n\003\003\002\r!!\006\t\021\0055\022\021\ta\001\003\027\002raEA\031\003\033\nY\001\005\003\002P\005USBAA)\025\r\t\031f]\001\007Y&\fX/\0333\n\t\005]\023\021\013\002\033\003\n\034HO]1di\026sG-\032:MSF,\030\016Z\"p]\022,\030\016\036\005\b\0037\nG\021AA/\003A9\030\016\0365GYVLGmQ8oIVLG\017\006\004\002\f\005}\023\021\r\005\t\003'\tI\0061\001\002\026!A\021QFA-\001\004\t\031\007E\004\024\003c\t)'a\003\021\t\005=\023qM\005\005\003S\n\tF\001\bJ\031&\fX/\0333D_:$W/\033;\t\017\0055\024\r\"\001\002p\005ar/\033;i\023:\034X\017\\1uK\022\024V\rZ:u_:,7i\0348ek&$HCBA\006\003c\n\031\b\003\005\002\024\005-\004\031AA\013\021!\ti#a\033A\002\005U\004cB\n\0022\005]\0241\002\t\005\003s\ny(\004\002\002|)\031\021QP:\002\021I,Gm\035;p]\026LA!!!\002|\tI\022*\0238tk2\fG/\0323SK\022\034Ho\0348f\007>tG-^5u!\r)\027QQ\005\004\003\0173'AD*jI\026\024Vm\035;sS\016$X\r\032\t\004K\006-\025bAAGM\naa*\032;x_J\\\027i^1sK\")q&\030C\001a!9\0211S/\005\002\005U\025aF4fi\016{g\016Z;ji\016{gNZ5hkJ\fG/[8o)\031\tY!a&\002(\"A\021\021TAI\001\004\tY*A\004d_:$X\r\037;\021\t\005u\0251U\007\003\003?S1!!)+\003\035i\027m\0315j]\026LA!!*\002 \n91i\0348uKb$\b\002CAU\003#\003\r!a+\002\t\005\024xm\035\t\005\003;\013i+\003\003\0020\006}%!C!sOVlWM\034;tQ!\t\t*a-\002:\006m\006\003BAO\003kKA!a.\002 \nA1)\0317mE\006\0347.A\002e_\016\f#!!0\002i\032,hn\031;j_:D3/\0333fu9,XNY3sY\001\032wN\0343vSR$\025N]3di&|gN\017\021ok6\024WM]\025;i\006\024G.\032\021.[\001:U\r\036\021d_:$W/\033;!G>tg-[4ve\006$\030n\0348!CR\004C\017[3!gB,7-\0334jK\022\0043m\0348ek&$H)\033:fGRLwN\034\005\b\003\003lF\021AAb\003M\031X\r^%uK6\034uN\0343vSR\034u\016\\8s)\031\tY!!2\002H\"A\021\021TA`\001\004\tY\n\003\005\002*\006}\006\031AAVQ!\ty,a-\002:\006-\027EAAg\003u4WO\\2uS>t\007f]5eKjrW/\0342fe2\0023m\0348ek&$H)\033:fGRLwN\034\036!]Vl'-\032:-A%\034\030J\0349vij\022wn\0347fC:d\003eY8m_JT4\017\036:j]\036L#HY8pY\026\fg\016I\027.AM+G\017I5uK6\0043m\0348ek&$\b%\0338qkR|s.\036;qkR\0043m\0347pe\"9\021\021[/\005\002\005M\027\001H:fi&#X-\\\"p]\022,\030\016^(viB,H\017\025:j_JLG/\037\013\007\003\027\t).a6\t\021\005e\025q\032a\001\0037C\001\"!+\002P\002\007\0211\026\025\t\003\037\f\031,!/\002\\\006\022\021Q\\\001lMVt7\r^5p]\"\032\030\016Z3;]Vl'-\032:-A\r|g\016Z;ji\022K'/Z2uS>t'H\\;nE\026\024H\006\t9sS>\024\030\016^=;]Vl'-\032:*u\t|w\016\\3b]\002jS\006I*fi\002JG/Z7!G>tG-^5uA=,H\017];uAA\024\030n\034:jifDq!!9^\t\003\t\031/\001\013tKRLE/Z7D_:$W/\033;GS2$XM\035\013\007\003\027\t)/a:\t\021\005e\025q\034a\001\0037C\001\"!+\002`\002\007\0211\026\025\t\003?\f\031,!/\002l\006\022\021Q^\001\002~\031,hn\031;j_:D3/\0333fu9,XNY3sY\001\032wN\0343vSR$\025N]3di&|gN\017\021ok6\024WM\035\027!I\006$\030MY1tKj\0023\017\036:j]\036d\003\005\0322TY>$(H\\;nE\026\024H\006\t4jYR,'/\0238eKbTd.^7cKJd\003%[:J]B,HO\0172p_2,\027M\\\025;E>|G.Z1oA5j\003eU3uA%$X-\034\021ge>l\007\005Z1uC\n\f7/\032\021tY>$\b\005^8!G>tG-^5uA%t\007/\036;!_J\004s.\036;qkR\004c-\0337uKJDq!!=^\t\003\t\0310\001\017tKRLE/Z7D_:$W/\033;D_:tWm\031;j_:lu\016Z3\025\r\005-\021Q_A|\021!\tI*a<A\002\005m\005\002CAU\003_\004\r!a+)\021\005=\0301WA]\003w\f#!!@\002\003;1WO\\2uS>t\007f]5eKjrW/\0342fe2\0023m\0348ek&$H)\033:fGRLwN\034\036ok6\024WM\035\027![>$WMO:ue&tw-\013\036c_>dW-\0318![5\0023+\032;!SR,W\016I2p]\022,\030\016\036\021d_:tWm\031;j_:\004Sn\0343fA!JejX(V)2Je\nU+UY=+F\013U+UY\021K5+\021\"M\013\022ccj\024+`'\026#\026\006C\004\003\002u#\tAa\001\002KM,G/\023;f[\016{g\016Z;ji\026CHO]1di&|gNU3egR|g.Z\"pY>\024HCBA\006\005\013\0219\001\003\005\002\032\006}\b\031AAN\021!\tI+a@A\002\005-\006\006CA\000\003g\013ILa\003\"\005\t5\021!\0374v]\016$\030n\0348)g&$WM\0178v[\n,'\017\f\021d_:$W/\033;ESJ,7\r^5p]jrW/\0342fe2\0023m\0347pej\032HO]5oO&R$m\\8mK\006t\007%L\027!'\026$\b%\033;f[\002\032wN\0343vSR\004S\r\037;sC\016$\030n\0348!e\026$7\017^8oK\002\032\030n\0328bY\002\032w\016\\8s\021\035\021\t\"\030C\001\005'\tAe]3u\023R,WnQ8oIVLG/\022=ue\006\034G/[8o%\026$7\017^8oK6{G-\032\013\007\003\027\021)Ba\006\t\021\005e%q\002a\001\0037C\001\"!+\003\020\001\007\0211\026\025\t\005\037\t\031,!/\003\034\005\022!QD\001\002 \031,hn\031;j_:D3/\0333fu9,XNY3sY\001\032wN\0343vSR$\025N]3di&|gN\0178v[\n,'\017\f\021n_\022,'h\035;sS:<\027F\0172p_2,\027M\034\021.[\001\032V\r\036\021ji\026l\007eY8oIVLG\017I3yiJ\f7\r^5p]\002\022X\rZ:u_:,\007e]5h]\006d\007%\\8eK\002B\023j\022(P%\026csJ\024\027P\r\032cc*\022,F%&r\003\005C\004\003\"u#\tAa\t\0027M,G/\0228eKJd\025.];jI\016{g\016Z;ji\032KG\016^3s)\031\tYA!\n\003(!A\021\021\024B\020\001\004\tY\n\003\005\002*\n}\001\031AAVQ!\021y\"a-\002:\n-\022E\001B\027\003\005\rc-\0368di&|g\016K:jI\026Td.^7cKJd\003eY8oIVLG\017R5sK\016$\030n\0348;]Vl'-\032:-A\031dW/\0333;gR\024\030N\\4-A\td\027mY6mSN$(HY8pY\026\fg\016\f\021jg&s\007/\036;;E>|G.Z1o72\002c-\0337uKJLe\016Z3yu9,XNY3s;&R$m\\8mK\006t\007%L\027!'\026$\b%\0228eKJ\004C.[9vS\022\0043m\0348ek&$\bEZ5mi\026\024\bb\002B\031;\022\005!1G\001\033g\026$XI\0343fe2K\027/^5e\007>tG-^5u\007>dwN\035\013\007\003\027\021)Da\016\t\021\005e%q\006a\001\0037C\001\"!+\0030\001\007\0211\026\025\t\005_\t\031,!/\003<\005\022!QH\001\002\032\031,hn\031;j_:D3/\0333fu9,XNY3sY\001\032wN\0343vSR$\025N]3di&|gN\0178v[\n,'\017\f\021jg&s\007/\036;;E>|G.Z1oY\001\032w\016\\8suM$(/\0338hSi\022wn\0347fC:\004S&\f\021TKR\0043i\0347pe\0022wN\035\021F]\022,'\017\t7jcVLG\rI2p]\022,\030\016\036\021j]B,H\017I8sA=,H\017];u]!9!\021I/\005\002\t\r\023AH:fi2K\027/^5e\007>tG-^5u\007>tg.Z2uS>tWj\0343f)\031\tYA!\022\003H!A\021\021\024B \001\004\tY\n\003\005\002*\n}\002\031AAVQ!\021y$a-\002:\n-\023E\001B'\003\005\005b-\0368di&|g\016K:jI\026Td.^7cKJd\003eY8oIVLG\017R5sK\016$\030n\0348;]Vl'-\032:-A5|G-\032\036tiJLgnZ\025;E>|G.Z1oA5j\003eU3uA1L\027/^5eA\r|g\016Z;ji\002\032wN\0348fGRLwN\034\021n_\022,\007\005K%O?>+F\013L%O!V#FfT+U!V#F\006R%T\003\ncU\t\022\027O\037R{6+\022+*\021\035\021\t&\030C\001\005'\nqe]3u\031&\fX/\0333D_:$W/\033;FqR\024\030m\031;j_:\024V\rZ:u_:,7i\0347peR1\0211\002B+\005/B\001\"!'\003P\001\007\0211\024\005\t\003S\023y\0051\001\002,\"B!qJAZ\003s\023Y&\t\002\003^\005Qh-\0368di&|g\016K:jI\026Td.^7cKJd\003eY8oIVLG\017R5sK\016$\030n\0348;]Vl'-\032:-A\r|Gn\034:;gR\024\030N\\4*u\t|w\016\\3b]\002jS\006I*fi\0022G.^5eA\r|g\016Z;ji\002*\007\020\036:bGRLwN\034\021sK\022\034Ho\0348fAMLwM\\1mA\r|Gn\034:\t\017\t\005T\f\"\001\003d\00513/\032;MSF,\030\016Z\"p]\022,\030\016^#yiJ\f7\r^5p]J+Gm\035;p]\026lu\016Z3\025\r\005-!Q\rB4\021!\tIJa\030A\002\005m\005\002CAU\005?\002\r!a+)\021\t}\0231WA]\005W\n#A!\034\002\003S2WO\\2uS>t\007f]5eKjrW/\0342fe2\0023m\0348ek&$H)\033:fGRLwN\034\036ok6\024WM\035\027![>$WMO:ue&tw-\013\036c_>dW-\0318![5\0023+\032;!M2,\030\016\032\021d_:$W/\033;!Kb$(/Y2uS>t\007E]3egR|g.\032\021tS\036t\027\r\034\021n_\022,\007%\031;!g&$W\r\t4bG&tw\rI2p]\022,\030\016\036#je\026\034G/[8o]\001jw\016Z3;Q%;ej\024*FY=sEf\024$GY9+e+\022**\021\035\021\t(\030C\001\005g\nQd]3u%\026$7\017^8oK\016{g\016Z;jiNKwM\\1m\007>dwN\035\013\007\003\027\021)Ha\036\t\021\005e%q\016a\001\0037C\001\"!+\003p\001\007\0211\026\025\t\005_\n\031,!/\003|\005\022!QP\001\002\024\031,hn\031;j_:D3/\0333fu9,XNY3sY\001\032wN\0343vSR$\025N]3di&|gN\0178v[\n,'\017\f\021d_2|'OO:ue&tw-\013\036c_>dW-\0318![5\0023+\032;!e\026$7\017^8oK\002\032wN\0343vSR\0043/[4oC2\0043m\0347pe\002\nG\017I:jI\026\004c-Y2j]\036\0043m\0348ek&$H)\033:fGRLwN\034\005\b\005\003kF\021\001BB\003\001\032X\r\036*fIN$xN\\3D_:$W/\033;TS\036t\027\r\\*ue\026tw\r\0365\025\r\005-!Q\021BD\021!\tIJa A\002\005m\005\002CAU\005\002\r!a+)\021\t}\0241WA]\005\027\013#A!$\002\003[1WO\\2uS>t\007f]5eKjrW/\0342fe2\0023m\0348ek&$H)\033:fGRLwN\034\036ok6\024WM\035\027!gR\024XM\\4uQj\022wn\0347fC:L#HY8pY\026\fg\016I\027.AM+G\017\t:fIN$xN\\3!G>tG-^5uAMLwM\\1mAM$(/\0328hi\"t\003\005\013;sk\026\004S\bI:ue>tw\rI:jO:\fG\016\f\021gC2\034X\rI\037!o\026\f7.\013\005\b\005#kF\021\002BJ\003\035\031wN\034<feR$bA!&\003\032\nu\005#B'\003\030J\021\022B\001 R\021!\021YJa$A\002\005U\021a\0013je\"A!q\024BH\001\004\t)$\001\002jG\"9!\021S/\005\n\t\rFC\002BK\005K\0239\013\003\005\003\034\n\005\006\031AA\013\021!\021yJ!)A\002\t%\006\003BA=\005WKAA!,\002|\t\001\022JU3egR|g.Z\"p]\022,\030\016\036\005\b\005#kF\021\002BY)\031\021)Ja-\0036\"A!1\024BX\001\004\t)\002\003\005\003 \n=\006\031AA3\021\035\021\t*\030C\005\005s#BA!&\003<\"A\021Q\006B\\\001\004\021i\f\005\003\002P\t}\026\002\002Ba\003#\0221B\0227vS\0224\025\016\034;fe\"9!\021S/\005\n\t\025G\003\002BK\005\017D\001\"!\f\003D\002\007!\021\032\t\005\005\027\024\t.\004\002\003N*!!qZA\035\003\0311\027\016\034;fe&!!1\033Bg\005-I\025\n^3n\r&dG/\032:\021\005q[\002B\003Bm%\n\025\r\021\"\001\003\\\006!\001n\\:u+\t\021i\016\005\003\003`\n\025XB\001Bq\025\r\021\031OK\001\b]\026$xo\034:l\023\021\0219O!9\003\037\025sg/\033:p]6,g\016\036%pgRD!Ba;S\005\003\005\013\021\002Bo\003\025Awn\035;!\021\031I\"\013\"\001\003pR!!\021\037Bz!\ta&\013\003\005\003Z\n5\b\031\001Bo\021%\0219P\025b\001\n\003\022I0\001\003o_\022,WC\001B~!\021\021yN!@\n\t\t}(\021\035\002\005\035>$W\r\003\005\004\004I\003\013\021\002B~\003\025qw\016Z3!\021\031a(\013\"\021\004\bU\tQ\020C\004\004\fI#\tf!\004\002%\rDWmY6TS\022,gi\034:BGRLwN\034\013\007\003+\031ya!\005\t\021\005%6\021\002a\001\003WC\001ba\005\004\n\001\0071QC\001\002]B\0311ca\006\n\007\reACA\002J]R4aa!\b\020\001\r}!!\002#s_:,7CBB\016+n\023)\016C\006\003Z\016m!Q1A\005\002\r\rRCAB\023%\031\0319C!8\004,\03111\021F\b\001\007K\021A\002\020:fM&tW-\\3oiz\002Ba!\f\00445\0211q\006\006\004\007cQ\023\001C5oi\026\024h.\0317\n\t\rU2q\006\002\006\003\036,g\016\036\005\f\005W\034YB!A!\002\023\031)\003C\004\032\0077!\taa\017\025\t\ru2q\b\t\0049\016m\001\002\003Bm\007s\001\ra!\021\023\r\r\r#Q\\B\026\r\031\031Ic\004\001\004B!Q!q_B\016\005\004%\tE!?\t\023\r\r11\004Q\001\n\tm\bb\002?\004\034\021\0053q\001\005\t\007\027\031Y\002\"\025\004NQ1\021QCB(\007#B\001\"!+\004L\001\007\0211\026\005\t\007'\031Y\0051\001\004\026\03111QK\b\001\007/\022QAU8c_R\034\002ba\025V7\016e#Q\033\t\0049\016mc!CB/\037A\005\031\021AB0\005E\021vNY8u\007>tg-[4ve\006$xN]\n\013\0077\022\002-a!\002\n\016\005\004cA3\004d%\0311Q\r4\003\035%sg/\0328u_JL\030i^1sK\"1qfa\027\005\002AB\001ba\033\004\\\021\0051QN\001\025e\026\004H.Y2f\007>tG-^5u\r&dG/\032:\025\r\005-1qNB9\021!\tIj!\033A\002\005m\005\002CAU\007S\002\r!a+)\021\r%\0241WA]\007k\n#aa\036\002\003W1WO\\2uS>t\007f]5eKjrW/\0342fe2\0023m\0348ek&$H)\033:fGRLwN\034\036ok6\024WM\035\027!S:\004X\017\036\036c_>dW-\0318*u\t|w\016\\3b]\002jS\006\t*fa2\f7-\032\021ji\026l\007eY8oIVLG\017I5oaV$\be\034:!_V$\b/\036;!M&dG/\032:!o&$\b\016\t;iK\0022\027\016\034;fe\002Jg\016I:fY\026\034G/\0323!g2|G\017C\006\003Z\016M#Q1A\005\002\rmTCAB?%\031\031yH!8\004\002\03211\021F\b\001\007{\002Baa!\004\f6\0211Q\021\006\005\007\017\033I)\001\006uS2,WM\034;jifT1!!\b\007\023\021\031)f!\"\t\027\t-81\013B\001B\003%1Q\020\005\b3\rMC\021ABI)\021\031\031j!&\021\007q\033\031\006\003\005\003Z\016=\005\031ABL%\031\031IJ!8\004\002\03211\021F\b\001\007/C!Ba>\004T\t\007I\021\tB}\021%\031\031aa\025!\002\023\021Y\020C\004}\007'\"\tea\002\t\021\r\r61\013C!\007K\013\021\"\0338wK:$xN]=\026\005\r\035\006\003BBU\007ck!aa+\013\t\r\r6Q\026\006\005\007_\013\031#A\005nS:,7M]1gi&!11WBV\005)I\025J\034<f]R|'/\037\005\t\007o\033\031\006\"\021\004:\006a1/\0327fGR,Gm\0257piV\0211Q\003\005\t\007{\033\031\006\"\021\004@\006\0012/\0327fGR,Gm\0257pi~#S-\035\013\004c\r\005\007\002CBb\007w\003\ra!\006\002\013Y\fG.^3\t\021\r-11\013C)\007\017$b!!\006\004J\016-\007\002CAU\007\013\004\r!a+\t\021\rM1Q\031a\001\007+1aaa4\020\001\rE'aD'jGJ|7m\0348ue>dG.\032:\024\r\r5Wk\027Bk\021-\021In!4\003\006\004%\ta!6\026\005\r]'CBBm\005;\034YN\002\004\004*=\0011q\033\t\005\007\007\033i.\003\003\004P\016\025\005b\003Bv\007\033\024\t\021)A\005\007/Dq!GBg\t\003\031\031\017\006\003\004f\016\035\bc\001/\004N\"A!\021\\Bq\001\004\031IO\005\004\004l\nu71\034\004\007\007Sy\001a!;\t\025\t]8Q\032b\001\n\003\022I\020C\005\004\004\r5\007\025!\003\003|\"9Ap!4\005B\r\035\001\002CB\006\007\033$\tf!>\025\r\005U1q_B}\021!\tIka=A\002\005-\006\002CB\n\007g\004\ra!\006")
/*     */ public final class UpgradeConfigurator {
/*     */   public static abstract class Common$class { public static void $init$(UpgradeConfigurator.Common $this) {}
/*     */     
/*     */     public static final Map li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo(UpgradeConfigurator.Common $this) {
/*  33 */       (new Tuple2[4])[0] = Predef$ArrowAssoc$.MODULE$
/*  34 */         .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("class"), "generic");
/*  35 */       (new Tuple2[4])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("description"), "External device configurator");
/*  36 */       (new Tuple2[4])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("vendor"), "MightyPirates GmbH & Co. KG");
/*  37 */       (new Tuple2[4])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("product"), "Sonic Screwdriver");
/*     */       return (Map)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[4]));
/*     */     } public static Map getDeviceInfo(UpgradeConfigurator.Common $this) {
/*  40 */       return WrapAsJava$.MODULE$.mapAsJavaMap((Map)$this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo());
/*     */     } }
/*     */   public static class Adapter extends ManagedEnvironment implements Configurator, Common { private final EnvironmentHost host; private final Node node; private final Map<String, String> li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo; private volatile boolean bitmap$0;
/*  43 */     private Map li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo = UpgradeConfigurator.Common$class.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo : li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return UpgradeConfigurator.Common$class.getDeviceInfo(this); } @Callback(doc = "function(side:number, conduitDirection: number):table -- Get conduit configuration at the specified conduitDirection") public Object[] getConduitConfiguration(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.getConduitConfiguration(this, context, args); } @Callback(doc = "function(side:number, conduitDirection: number, isInput:boolean, color:string):boolean -- Set item conduit input/output color") public Object[] setItemConduitColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, priority:number):boolean -- Set item conduit output priority") public Object[] setItemConduitOutputPriority(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitOutputPriority(this, context, args); } @Callback(doc = "function(side:number, conduitDirection: number, database: string, dbSlot:number, filterIndex:number, isInput:boolean):boolean -- Set item from database slot to conduit input or output filter") public Object[] setItemConduitFilter(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitFilter(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)") public Object[] setItemConduitConnectionMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitConnectionMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set item conduit extraction redstone signal color") public Object[] setItemConduitExtractionRedstoneColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitExtractionRedstoneColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit extraction redstone signal mode (IGNORE,ON,OFF,NEVER). ") public Object[] setItemConduitExtractionRedstoneMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitExtractionRedstoneMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, fluid:string, blacklist:boolean, isInput:boolean[, filterIndex:number]):boolean -- Set Ender liquid conduit filter") public Object[] setEnderLiquidConduitFilter(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setEnderLiquidConduitFilter(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, isInput:boolean, color:string):boolean -- Set Color for Ender liquid conduit input or output.") public Object[] setEnderLiquidConduitColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setEnderLiquidConduitColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set liquid conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)") public Object[] setLiquidConduitConnectionMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitConnectionMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set fluid conduit extraction redstone signal color") public Object[] setLiquidConduitExtractionRedstoneColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitExtractionRedstoneColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set fluid conduit extraction redstone signal mode at side facing conduitDirection. mode:(IGNORE,ON,OFF,NEVER)") public Object[] setLiquidConduitExtractionRedstoneMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitExtractionRedstoneMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set redstone conduit signal color at side facing conduitDirection") public Object[] setRedstoneConduitSignalColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setRedstoneConduitSignalColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, strength:boolean):boolean -- Set redstone conduit signal strength. (true = strong signal, false = weak)") public Object[] setRedstoneConduitSignalStrength(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setRedstoneConduitSignalStrength(this, context, args); } public Option<IConduitBundle> conduitAt(BlockPosition position) { return UpgradeConfigurator.ConfiguratorBase$class.conduitAt(this, position); } public Object[] withItemConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withItemConduit(this, side, f); } public Object[] withEnderFluidConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withEnderFluidConduit(this, side, f); } public Object[] withFluidConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withFluidConduit(this, side, f); } public Object[] withInsulatedRedstoneConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withInsulatedRedstoneConduit(this, side, f); } public World world() { return WorldAware.class.world(this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer(this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract(this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds(this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock(this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide(this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity(this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent(this, side); } public EnvironmentHost host() { return this.host; } public Adapter(EnvironmentHost host) { WorldAware.class.$init$(this); UpgradeConfigurator.ConfiguratorBase$class.$init$(this); UpgradeConfigurator.Configurator$class.$init$(this); UpgradeConfigurator.Common$class.$init$(this);
/*  44 */       this.node = Network.newNode((Environment)this, Visibility.Network)
/*  45 */         .withComponent("configurator", Visibility.Network)
/*  46 */         .create(); }
/*     */     public Node node() { return this.node; }
/*  48 */     public BlockPosition position() { return BlockPosition$.MODULE$.apply(host()); } public ForgeDirection checkSideForAction(Arguments args, int n) {
/*  49 */       return ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(n);
/*     */     } }
/*     */   public static class Drone extends ManagedEnvironment implements Configurator, Common { private final Agent host; private final Node node; private final Map<String, String> li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo; private volatile boolean bitmap$0;
/*  52 */     private Map li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo = UpgradeConfigurator.Common$class.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo : li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return UpgradeConfigurator.Common$class.getDeviceInfo(this); } @Callback(doc = "function(side:number, conduitDirection: number):table -- Get conduit configuration at the specified conduitDirection") public Object[] getConduitConfiguration(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.getConduitConfiguration(this, context, args); } @Callback(doc = "function(side:number, conduitDirection: number, isInput:boolean, color:string):boolean -- Set item conduit input/output color") public Object[] setItemConduitColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, priority:number):boolean -- Set item conduit output priority") public Object[] setItemConduitOutputPriority(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitOutputPriority(this, context, args); } @Callback(doc = "function(side:number, conduitDirection: number, database: string, dbSlot:number, filterIndex:number, isInput:boolean):boolean -- Set item from database slot to conduit input or output filter") public Object[] setItemConduitFilter(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitFilter(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)") public Object[] setItemConduitConnectionMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitConnectionMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set item conduit extraction redstone signal color") public Object[] setItemConduitExtractionRedstoneColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitExtractionRedstoneColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit extraction redstone signal mode (IGNORE,ON,OFF,NEVER). ") public Object[] setItemConduitExtractionRedstoneMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitExtractionRedstoneMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, fluid:string, blacklist:boolean, isInput:boolean[, filterIndex:number]):boolean -- Set Ender liquid conduit filter") public Object[] setEnderLiquidConduitFilter(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setEnderLiquidConduitFilter(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, isInput:boolean, color:string):boolean -- Set Color for Ender liquid conduit input or output.") public Object[] setEnderLiquidConduitColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setEnderLiquidConduitColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set liquid conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)") public Object[] setLiquidConduitConnectionMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitConnectionMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set fluid conduit extraction redstone signal color") public Object[] setLiquidConduitExtractionRedstoneColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitExtractionRedstoneColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set fluid conduit extraction redstone signal mode at side facing conduitDirection. mode:(IGNORE,ON,OFF,NEVER)") public Object[] setLiquidConduitExtractionRedstoneMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitExtractionRedstoneMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set redstone conduit signal color at side facing conduitDirection") public Object[] setRedstoneConduitSignalColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setRedstoneConduitSignalColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, strength:boolean):boolean -- Set redstone conduit signal strength. (true = strong signal, false = weak)") public Object[] setRedstoneConduitSignalStrength(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setRedstoneConduitSignalStrength(this, context, args); } public Option<IConduitBundle> conduitAt(BlockPosition position) { return UpgradeConfigurator.ConfiguratorBase$class.conduitAt(this, position); } public Object[] withItemConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withItemConduit(this, side, f); } public Object[] withEnderFluidConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withEnderFluidConduit(this, side, f); } public Object[] withFluidConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withFluidConduit(this, side, f); } public Object[] withInsulatedRedstoneConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withInsulatedRedstoneConduit(this, side, f); } public World world() { return WorldAware.class.world(this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer(this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract(this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds(this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock(this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide(this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity(this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent(this, side); } public Agent host() { return this.host; } public Drone(Agent host) { WorldAware.class.$init$(this); UpgradeConfigurator.ConfiguratorBase$class.$init$(this); UpgradeConfigurator.Configurator$class.$init$(this); UpgradeConfigurator.Common$class.$init$(this);
/*  53 */       this.node = Network.newNode((Environment)this, Visibility.Network)
/*  54 */         .withComponent("configurator", Visibility.Neighbors)
/*  55 */         .create(); }
/*     */     public Node node() { return this.node; }
/*  57 */     public BlockPosition position() { return BlockPosition$.MODULE$.apply((EnvironmentHost)host()); } public ForgeDirection checkSideForAction(Arguments args, int n) {
/*  58 */       return ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(n);
/*     */     } }
/*     */   public static class Robot extends ManagedEnvironment implements Configurator, RobotConfigurator, Common { private final li.cil.oc.common.tileentity.Robot host; private final Node node; private final Map<String, String> li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo; private volatile boolean bitmap$0;
/*  61 */     private Map li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo = UpgradeConfigurator.Common$class.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo : li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return UpgradeConfigurator.Common$class.getDeviceInfo(this); } @Callback(doc = "function(side:number, conduitDirection:number, input:boolean):boolean -- Replace item conduit input or output filter with the filter in selected slot") public Object[] replaceConduitFilter(Context context, Arguments args) { return UpgradeConfigurator.RobotConfigurator$class.replaceConduitFilter(this, context, args); } public IndexedSeq<Object> insertionSlots() { return InventoryAware.class.insertionSlots(this); } public int optSlot(Arguments args, int n) { return InventoryAware.class.optSlot(this, args, n); } public Option<ItemStack> stackInSlot(int slot) { return InventoryAware.class.stackInSlot(this, slot); } @Callback(doc = "function(side:number, conduitDirection: number):table -- Get conduit configuration at the specified conduitDirection") public Object[] getConduitConfiguration(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.getConduitConfiguration(this, context, args); } @Callback(doc = "function(side:number, conduitDirection: number, isInput:boolean, color:string):boolean -- Set item conduit input/output color") public Object[] setItemConduitColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, priority:number):boolean -- Set item conduit output priority") public Object[] setItemConduitOutputPriority(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitOutputPriority(this, context, args); } @Callback(doc = "function(side:number, conduitDirection: number, database: string, dbSlot:number, filterIndex:number, isInput:boolean):boolean -- Set item from database slot to conduit input or output filter") public Object[] setItemConduitFilter(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitFilter(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)") public Object[] setItemConduitConnectionMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitConnectionMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set item conduit extraction redstone signal color") public Object[] setItemConduitExtractionRedstoneColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitExtractionRedstoneColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit extraction redstone signal mode (IGNORE,ON,OFF,NEVER). ") public Object[] setItemConduitExtractionRedstoneMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitExtractionRedstoneMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, fluid:string, blacklist:boolean, isInput:boolean[, filterIndex:number]):boolean -- Set Ender liquid conduit filter") public Object[] setEnderLiquidConduitFilter(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setEnderLiquidConduitFilter(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, isInput:boolean, color:string):boolean -- Set Color for Ender liquid conduit input or output.") public Object[] setEnderLiquidConduitColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setEnderLiquidConduitColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set liquid conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)") public Object[] setLiquidConduitConnectionMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitConnectionMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set fluid conduit extraction redstone signal color") public Object[] setLiquidConduitExtractionRedstoneColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitExtractionRedstoneColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set fluid conduit extraction redstone signal mode at side facing conduitDirection. mode:(IGNORE,ON,OFF,NEVER)") public Object[] setLiquidConduitExtractionRedstoneMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitExtractionRedstoneMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set redstone conduit signal color at side facing conduitDirection") public Object[] setRedstoneConduitSignalColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setRedstoneConduitSignalColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, strength:boolean):boolean -- Set redstone conduit signal strength. (true = strong signal, false = weak)") public Object[] setRedstoneConduitSignalStrength(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setRedstoneConduitSignalStrength(this, context, args); } public Option<IConduitBundle> conduitAt(BlockPosition position) { return UpgradeConfigurator.ConfiguratorBase$class.conduitAt(this, position); } public Object[] withItemConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withItemConduit(this, side, f); } public Object[] withEnderFluidConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withEnderFluidConduit(this, side, f); } public Object[] withFluidConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withFluidConduit(this, side, f); } public Object[] withInsulatedRedstoneConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withInsulatedRedstoneConduit(this, side, f); } public World world() { return WorldAware.class.world(this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer(this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract(this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds(this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock(this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide(this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity(this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent(this, side); } public li.cil.oc.common.tileentity.Robot host() { return this.host; } public Robot(li.cil.oc.common.tileentity.Robot host) { WorldAware.class.$init$(this); UpgradeConfigurator.ConfiguratorBase$class.$init$(this); UpgradeConfigurator.Configurator$class.$init$(this); InventoryAware.class.$init$(this); UpgradeConfigurator.RobotConfigurator$class.$init$(this); UpgradeConfigurator.Common$class.$init$(this);
/*  62 */       this.node = Network.newNode((Environment)this, Visibility.Network)
/*  63 */         .withComponent("configurator", Visibility.Neighbors)
/*  64 */         .create(); }
/*     */     public Node node() { return this.node; }
/*  66 */     public BlockPosition position() { return BlockPosition$.MODULE$.apply((EnvironmentHost)host()); }
/*  67 */     public IInventory inventory() { return (IInventory)host().mainInventory(); }
/*  68 */     public int selectedSlot() { return host().selectedSlot(); }
/*  69 */     public void selectedSlot_$eq(int value) { host().setSelectedSlot(value); } public ForgeDirection checkSideForAction(Arguments args, int n) {
/*  70 */       return host().toGlobal(ExtendedArguments$.MODULE$.extendedArguments(args).checkSideForAction(n));
/*     */     } }
/*     */   public static class Microcontroller extends ManagedEnvironment implements Configurator, Common { private final li.cil.oc.common.tileentity.Microcontroller host; private final Node node; private final Map<String, String> li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo; private volatile boolean bitmap$0;
/*  73 */     private Map li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo$lzycompute() { synchronized (this) { if (!this.bitmap$0) { this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo = UpgradeConfigurator.Common$class.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo(this); this.bitmap$0 = true; }  return this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo; }  } public final Map<String, String> li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo() { return this.bitmap$0 ? this.li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo : li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo$lzycompute(); } public Map<String, String> getDeviceInfo() { return UpgradeConfigurator.Common$class.getDeviceInfo(this); } @Callback(doc = "function(side:number, conduitDirection: number):table -- Get conduit configuration at the specified conduitDirection") public Object[] getConduitConfiguration(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.getConduitConfiguration(this, context, args); } @Callback(doc = "function(side:number, conduitDirection: number, isInput:boolean, color:string):boolean -- Set item conduit input/output color") public Object[] setItemConduitColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, priority:number):boolean -- Set item conduit output priority") public Object[] setItemConduitOutputPriority(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitOutputPriority(this, context, args); } @Callback(doc = "function(side:number, conduitDirection: number, database: string, dbSlot:number, filterIndex:number, isInput:boolean):boolean -- Set item from database slot to conduit input or output filter") public Object[] setItemConduitFilter(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitFilter(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)") public Object[] setItemConduitConnectionMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitConnectionMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set item conduit extraction redstone signal color") public Object[] setItemConduitExtractionRedstoneColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitExtractionRedstoneColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit extraction redstone signal mode (IGNORE,ON,OFF,NEVER). ") public Object[] setItemConduitExtractionRedstoneMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setItemConduitExtractionRedstoneMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, fluid:string, blacklist:boolean, isInput:boolean[, filterIndex:number]):boolean -- Set Ender liquid conduit filter") public Object[] setEnderLiquidConduitFilter(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setEnderLiquidConduitFilter(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, isInput:boolean, color:string):boolean -- Set Color for Ender liquid conduit input or output.") public Object[] setEnderLiquidConduitColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setEnderLiquidConduitColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set liquid conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)") public Object[] setLiquidConduitConnectionMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitConnectionMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set fluid conduit extraction redstone signal color") public Object[] setLiquidConduitExtractionRedstoneColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitExtractionRedstoneColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set fluid conduit extraction redstone signal mode at side facing conduitDirection. mode:(IGNORE,ON,OFF,NEVER)") public Object[] setLiquidConduitExtractionRedstoneMode(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setLiquidConduitExtractionRedstoneMode(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set redstone conduit signal color at side facing conduitDirection") public Object[] setRedstoneConduitSignalColor(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setRedstoneConduitSignalColor(this, context, args); } @Callback(doc = "function(side:number, conduitDirection:number, strength:boolean):boolean -- Set redstone conduit signal strength. (true = strong signal, false = weak)") public Object[] setRedstoneConduitSignalStrength(Context context, Arguments args) { return UpgradeConfigurator.Configurator$class.setRedstoneConduitSignalStrength(this, context, args); } public Option<IConduitBundle> conduitAt(BlockPosition position) { return UpgradeConfigurator.ConfiguratorBase$class.conduitAt(this, position); } public Object[] withItemConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withItemConduit(this, side, f); } public Object[] withEnderFluidConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withEnderFluidConduit(this, side, f); } public Object[] withFluidConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withFluidConduit(this, side, f); } public Object[] withInsulatedRedstoneConduit(ForgeDirection side, Function1 f) { return UpgradeConfigurator.ConfiguratorBase$class.withInsulatedRedstoneConduit(this, side, f); } public World world() { return WorldAware.class.world(this); } public EntityPlayer fakePlayer() { return WorldAware.class.fakePlayer(this); } public boolean mayInteract(BlockPosition blockPos, ForgeDirection face) { return WorldAware.class.mayInteract(this, blockPos, face); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBounds(AxisAlignedBB bounds, ClassTag evidence$1) { return WorldAware.class.entitiesInBounds(this, bounds, evidence$1); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesInBlock(BlockPosition blockPos, ClassTag evidence$2) { return WorldAware.class.entitiesInBlock(this, blockPos, evidence$2); } public <Type extends net.minecraft.entity.Entity> Buffer<Type> entitiesOnSide(ForgeDirection side, ClassTag evidence$3) { return WorldAware.class.entitiesOnSide(this, side, evidence$3); } public <Type extends net.minecraft.entity.Entity> Option<Type> closestEntity(ForgeDirection side, ClassTag evidence$4) { return WorldAware.class.closestEntity(this, side, evidence$4); } public Tuple2<Object, String> blockContent(ForgeDirection side) { return WorldAware.class.blockContent(this, side); } public li.cil.oc.common.tileentity.Microcontroller host() { return this.host; } public Microcontroller(li.cil.oc.common.tileentity.Microcontroller host) { WorldAware.class.$init$(this); UpgradeConfigurator.ConfiguratorBase$class.$init$(this); UpgradeConfigurator.Configurator$class.$init$(this); UpgradeConfigurator.Common$class.$init$(this);
/*  74 */       this.node = Network.newNode((Environment)this, Visibility.Network)
/*  75 */         .withComponent("configurator", Visibility.Neighbors)
/*  76 */         .create(); }
/*     */     public Node node() { return this.node; }
/*  78 */     public BlockPosition position() { return BlockPosition$.MODULE$.apply((EnvironmentHost)host()); } public ForgeDirection checkSideForAction(Arguments args, int n) {
/*  79 */       return host().toLocal(ExtendedArguments$.MODULE$.extendedArguments(args).checkSideForAction(n));
/*     */     } }
/*     */   
/*     */   public static abstract class ConfiguratorBase$class { public static void $init$(UpgradeConfigurator.ConfiguratorBase $this) {}
/*     */     
/*     */     public static Option conduitAt(UpgradeConfigurator.ConfiguratorBase $this, BlockPosition position) {
/*  85 */       Option option = position.world();
/*  86 */       if (option instanceof Some) { Some some = (Some)option; World world = (World)some.x(); TileEntity tileEntity = world.func_147438_o(position.x(), position.y(), position.z());
/*  87 */         if (tileEntity instanceof IConduitBundle) { TileEntity tileEntity1 = tileEntity; Some some2 = new Some(tileEntity1); Some some1 = some2; }
/*     */          throw new MatchError(tileEntity); }
/*  89 */        return (Option)None$.MODULE$;
/*     */     }
/*     */     public static Object[] withItemConduit(UpgradeConfigurator.ConfiguratorBase $this, ForgeDirection side, Function1 f) {
/*  92 */       Option<IConduitBundle> option = $this.conduitAt($this.position().offset(side));
/*  93 */       if (option instanceof Some) { Some some = (Some)option; IConduitBundle conduit = (IConduitBundle)some.x(); if (conduit.hasType(IItemConduit.class))
/*  94 */           return (Object[])f.apply(conduit.getConduit(IItemConduit.class));  }
/*  95 */        return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { Unit$.MODULE$, "no item conduit here" }));
/*     */     }
/*     */     
/*     */     public static Object[] withEnderFluidConduit(UpgradeConfigurator.ConfiguratorBase $this, ForgeDirection side, Function1 f) {
/*  99 */       Option<IConduitBundle> option = $this.conduitAt($this.position().offset(side));
/* 100 */       if (option instanceof Some) { Some some = (Some)option; IConduitBundle conduit = (IConduitBundle)some.x(); if (conduit.hasType(AbstractEnderLiquidConduit.class))
/* 101 */           return (Object[])f.apply(conduit.getConduit(AbstractEnderLiquidConduit.class));  }
/* 102 */        return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { Unit$.MODULE$, "no ender conduit here" }));
/*     */     }
/*     */     
/*     */     public static Object[] withFluidConduit(UpgradeConfigurator.ConfiguratorBase $this, ForgeDirection side, Function1 f) {
/* 106 */       Option<IConduitBundle> option = $this.conduitAt($this.position().offset(side));
/* 107 */       if (option instanceof Some) { Some some = (Some)option; IConduitBundle conduit = (IConduitBundle)some.x(); if (conduit.hasType(ILiquidConduit.class))
/* 108 */           return (Object[])f.apply(conduit.getConduit(ILiquidConduit.class));  }
/* 109 */        return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { Unit$.MODULE$, "no liquid conduit here" }));
/*     */     }
/*     */     public static Object[] withInsulatedRedstoneConduit(UpgradeConfigurator.ConfiguratorBase $this, ForgeDirection side, Function1 f) {
/* 112 */       Option<IConduitBundle> option = $this.conduitAt($this.position().offset(side));
/* 113 */       if (option instanceof Some) { Some some = (Some)option; IConduitBundle conduit = (IConduitBundle)some.x(); if (conduit.hasType(IInsulatedRedstoneConduit.class))
/* 114 */           return (Object[])f.apply(conduit.getConduit(IInsulatedRedstoneConduit.class));  }
/* 115 */        return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { Unit$.MODULE$, "no liquid conduit here" }));
/*     */     } }
/*     */ 
/*     */   
/*     */   public static abstract class Configurator$class { public static void $init$(UpgradeConfigurator.Configurator $this) {}
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection: number):table -- Get conduit configuration at the specified conduitDirection")
/*     */     public static Object[] getConduitConfiguration(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/*     */       Object[] arrayOfObject;
/* 124 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 125 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 126 */       Option<IConduitBundle> option = $this.conduitAt($this.position().offset(facing));
/* 127 */       if (option instanceof Some) { Some some = (Some)option; IConduitBundle conduit = (IConduitBundle)some.x();
/* 128 */         (new Tuple2[1])[0] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("HasFacade"), BoxesRunTime.boxToBoolean(conduit.hasFacade())); Map info = (Map)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[1]));
/* 129 */         if (conduit.hasType(IItemConduit.class))
/* 130 */           info = info.$plus(Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ItemConduit"), convert($this, dir, (IItemConduit)conduit.getConduit(IItemConduit.class)))); 
/* 131 */         if (conduit.hasType(ILiquidConduit.class))
/* 132 */           info = info.$plus(Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("LiquidConduit"), convert($this, dir, (ILiquidConduit)conduit.getConduit(ILiquidConduit.class)))); 
/* 133 */         if (conduit.hasType(IRedstoneConduit.class))
/* 134 */           info = info.$plus(Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("RedstoneConduit"), convert($this, dir, (IRedstoneConduit)conduit.getConduit(IRedstoneConduit.class)))); 
/* 135 */         arrayOfObject = package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { info })); }
/*     */       else
/* 137 */       { arrayOfObject = package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { null, "No conduit here" })); }
/*     */ 
/*     */ 
/*     */       
/* 141 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? arrayOfObject : package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { null, "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection: number, isInput:boolean, color:string):boolean -- Set item conduit input/output color")
/*     */     public static Object[] setItemConduitColor(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 146 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 147 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 148 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withItemConduit(facing, (Function1<IItemConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setItemConduitColor$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 156 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, priority:number):boolean -- Set item conduit output priority")
/*     */     public static Object[] setItemConduitOutputPriority(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 161 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 162 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 163 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withItemConduit(facing, (Function1<IItemConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setItemConduitOutputPriority$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 169 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection: number, database: string, dbSlot:number, filterIndex:number, isInput:boolean):boolean -- Set item from database slot to conduit input or output filter")
/*     */     public static Object[] setItemConduitFilter(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 174 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 175 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 176 */       String dbAddress = args.checkString(2);
/* 177 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withItemConduit(facing, (Function1<IItemConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setItemConduitFilter$1($this, dir, dbAddress, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 193 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)")
/*     */     public static Object[] setItemConduitConnectionMode(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 198 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 199 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 200 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withItemConduit(facing, (Function1<IItemConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setItemConduitConnectionMode$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 207 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set item conduit extraction redstone signal color")
/*     */     public static Object[] setItemConduitExtractionRedstoneColor(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 212 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 213 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 214 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withItemConduit(facing, (Function1<IItemConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setItemConduitExtractionRedstoneColor$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 221 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit extraction redstone signal mode (IGNORE,ON,OFF,NEVER). ")
/*     */     public static Object[] setItemConduitExtractionRedstoneMode(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 226 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 227 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 228 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withItemConduit(facing, (Function1<IItemConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setItemConduitExtractionRedstoneMode$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 235 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, fluid:string, blacklist:boolean, isInput:boolean[, filterIndex:number]):boolean -- Set Ender liquid conduit filter")
/*     */     public static Object[] setEnderLiquidConduitFilter(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 240 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 241 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 242 */       String fluidName = args.checkString(2);
/* 243 */       int filterIndex = args.optInteger(5, 0);
/* 244 */       FluidFilter ff = new FluidFilter();
/* 245 */       ff.setBlacklist(args.checkBoolean(3));
/* 246 */       ff.setFluid(filterIndex, new FluidStack(FluidRegistry.getFluid(fluidName), 0));
/* 247 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withEnderFluidConduit(facing, (Function1<AbstractEnderLiquidConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setEnderLiquidConduitFilter$1($this, dir, ff, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 253 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, isInput:boolean, color:string):boolean -- Set Color for Ender liquid conduit input or output.")
/*     */     public static Object[] setEnderLiquidConduitColor(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 258 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 259 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 260 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withEnderFluidConduit(facing, (Function1<AbstractEnderLiquidConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setEnderLiquidConduitColor$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 268 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set liquid conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)")
/*     */     public static Object[] setLiquidConduitConnectionMode(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 273 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 274 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 275 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withFluidConduit(facing, (Function1<ILiquidConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setLiquidConduitConnectionMode$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 282 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set fluid conduit extraction redstone signal color")
/*     */     public static Object[] setLiquidConduitExtractionRedstoneColor(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 287 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 288 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 289 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withFluidConduit(facing, (Function1<ILiquidConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setLiquidConduitExtractionRedstoneColor$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 296 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set fluid conduit extraction redstone signal mode at side facing conduitDirection. mode:(IGNORE,ON,OFF,NEVER)")
/*     */     public static Object[] setLiquidConduitExtractionRedstoneMode(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 301 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 302 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 303 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withFluidConduit(facing, (Function1<ILiquidConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setLiquidConduitExtractionRedstoneMode$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 310 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set redstone conduit signal color at side facing conduitDirection")
/*     */     public static Object[] setRedstoneConduitSignalColor(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 315 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 316 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 317 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withInsulatedRedstoneConduit(facing, (Function1<IInsulatedRedstoneConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setRedstoneConduitSignalColor$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 324 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     }
/*     */     
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, strength:boolean):boolean -- Set redstone conduit signal strength. (true = strong signal, false = weak)")
/*     */     public static Object[] setRedstoneConduitSignalStrength(UpgradeConfigurator.Configurator $this, Context context, Arguments args) {
/* 329 */       ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 330 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 331 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withInsulatedRedstoneConduit(facing, (Function1<IInsulatedRedstoneConduit, Object[]>)new UpgradeConfigurator$Configurator$$anonfun$setRedstoneConduitSignalStrength$1($this, dir, args)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 338 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" }));
/*     */     } private static Map convert(UpgradeConfigurator.Configurator $this, ForgeDirection dir, IItemConduit ic) {
/* 340 */       (new Tuple2[11])[0] = Predef$ArrowAssoc$.MODULE$
/* 341 */         .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("OutputColor"), ic.getOutputColor(dir).getName());
/* 342 */       (new Tuple2[11])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("InputColor"), ic.getInputColor(dir).getName());
/* 343 */       (new Tuple2[11])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("RoundRobinEnabled"), BoxesRunTime.boxToBoolean(ic.isRoundRobinEnabled(dir)));
/* 344 */       (new Tuple2[11])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("SelfFeedEnabled"), BoxesRunTime.boxToBoolean(ic.isSelfFeedEnabled(dir)));
/* 345 */       (new Tuple2[11])[4] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ExtractionRedstoneConditionMet"), BoxesRunTime.boxToBoolean(ic.isExtractionRedstoneConditionMet(dir)));
/* 346 */       (new Tuple2[11])[5] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("OutputPriority"), BoxesRunTime.boxToInteger(ic.getOutputPriority(dir)));
/* 347 */       (new Tuple2[11])[6] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("InputFilter"), convert($this, ic.getInputFilter(dir)));
/* 348 */       (new Tuple2[11])[7] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("OutputFilter"), convert($this, ic.getOutputFilter(dir)));
/* 349 */       (new Tuple2[11])[8] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ConnectionMode"), ic.getConnectionMode(dir));
/* 350 */       (new Tuple2[11])[9] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ExtractionRedstoneMode"), ic.getExtractionRedstoneMode(dir));
/* 351 */       (new Tuple2[11])[10] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ExtractionRedstoneColor"), ic.getExtractionSignalColor(dir));
/*     */       return (Map)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[11]));
/*     */     }
/* 354 */     private static Map convert(UpgradeConfigurator.Configurator $this, ForgeDirection dir, IRedstoneConduit ic) { (new Tuple2[3])[0] = Predef$ArrowAssoc$.MODULE$
/* 355 */         .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("SignalColor"), ic.getSignalColor(dir));
/* 356 */       (new Tuple2[3])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("IsOutputStrong"), BoxesRunTime.boxToInteger(ic.isProvidingStrongPower(dir)).toString());
/* 357 */       (new Tuple2[3])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ConnectionMode"), ic.getConnectionMode(dir));
/*     */       return (Map)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[3])); }
/*     */     private static Map convert(UpgradeConfigurator.Configurator $this, ForgeDirection dir, ILiquidConduit ic) { Map map;
/* 360 */       ILiquidConduit iLiquidConduit = ic;
/* 361 */       if (iLiquidConduit instanceof AbstractEnderLiquidConduit) { AbstractEnderLiquidConduit abstractEnderLiquidConduit = (AbstractEnderLiquidConduit)iLiquidConduit; (new Tuple2[7])[0] = Predef$ArrowAssoc$.MODULE$
/* 362 */           .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("InputFilter"), convert($this, abstractEnderLiquidConduit.getFilter(dir, true)));
/* 363 */         (new Tuple2[7])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("OutputFilter"), convert($this, abstractEnderLiquidConduit.getFilter(dir, false)));
/* 364 */         (new Tuple2[7])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("InputColor"), abstractEnderLiquidConduit.getInputColor(dir).getName());
/* 365 */         (new Tuple2[7])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("OutputColor"), abstractEnderLiquidConduit.getOutputColor(dir).getName());
/* 366 */         (new Tuple2[7])[4] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ConnectionMode"), abstractEnderLiquidConduit.getConnectionMode(dir));
/* 367 */         (new Tuple2[7])[5] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ExtractionRedstoneMode"), abstractEnderLiquidConduit.getExtractionRedstoneMode(dir));
/* 368 */         (new Tuple2[7])[6] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ExtractionRedstoneColor"), abstractEnderLiquidConduit.getExtractionSignalColor(dir));
/*     */         
/*     */         map = (Map)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[7])); }
/* 371 */       else if (iLiquidConduit instanceof AbstractTankConduit) { AbstractTankConduit abstractTankConduit = (AbstractTankConduit)iLiquidConduit; (new Tuple2[4])[0] = Predef$ArrowAssoc$.MODULE$
/* 372 */           .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("FluidType"), abstractTankConduit.getFluidType().getLocalizedName());
/* 373 */         (new Tuple2[4])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ConnectionMode"), abstractTankConduit.getConnectionMode(dir));
/* 374 */         (new Tuple2[4])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ExtractionRedstoneMode"), abstractTankConduit.getExtractionRedstoneMode(dir));
/* 375 */         (new Tuple2[4])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("ExtractionRedstoneColor"), abstractTankConduit.getExtractionSignalColor(dir)); map = (Map)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[4])); }
/*     */       else
/* 377 */       { map = null; }
/*     */       
/* 379 */       return map; } private static Map convert(UpgradeConfigurator.Configurator $this, FluidFilter f) { (new Tuple2[6])[0] = Predef$ArrowAssoc$.MODULE$
/* 380 */         .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("blacklist"), BoxesRunTime.boxToBoolean(f.isBlacklist()));
/* 381 */       (new Tuple2[6])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("1"), Option$.MODULE$.apply(f.getFluidStackAt(0)).fold((Function0)new UpgradeConfigurator$Configurator$$anonfun$convert$2($this), (Function1)new UpgradeConfigurator$Configurator$$anonfun$convert$3($this)));
/* 382 */       (new Tuple2[6])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("2"), Option$.MODULE$.apply(f.getFluidStackAt(1)).fold((Function0)new UpgradeConfigurator$Configurator$$anonfun$convert$4($this), (Function1)new UpgradeConfigurator$Configurator$$anonfun$convert$5($this)));
/* 383 */       (new Tuple2[6])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("3"), Option$.MODULE$.apply(f.getFluidStackAt(2)).fold((Function0)new UpgradeConfigurator$Configurator$$anonfun$convert$6($this), (Function1)new UpgradeConfigurator$Configurator$$anonfun$convert$7($this)));
/* 384 */       (new Tuple2[6])[4] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("4"), Option$.MODULE$.apply(f.getFluidStackAt(3)).fold((Function0)new UpgradeConfigurator$Configurator$$anonfun$convert$8($this), (Function1)new UpgradeConfigurator$Configurator$$anonfun$convert$9($this)));
/* 385 */       (new Tuple2[6])[5] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("5"), Option$.MODULE$.apply(f.getFluidStackAt(4)).fold((Function0)new UpgradeConfigurator$Configurator$$anonfun$convert$10($this), (Function1)new UpgradeConfigurator$Configurator$$anonfun$convert$11($this)));
/*     */       
/* 387 */       return (f == null) ? null : (Map)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[6])); }
/*     */     
/*     */     private static Map convert(UpgradeConfigurator.Configurator $this, IItemFilter f) { Map map;
/* 390 */       IItemFilter iItemFilter = f;
/* 391 */       if (iItemFilter instanceof ItemFilter) { ItemFilter itemFilter = (ItemFilter)iItemFilter;
/* 392 */         (new Tuple2[7])[0] = Predef$ArrowAssoc$.MODULE$
/* 393 */           .$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("Advanced"), BoxesRunTime.boxToBoolean(itemFilter.isAdvanced()));
/* 394 */         (new Tuple2[7])[1] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("Blacklist"), BoxesRunTime.boxToBoolean(itemFilter.isBlacklist()));
/* 395 */         (new Tuple2[7])[2] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("MatchMeta"), BoxesRunTime.boxToBoolean(itemFilter.isMatchMeta()));
/* 396 */         (new Tuple2[7])[3] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("MatchNBT"), BoxesRunTime.boxToBoolean(itemFilter.isMatchNBT()));
/* 397 */         (new Tuple2[7])[4] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("UseOreDict"), BoxesRunTime.boxToBoolean(itemFilter.isUseOreDict()));
/* 398 */         (new Tuple2[7])[5] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("Sticky"), BoxesRunTime.boxToBoolean(itemFilter.isSticky()));
/* 399 */         (new Tuple2[7])[6] = Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("FuzzyMode"), itemFilter.getFuzzyMode().toString());
/*     */         Map filterInfo = (Map)Predef$.MODULE$.Map().apply((Seq)Predef$.MODULE$.wrapRefArray((Object[])new Tuple2[7]));
/* 401 */         ObjectRef items = ObjectRef.create(Nil$.MODULE$); RichInt$.MODULE$
/* 402 */           .to$extension0(Predef$.MODULE$.intWrapper(0), itemFilter.func_70302_i_()).foreach$mVc$sp((Function1)new UpgradeConfigurator$Configurator$$anonfun$convert$1($this, items, itemFilter));
/*     */ 
/*     */ 
/*     */         
/* 406 */         filterInfo = filterInfo.$plus(Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(Predef$.MODULE$.ArrowAssoc("FilterItems"), ((List)items.elem).toArray(ClassTag$.MODULE$.apply(ItemStack.class))));
/* 407 */         map = filterInfo; }
/*     */       else
/* 409 */       { map = (Map)Predef$.MODULE$.Map().apply((Seq)Nil$.MODULE$); }  return map; } } public static interface Configurator extends ConfiguratorBase, SideRestricted, NetworkAware { @Callback(doc = "function(side:number, conduitDirection: number):table -- Get conduit configuration at the specified conduitDirection") Object[] getConduitConfiguration(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection: number, isInput:boolean, color:string):boolean -- Set item conduit input/output color") Object[] setItemConduitColor(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, priority:number):boolean -- Set item conduit output priority") Object[] setItemConduitOutputPriority(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection: number, database: string, dbSlot:number, filterIndex:number, isInput:boolean):boolean -- Set item from database slot to conduit input or output filter") Object[] setItemConduitFilter(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)") Object[] setItemConduitConnectionMode(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set item conduit extraction redstone signal color") Object[] setItemConduitExtractionRedstoneColor(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set item conduit extraction redstone signal mode (IGNORE,ON,OFF,NEVER). ") Object[] setItemConduitExtractionRedstoneMode(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, fluid:string, blacklist:boolean, isInput:boolean[, filterIndex:number]):boolean -- Set Ender liquid conduit filter") Object[] setEnderLiquidConduitFilter(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, isInput:boolean, color:string):boolean -- Set Color for Ender liquid conduit input or output.") Object[] setEnderLiquidConduitColor(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set liquid conduit connection mode (IN_OUT,INPUT,OUTPUT,DISABLED,NOT_SET)") Object[] setLiquidConduitConnectionMode(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set fluid conduit extraction redstone signal color") Object[] setLiquidConduitExtractionRedstoneColor(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, mode:string):boolean -- Set fluid conduit extraction redstone signal mode at side facing conduitDirection. mode:(IGNORE,ON,OFF,NEVER)") Object[] setLiquidConduitExtractionRedstoneMode(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, color:string):boolean -- Set redstone conduit signal color at side facing conduitDirection") Object[] setRedstoneConduitSignalColor(Context param1Context, Arguments param1Arguments); @Callback(doc = "function(side:number, conduitDirection:number, strength:boolean):boolean -- Set redstone conduit signal strength. (true = strong signal, false = weak)") Object[] setRedstoneConduitSignalStrength(Context param1Context, Arguments param1Arguments); public final class UpgradeConfigurator$Configurator$$anonfun$setItemConduitColor$1 extends AbstractFunction1<IItemConduit, Object[]> implements Serializable {
/*     */       public static final long serialVersionUID = 0L; private final ForgeDirection dir$1; private final Arguments args$1; public UpgradeConfigurator$Configurator$$anonfun$setItemConduitColor$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$1, Arguments args$1) {} public final Object[] apply(IItemConduit c) { DyeColor color = DyeColor.valueOf(this.args$1.checkString(3).toUpperCase()); boolean isInput = this.args$1.checkBoolean(2); if (isInput) { c.setInputColor(this.dir$1, color); } else { c.setOutputColor(this.dir$1, color); }  return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); }
/*     */     } public final class UpgradeConfigurator$Configurator$$anonfun$setItemConduitOutputPriority$1 extends AbstractFunction1<IItemConduit, Object[]> implements Serializable { public static final long serialVersionUID = 0L; private final ForgeDirection dir$2; private final Arguments args$2; public UpgradeConfigurator$Configurator$$anonfun$setItemConduitOutputPriority$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$2, Arguments args$2) {} public final Object[] apply(IItemConduit c) { c.setOutputPriority(this.dir$2, this.args$2.checkInteger(2)); return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); } } public final class UpgradeConfigurator$Configurator$$anonfun$setItemConduitFilter$1 extends AbstractFunction1<IItemConduit, Object[]> implements Serializable { public static final long serialVersionUID = 0L; public final ForgeDirection dir$3; private final String dbAddress$1; public final Arguments args$3; public UpgradeConfigurator$Configurator$$anonfun$setItemConduitFilter$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$3, String dbAddress$1, Arguments args$3) {} public final Object[] apply(IItemConduit c) { return DatabaseAccess$.MODULE$.withDatabase(this.$outer.node(), this.dbAddress$1, (Function1)new UpgradeConfigurator$Configurator$$anonfun$setItemConduitFilter$1$$anonfun$apply$1(this, c)); } public final class UpgradeConfigurator$Configurator$$anonfun$setItemConduitFilter$1$$anonfun$apply$1 extends AbstractFunction1<UpgradeDatabase, Object[]> implements Serializable {
/*     */         public static final long serialVersionUID = 0L; private final IItemConduit c$1; public UpgradeConfigurator$Configurator$$anonfun$setItemConduitFilter$1$$anonfun$apply$1(UpgradeConfigurator$Configurator$$anonfun$setItemConduitFilter$1 $outer, IItemConduit c$1) {} public final Object[] apply(UpgradeDatabase database) { int dbSlot = ExtendedArguments$.MODULE$.extendedArguments(this.$outer.args$3).checkSlot(database.data(), 3); ItemStack dbStack = database.getStackInSlot(dbSlot); int filterSlot = this.$outer.args$3.checkInteger(4); boolean isInput = this.$outer.args$3.checkBoolean(5); IItemFilter f = isInput ? this.c$1.getInputFilter(this.$outer.dir$3) : this.c$1.getOutputFilter(this.$outer.dir$3); ((ItemFilter)f).func_70299_a(filterSlot, dbStack); return (f != null && f.getSlotCount() > filterSlot && f instanceof ItemFilter) ? package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })) : package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "Wrong or no item filter" })); }
/*     */       } } public final class UpgradeConfigurator$Configurator$$anonfun$setItemConduitConnectionMode$1 extends AbstractFunction1<IItemConduit, Object[]> implements Serializable {
/*     */       public static final long serialVersionUID = 0L; private final ForgeDirection dir$4; private final Arguments args$4; public UpgradeConfigurator$Configurator$$anonfun$setItemConduitConnectionMode$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$4, Arguments args$4) {} public final Object[] apply(IItemConduit c) { ConnectionMode mode = ConnectionMode.valueOf(this.args$4.checkString(2).toUpperCase()); c.setConnectionMode(this.dir$4, mode); return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); }
/*     */     } public final class UpgradeConfigurator$Configurator$$anonfun$setItemConduitExtractionRedstoneColor$1 extends AbstractFunction1<IItemConduit, Object[]> implements Serializable { public static final long serialVersionUID = 0L; private final ForgeDirection dir$5; private final Arguments args$5; public UpgradeConfigurator$Configurator$$anonfun$setItemConduitExtractionRedstoneColor$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$5, Arguments args$5) {} public final Object[] apply(IItemConduit c) { DyeColor color = DyeColor.valueOf(this.args$5.checkString(2).toUpperCase()); c.setExtractionSignalColor(this.dir$5, color); return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); } } public final class UpgradeConfigurator$Configurator$$anonfun$setItemConduitExtractionRedstoneMode$1 extends AbstractFunction1<IItemConduit, Object[]> implements Serializable {
/*     */       public static final long serialVersionUID = 0L; private final ForgeDirection dir$6; private final Arguments args$6; public UpgradeConfigurator$Configurator$$anonfun$setItemConduitExtractionRedstoneMode$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$6, Arguments args$6) {} public final Object[] apply(IItemConduit c) { RedstoneControlMode mode = RedstoneControlMode.valueOf(this.args$6.checkString(2).toUpperCase()); c.setExtractionRedstoneMode(mode, this.dir$6); return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); }
/* 417 */     } public final class UpgradeConfigurator$Configurator$$anonfun$setEnderLiquidConduitFilter$1 extends AbstractFunction1<AbstractEnderLiquidConduit, Object[]> implements Serializable { public static final long serialVersionUID = 0L; private final ForgeDirection dir$7; private final FluidFilter ff$1; private final Arguments args$7; public UpgradeConfigurator$Configurator$$anonfun$setEnderLiquidConduitFilter$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$7, FluidFilter ff$1, Arguments args$7) {} public final Object[] apply(AbstractEnderLiquidConduit c) { c.setFilter(this.dir$7, this.ff$1, this.args$7.checkBoolean(4)); return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); } } public final class UpgradeConfigurator$Configurator$$anonfun$setEnderLiquidConduitColor$1 extends AbstractFunction1<AbstractEnderLiquidConduit, Object[]> implements Serializable { public static final long serialVersionUID = 0L; private final ForgeDirection dir$8; private final Arguments args$8; public UpgradeConfigurator$Configurator$$anonfun$setEnderLiquidConduitColor$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$8, Arguments args$8) {} public final Object[] apply(AbstractEnderLiquidConduit c) { boolean isInput = this.args$8.checkBoolean(2); DyeColor color = DyeColor.valueOf(this.args$8.checkString(3).toUpperCase()); if (isInput) { c.setInputColor(this.dir$8, color); } else { c.setOutputColor(this.dir$8, color); }  return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); } } public final class UpgradeConfigurator$Configurator$$anonfun$setLiquidConduitConnectionMode$1 extends AbstractFunction1<ILiquidConduit, Object[]> implements Serializable { public static final long serialVersionUID = 0L; private final ForgeDirection dir$9; private final Arguments args$9; public UpgradeConfigurator$Configurator$$anonfun$setLiquidConduitConnectionMode$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$9, Arguments args$9) {} public final Object[] apply(ILiquidConduit c) { ConnectionMode mode = ConnectionMode.valueOf(this.args$9.checkString(2).toUpperCase()); c.setConnectionMode(this.dir$9, mode); return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); } } public final class UpgradeConfigurator$Configurator$$anonfun$setLiquidConduitExtractionRedstoneColor$1 extends AbstractFunction1<ILiquidConduit, Object[]> implements Serializable { public static final long serialVersionUID = 0L; private final ForgeDirection dir$10; private final Arguments args$10; public UpgradeConfigurator$Configurator$$anonfun$setLiquidConduitExtractionRedstoneColor$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$10, Arguments args$10) {} public final Object[] apply(ILiquidConduit c) { DyeColor color = DyeColor.valueOf(this.args$10.checkString(2).toUpperCase()); c.setExtractionSignalColor(this.dir$10, color); return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); } } public final class UpgradeConfigurator$Configurator$$anonfun$setLiquidConduitExtractionRedstoneMode$1 extends AbstractFunction1<ILiquidConduit, Object[]> implements Serializable { public static final long serialVersionUID = 0L; private final ForgeDirection dir$11; private final Arguments args$11; public UpgradeConfigurator$Configurator$$anonfun$setLiquidConduitExtractionRedstoneMode$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$11, Arguments args$11) {} public final Object[] apply(ILiquidConduit c) { RedstoneControlMode mode = RedstoneControlMode.valueOf(this.args$11.checkString(2).toUpperCase()); c.setExtractionRedstoneMode(mode, this.dir$11); return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); } } public final class UpgradeConfigurator$Configurator$$anonfun$setRedstoneConduitSignalColor$1 extends AbstractFunction1<IInsulatedRedstoneConduit, Object[]> implements Serializable { public static final long serialVersionUID = 0L; private final ForgeDirection dir$12; private final Arguments args$12; public UpgradeConfigurator$Configurator$$anonfun$setRedstoneConduitSignalColor$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$12, Arguments args$12) {} public final Object[] apply(IInsulatedRedstoneConduit c) { DyeColor color = DyeColor.valueOf(this.args$12.checkString(2).toUpperCase()); c.setSignalColor(this.dir$12, color); return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); } } public final class UpgradeConfigurator$Configurator$$anonfun$setRedstoneConduitSignalStrength$1 extends AbstractFunction1<IInsulatedRedstoneConduit, Object[]> implements Serializable { public static final long serialVersionUID = 0L; private final ForgeDirection dir$13; private final Arguments args$13; public UpgradeConfigurator$Configurator$$anonfun$setRedstoneConduitSignalStrength$1(UpgradeConfigurator.Configurator $outer, ForgeDirection dir$13, Arguments args$13) {} public final Object[] apply(IInsulatedRedstoneConduit c) { boolean strength = this.args$13.checkBoolean(2); c.setOutputStrength(this.dir$13, strength); return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) })); } } public final class UpgradeConfigurator$Configurator$$anonfun$convert$2 extends AbstractFunction0<String> implements Serializable { public static final long serialVersionUID = 0L; public final String apply() { return ""; } public UpgradeConfigurator$Configurator$$anonfun$convert$2(UpgradeConfigurator.Configurator $outer) {} } public final class UpgradeConfigurator$Configurator$$anonfun$convert$3 extends AbstractFunction1<FluidStack, String> implements Serializable { public static final long serialVersionUID = 0L; public final String apply(FluidStack x$1) { return x$1.getLocalizedName(); } public UpgradeConfigurator$Configurator$$anonfun$convert$3(UpgradeConfigurator.Configurator $outer) {} } public final class UpgradeConfigurator$Configurator$$anonfun$convert$4 extends AbstractFunction0<String> implements Serializable { public static final long serialVersionUID = 0L; public final String apply() { return ""; } public UpgradeConfigurator$Configurator$$anonfun$convert$4(UpgradeConfigurator.Configurator $outer) {} } public final class UpgradeConfigurator$Configurator$$anonfun$convert$5 extends AbstractFunction1<FluidStack, String> implements Serializable { public static final long serialVersionUID = 0L; public final String apply(FluidStack x$2) { return x$2.getLocalizedName(); } public UpgradeConfigurator$Configurator$$anonfun$convert$5(UpgradeConfigurator.Configurator $outer) {} } public final class UpgradeConfigurator$Configurator$$anonfun$convert$6 extends AbstractFunction0<String> implements Serializable { public static final long serialVersionUID = 0L; public final String apply() { return ""; } public UpgradeConfigurator$Configurator$$anonfun$convert$6(UpgradeConfigurator.Configurator $outer) {} } public final class UpgradeConfigurator$Configurator$$anonfun$convert$7 extends AbstractFunction1<FluidStack, String> implements Serializable { public static final long serialVersionUID = 0L; public final String apply(FluidStack x$3) { return x$3.getLocalizedName(); } public UpgradeConfigurator$Configurator$$anonfun$convert$7(UpgradeConfigurator.Configurator $outer) {} } public final class UpgradeConfigurator$Configurator$$anonfun$convert$8 extends AbstractFunction0<String> implements Serializable { public static final long serialVersionUID = 0L; public final String apply() { return ""; } public UpgradeConfigurator$Configurator$$anonfun$convert$8(UpgradeConfigurator.Configurator $outer) {} } public final class UpgradeConfigurator$Configurator$$anonfun$convert$9 extends AbstractFunction1<FluidStack, String> implements Serializable { public static final long serialVersionUID = 0L; public final String apply(FluidStack x$4) { return x$4.getLocalizedName(); } public UpgradeConfigurator$Configurator$$anonfun$convert$9(UpgradeConfigurator.Configurator $outer) {} } public final class UpgradeConfigurator$Configurator$$anonfun$convert$10 extends AbstractFunction0<String> implements Serializable { public static final long serialVersionUID = 0L; public final String apply() { return ""; } public UpgradeConfigurator$Configurator$$anonfun$convert$10(UpgradeConfigurator.Configurator $outer) {} } public final class UpgradeConfigurator$Configurator$$anonfun$convert$11 extends AbstractFunction1<FluidStack, String> implements Serializable { public static final long serialVersionUID = 0L; public final String apply(FluidStack x$5) { return x$5.getLocalizedName(); } public UpgradeConfigurator$Configurator$$anonfun$convert$11(UpgradeConfigurator.Configurator $outer) {} } public final class UpgradeConfigurator$Configurator$$anonfun$convert$1 extends AbstractFunction1.mcVI.sp implements Serializable { public static final long serialVersionUID = 0L; private final ObjectRef items$1; private final ItemFilter x2$1; public final void apply(int i) { apply$mcVI$sp(i); } public UpgradeConfigurator$Configurator$$anonfun$convert$1(UpgradeConfigurator.Configurator $outer, ObjectRef items$1, ItemFilter x2$1) {} public void apply$mcVI$sp(int i) { if (this.x2$1.func_70301_a(i) != null) { ItemStack itemStack = this.x2$1.func_70301_a(i); this.items$1.elem = ((List)this.items$1.elem).$colon$colon(itemStack); }  } } } public static abstract class RobotConfigurator$class { @Callback(doc = "function(side:number, conduitDirection:number, input:boolean):boolean -- Replace item conduit input or output filter with the filter in selected slot") public static Object[] replaceConduitFilter(UpgradeConfigurator.RobotConfigurator $this, Context context, Arguments args) { ForgeDirection facing = $this.checkSideForAction(args, 0);
/* 418 */       ItemStack stack = $this.inventory().func_70301_a($this.selectedSlot());
/* 419 */       ForgeDirection dir = ExtendedArguments$.MODULE$.extendedArguments(args).checkSideAny(1);
/* 420 */       boolean isInput = args.checkBoolean(2);
/* 421 */       return Mods$.MODULE$.EnderIO().isModAvailable() ? $this.withItemConduit(facing, (Function1<IItemConduit, Object[]>)new UpgradeConfigurator$RobotConfigurator$$anonfun$replaceConduitFilter$1($this, stack, dir, isInput)) : 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 429 */         package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(false), "EnderIO not loaded" })); }
/*     */ 
/*     */     
/*     */     public static void $init$(UpgradeConfigurator.RobotConfigurator $this) {} }
/*     */ 
/*     */   
/*     */   public static interface RobotConfigurator extends ConfiguratorBase, SideRestricted, NetworkAware, InventoryAware {
/*     */     @Callback(doc = "function(side:number, conduitDirection:number, input:boolean):boolean -- Replace item conduit input or output filter with the filter in selected slot")
/*     */     Object[] replaceConduitFilter(Context param1Context, Arguments param1Arguments);
/*     */     
/*     */     public final class UpgradeConfigurator$RobotConfigurator$$anonfun$replaceConduitFilter$1 extends AbstractFunction1<IItemConduit, Object[]> implements Serializable {
/*     */       public static final long serialVersionUID = 0L;
/*     */       private final ItemStack stack$1;
/*     */       private final ForgeDirection dir$14;
/*     */       private final boolean isInput$1;
/*     */       
/*     */       public UpgradeConfigurator$RobotConfigurator$$anonfun$replaceConduitFilter$1(UpgradeConfigurator.RobotConfigurator $outer, ItemStack stack$1, ForgeDirection dir$14, boolean isInput$1) {}
/*     */       
/*     */       public final Object[] apply(IItemConduit c) {
/*     */         ItemStack old = this.isInput$1 ? c.getInputFilterUpgrade(this.dir$14) : c.getOutputFilterUpgrade(this.dir$14);
/*     */         if (this.isInput$1) {
/*     */           c.setInputFilterUpgrade(this.dir$14, this.stack$1);
/*     */         } else {
/*     */           c.setOutputFilterUpgrade(this.dir$14, this.stack$1);
/*     */         } 
/*     */         this.$outer.inventory().func_70299_a(this.$outer.selectedSlot(), old);
/*     */         return package$.MODULE$.result((Seq<Object>)Predef$.MODULE$.genericWrapArray(new Object[] { BoxesRunTime.boxToBoolean(true) }));
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   public static interface Common extends DeviceInfo {
/*     */     Map<String, String> li$cil$oc$server$component$UpgradeConfigurator$Common$$deviceInfo();
/*     */     
/*     */     Map<String, String> getDeviceInfo();
/*     */   }
/*     */   
/*     */   public static interface ConfiguratorBase extends WorldAware {
/*     */     Option<IConduitBundle> conduitAt(BlockPosition param1BlockPosition);
/*     */     
/*     */     Object[] withItemConduit(ForgeDirection param1ForgeDirection, Function1<IItemConduit, Object[]> param1Function1);
/*     */     
/*     */     Object[] withEnderFluidConduit(ForgeDirection param1ForgeDirection, Function1<AbstractEnderLiquidConduit, Object[]> param1Function1);
/*     */     
/*     */     Object[] withFluidConduit(ForgeDirection param1ForgeDirection, Function1<ILiquidConduit, Object[]> param1Function1);
/*     */     
/*     */     Object[] withInsulatedRedstoneConduit(ForgeDirection param1ForgeDirection, Function1<IInsulatedRedstoneConduit, Object[]> param1Function1);
/*     */   }
/*     */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\server\component\UpgradeConfigurator.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */