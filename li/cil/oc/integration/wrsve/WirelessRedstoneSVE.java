/*    */ package li.cil.oc.integration.wrsve;
/*    */ import scala.runtime.EmptyMethodCache;
/*    */ 
/*    */ @ScalaSignature(bytes = "\006\001\005\025s!B\001\003\021\003i\021aE,je\026dWm]:SK\022\034Ho\0348f'Z+%BA\002\005\003\0259(o\035<f\025\t)a!A\006j]R,wM]1uS>t'BA\004\t\003\ty7M\003\002\n\025\005\0311-\0337\013\003-\t!\001\\5\004\001A\021abD\007\002\005\031)\001C\001E\001#\t\031r+\033:fY\026\0348OU3egR|g.Z*W\013N\031qB\005\r\021\005M1R\"\001\013\013\003U\tQa]2bY\006L!a\006\013\003\r\005s\027PU3g!\tI2F\004\002\033Q9\0211D\n\b\0039\025r!!\b\023\017\005y\031cBA\020#\033\005\001#BA\021\r\003\031a$o\\8u}%\t1\"\003\002\n\025%\021q\001C\005\003\013\031I!a\n\003\002\tU$\030\016\\\005\003S)\n\001cV5sK2,7o\035*fIN$xN\\3\013\005\035\"\021B\001\027.\005Y9\026N]3mKN\034(+\0323ti>tWmU=ti\026l'BA\025+\021\025ys\002\"\0011\003\031a\024N\\5u}Q\tQ\002C\0043\037\t\007I\021B\032\002\013\025$\b.\032:\026\003Q\0022aE\0338\023\t1DC\001\004PaRLwN\034\n\003qI1A!O\b\001o\taAH]3gS:,W.\0328u}!)1\b\017D\001y\005q\021\r\0323Ue\006t7/\\5ui\026\024HCB\037A\027B\023F\013\005\002\024}%\021q\b\006\002\005+:LG\017C\003Bu\001\007!)A\003x_JdG\r\005\002D\0236\tAI\003\002B\013*\021aiR\001\n[&tWm\031:bMRT\021\001S\001\004]\026$\030B\001&E\005\0259vN\0357e\021\025a%\b1\001N\003\005A\bCA\nO\023\tyECA\002J]RDQ!\025\036A\0025\013\021!\037\005\006'j\002\r!T\001\002u\")QK\017a\001%\005IaM]3rk\026t7-\037\005\006/b2\t\001W\001\017e\026lGK]1og6LG\017^3s)\031i\024LW.];\")\021I\026a\001\005\")AJ\026a\001\033\")\021K\026a\001\033\")1K\026a\001\033\")QK\026a\001%!)q\f\017D\001A\006Y\021\r\0323SK\016,\027N^3s)\031i\024MY2eK\")\021I\030a\001\005\")AJ\030a\001\033\")\021K\030a\001\033\")1K\030a\001\033\")QK\030a\001%!)q\r\017D\001Q\006Y!/Z7SK\016,\027N^3s)\031i\024N[6m[\")\021I\032a\001\005\")AJ\032a\001\033\")\021K\032a\001\033\")1K\032a\001\033\")QK\032a\001%!)q\016\017D\001a\006\0312/\032;Ue\006t7/\\5ui\026\0248\013^1uKR9Q(\035:tiV4\b\"B!o\001\004\021\005\"\002'o\001\004i\005\"B)o\001\004i\005\"B*o\001\004i\005\"B+o\001\004\021\002\"B<o\001\004A\030!B:uCR,\007CA\nz\023\tQHCA\004C_>dW-\0318\t\013qDd\021A?\002\031\035,GO\022:fcN#\030\r^3\025\007atx\020C\003Bw\002\007!\tC\003Vw\002\007!\003C\004\002\004=\001\013\021\002\033\002\r\025$\b.\032:!\021\035\t9a\004C\001\003\023\t\021C]3n_Z,GK]1og6LG\017^3s)\ri\0241\002\005\t\003\033\t)\0011\001\002\020\005\021!o\035\t\005\003#\tY\"\004\002\002\024)!\021QCA\f\003%\031w.\0349p]\026tGOC\002\002\032\031\taa]3sm\026\024\030\002BA\017\003'\021\001CU3egR|g.Z,je\026dWm]:\t\r}{A\021AA\021)\ri\0241\005\005\t\003\033\ty\0021\001\002\020!9\021qE\b\005\002\005%\022A\004:f[>4XMU3dK&4XM\035\013\004{\005-\002\002CA\007\003K\001\r!a\004\t\017\005=r\002\"\001\0022\005aQ\017\0353bi\026|U\017\0369viR\031Q(a\r\t\021\0055\021Q\006a\001\003\037Aq!a\016\020\t\003\tI$\001\005hKRLe\016];u)\rA\0301\b\005\t\003\033\t)\0041\001\002\020!9\021qH\b\005\002\005\005\023!\004:fg\026$(+\0323ti>tW\rF\002>\003\007B\001\"!\004\002>\001\007\021q\002")
/*    */ public final class WirelessRedstoneSVE {
/*    */   public static void resetRedstone(RedstoneWireless paramRedstoneWireless) {
/*    */     WirelessRedstoneSVE$.MODULE$.resetRedstone(paramRedstoneWireless);
/*    */   }
/*    */   
/*    */   public static boolean getInput(RedstoneWireless paramRedstoneWireless) {
/*    */     return WirelessRedstoneSVE$.MODULE$.getInput(paramRedstoneWireless);
/*    */   }
/*    */   
/*    */   public static void updateOutput(RedstoneWireless paramRedstoneWireless) {
/*    */     WirelessRedstoneSVE$.MODULE$.updateOutput(paramRedstoneWireless);
/*    */   }
/*    */   
/*    */   public static void removeReceiver(RedstoneWireless paramRedstoneWireless) {
/*    */     WirelessRedstoneSVE$.MODULE$.removeReceiver(paramRedstoneWireless);
/*    */   }
/*    */   
/*    */   public static void addReceiver(RedstoneWireless paramRedstoneWireless) {
/*    */     WirelessRedstoneSVE$.MODULE$.addReceiver(paramRedstoneWireless);
/*    */   }
/*    */   
/*    */   public static void removeTransmitter(RedstoneWireless paramRedstoneWireless) {
/*    */     WirelessRedstoneSVE$.MODULE$.removeTransmitter(paramRedstoneWireless);
/*    */   }
/*    */   
/*    */   public final class WirelessRedstoneSVE$$anonfun$removeTransmitter$1 extends AbstractFunction1<Object, BoxedUnit> implements Serializable {
/*    */     public static final long serialVersionUID = 0L;
/* 32 */     private static Class[] reflParams$Cache1 = new Class[] { World.class, int.class, int.class, int.class, Object.class }; private final RedstoneWireless rs$1; private final BlockPosition blockPos$1; private static volatile SoftReference reflPoly$Cache1 = new SoftReference<>(new EmptyMethodCache()); public static Method reflMethod$Method1(Class x$1) { EmptyMethodCache emptyMethodCache; MethodCache methodCache1 = reflPoly$Cache1.get(); if (methodCache1 == null) { emptyMethodCache = new EmptyMethodCache(); reflPoly$Cache1 = new SoftReference<>(emptyMethodCache); }  Method method1 = emptyMethodCache.find(x$1); if (method1 != null) return method1;  method1 = ScalaRunTime$.MODULE$.ensureAccessible(x$1.getMethod("remTransmitter", reflParams$Cache1)); reflPoly$Cache1 = new SoftReference<>(emptyMethodCache.add(x$1, method1)); return method1; } public final void apply(Object x$1) { Object qual1 = x$1; try { reflMethod$Method1(qual1.getClass()).invoke(qual1, new Object[] { this.rs$1.redstone().world(), BoxesRunTime.boxToInteger(this.blockPos$1.x()), BoxesRunTime.boxToInteger(this.blockPos$1.y()), BoxesRunTime.boxToInteger(this.blockPos$1.z()), BoxesRunTime.boxToInteger(this.rs$1.wirelessFrequency()).toString() }); return; } catch (InvocationTargetException invocationTargetException) { throw invocationTargetException.getCause(); }
/*    */        }
/*    */     
/*    */     public WirelessRedstoneSVE$$anonfun$removeTransmitter$1(RedstoneWireless rs$1, BlockPosition blockPos$1) {} }
/*    */   public final class WirelessRedstoneSVE$$anonfun$addReceiver$1 extends AbstractFunction1<Object, BoxedUnit> implements Serializable { public static final long serialVersionUID = 0L; private final RedstoneWireless rs$2; private final BlockPosition blockPos$2;
/* 37 */     private static Class[] reflParams$Cache2 = new Class[] { World.class, int.class, int.class, int.class, Object.class }; private static volatile SoftReference reflPoly$Cache2 = new SoftReference<>(new EmptyMethodCache()); public static Method reflMethod$Method2(Class x$1) { EmptyMethodCache emptyMethodCache; MethodCache methodCache2 = reflPoly$Cache2.get(); if (methodCache2 == null) { emptyMethodCache = new EmptyMethodCache(); reflPoly$Cache2 = new SoftReference<>(emptyMethodCache); }  Method method2 = emptyMethodCache.find(x$1); if (method2 != null) return method2;  method2 = ScalaRunTime$.MODULE$.ensureAccessible(x$1.getMethod("addReceiver", reflParams$Cache2)); reflPoly$Cache2 = new SoftReference<>(emptyMethodCache.add(x$1, method2)); return method2; } public final void apply(Object x$2) { Object qual2 = x$2; try { reflMethod$Method2(qual2.getClass()).invoke(qual2, new Object[] { this.rs$2.redstone().world(), BoxesRunTime.boxToInteger(this.blockPos$2.x()), BoxesRunTime.boxToInteger(this.blockPos$2.y()), BoxesRunTime.boxToInteger(this.blockPos$2.z()), BoxesRunTime.boxToInteger(this.rs$2.wirelessFrequency()).toString() }); return; } catch (InvocationTargetException invocationTargetException) { throw invocationTargetException.getCause(); }
/*    */        }
/*    */     
/*    */     public WirelessRedstoneSVE$$anonfun$addReceiver$1(RedstoneWireless rs$2, BlockPosition blockPos$2) {} }
/*    */   public final class WirelessRedstoneSVE$$anonfun$removeReceiver$1 extends AbstractFunction1<Object, BoxedUnit> implements Serializable { public static final long serialVersionUID = 0L; private final RedstoneWireless rs$3; private final BlockPosition blockPos$3;
/* 42 */     private static Class[] reflParams$Cache3 = new Class[] { World.class, int.class, int.class, int.class, Object.class }; private static volatile SoftReference reflPoly$Cache3 = new SoftReference<>(new EmptyMethodCache()); public static Method reflMethod$Method3(Class x$1) { EmptyMethodCache emptyMethodCache; MethodCache methodCache3 = reflPoly$Cache3.get(); if (methodCache3 == null) { emptyMethodCache = new EmptyMethodCache(); reflPoly$Cache3 = new SoftReference<>(emptyMethodCache); }  Method method3 = emptyMethodCache.find(x$1); if (method3 != null) return method3;  method3 = ScalaRunTime$.MODULE$.ensureAccessible(x$1.getMethod("remReceiver", reflParams$Cache3)); reflPoly$Cache3 = new SoftReference<>(emptyMethodCache.add(x$1, method3)); return method3; } public final void apply(Object x$3) { Object qual3 = x$3; try { reflMethod$Method3(qual3.getClass()).invoke(qual3, new Object[] { this.rs$3.redstone().world(), BoxesRunTime.boxToInteger(this.blockPos$3.x()), BoxesRunTime.boxToInteger(this.blockPos$3.y()), BoxesRunTime.boxToInteger(this.blockPos$3.z()), BoxesRunTime.boxToInteger(this.rs$3.wirelessFrequency()).toString() }); return; } catch (InvocationTargetException invocationTargetException) { throw invocationTargetException.getCause(); }
/*    */        }
/*    */     
/*    */     public WirelessRedstoneSVE$$anonfun$removeReceiver$1(RedstoneWireless rs$3, BlockPosition blockPos$3) {} }
/*    */   public final class WirelessRedstoneSVE$$anonfun$updateOutput$1 extends AbstractFunction1<Object, BoxedUnit> implements Serializable { public static final long serialVersionUID = 0L; private final RedstoneWireless rs$4; private final BlockPosition blockPos$4;
/* 47 */     private static Class[] reflParams$Cache4 = new Class[] { World.class, int.class, int.class, int.class, Object.class }; private static volatile SoftReference reflPoly$Cache4 = new SoftReference<>(new EmptyMethodCache()); public static Method reflMethod$Method4(Class x$1) { EmptyMethodCache emptyMethodCache; MethodCache methodCache4 = reflPoly$Cache4.get(); if (methodCache4 == null) { emptyMethodCache = new EmptyMethodCache(); reflPoly$Cache4 = new SoftReference<>(emptyMethodCache); }  Method method4 = emptyMethodCache.find(x$1); if (method4 != null) return method4;  method4 = ScalaRunTime$.MODULE$.ensureAccessible(x$1.getMethod("addTransmitter", reflParams$Cache4)); reflPoly$Cache4 = new SoftReference<>(emptyMethodCache.add(x$1, method4)); return method4; } public final void apply(Object x$4) { Object qual4 = x$4; try { reflMethod$Method4(qual4.getClass()).invoke(qual4, new Object[] { this.rs$4.redstone().world(), BoxesRunTime.boxToInteger(this.blockPos$4.x()), BoxesRunTime.boxToInteger(this.blockPos$4.y()), BoxesRunTime.boxToInteger(this.blockPos$4.z()), BoxesRunTime.boxToInteger(this.rs$4.wirelessFrequency()).toString() }); return; } catch (InvocationTargetException invocationTargetException) { throw invocationTargetException.getCause(); }
/* 48 */        } public WirelessRedstoneSVE$$anonfun$updateOutput$1(RedstoneWireless rs$4, BlockPosition blockPos$4) {} } public final class WirelessRedstoneSVE$$anonfun$updateOutput$2 extends AbstractFunction1<Object, BoxedUnit> implements Serializable { public static final long serialVersionUID = 0L; private final RedstoneWireless rs$4; private final BlockPosition blockPos$4; private static Class[] reflParams$Cache5 = new Class[] { World.class, int.class, int.class, int.class, Object.class, boolean.class }; private static volatile SoftReference reflPoly$Cache5 = new SoftReference<>(new EmptyMethodCache()); public static Method reflMethod$Method5(Class x$1) { EmptyMethodCache emptyMethodCache; MethodCache methodCache5 = reflPoly$Cache5.get(); if (methodCache5 == null) { emptyMethodCache = new EmptyMethodCache(); reflPoly$Cache5 = new SoftReference<>(emptyMethodCache); }  Method method5 = emptyMethodCache.find(x$1); if (method5 != null) return method5;  method5 = ScalaRunTime$.MODULE$.ensureAccessible(x$1.getMethod("setTransmitterState", reflParams$Cache5)); reflPoly$Cache5 = new SoftReference<>(emptyMethodCache.add(x$1, method5)); return method5; } public final void apply(Object x$5) { Object qual5 = x$5; try { reflMethod$Method5(qual5.getClass()).invoke(qual5, new Object[] { this.rs$4.redstone().world(), BoxesRunTime.boxToInteger(this.blockPos$4.x()), BoxesRunTime.boxToInteger(this.blockPos$4.y()), BoxesRunTime.boxToInteger(this.blockPos$4.z()), BoxesRunTime.boxToInteger(this.rs$4.wirelessFrequency()).toString(), BoxesRunTime.boxToBoolean(this.rs$4.wirelessOutput()) }); return; } catch (InvocationTargetException invocationTargetException) { throw invocationTargetException.getCause(); }
/*    */        }
/*    */      public WirelessRedstoneSVE$$anonfun$updateOutput$2(RedstoneWireless rs$4, BlockPosition blockPos$4) {} } public final class WirelessRedstoneSVE$$anonfun$getInput$1 extends AbstractFunction0.mcZ.sp implements Serializable { public static final long serialVersionUID = 0L;
/* 51 */     public final boolean apply() { return apply$mcZ$sp(); } public boolean apply$mcZ$sp() { return false; } } public final class WirelessRedstoneSVE$$anonfun$getInput$2 extends AbstractFunction1<Object, Object> implements Serializable { public static final long serialVersionUID = 0L; private final RedstoneWireless rs$5; private static Class[] reflParams$Cache6 = new Class[] { World.class, Object.class }; private static volatile SoftReference reflPoly$Cache6 = new SoftReference<>(new EmptyMethodCache()); public static Method reflMethod$Method6(Class x$1) { EmptyMethodCache emptyMethodCache; MethodCache methodCache6 = reflPoly$Cache6.get(); if (methodCache6 == null) { emptyMethodCache = new EmptyMethodCache(); reflPoly$Cache6 = new SoftReference<>(emptyMethodCache); }  Method method6 = emptyMethodCache.find(x$1); if (method6 != null) return method6;  method6 = ScalaRunTime$.MODULE$.ensureAccessible(x$1.getMethod("getFreqState", reflParams$Cache6)); reflPoly$Cache6 = new SoftReference<>(emptyMethodCache.add(x$1, method6)); return method6; } public final boolean apply(Object x$6) { Object qual6 = x$6; try { return BoxesRunTime.unboxToBoolean(reflMethod$Method6(qual6.getClass()).invoke(qual6, new Object[] { this.rs$5.redstone().world(), BoxesRunTime.boxToInteger(this.rs$5.wirelessFrequency()).toString() })); } catch (InvocationTargetException invocationTargetException) { throw invocationTargetException.getCause(); }
/*    */        }
/*    */ 
/*    */     
/*    */     public WirelessRedstoneSVE$$anonfun$getInput$2(RedstoneWireless rs$5) {} }
/*    */ 
/*    */ }


/* Location:              C:\Users\shame\AppData\Roaming\PrismLauncher\instances\GT_New_Horizons_2.7.4_Java_17-21\.minecraft\mods\OpenComputers-1.10.30-GTNH.jar!\li\cil\oc\integration\wrsve\WirelessRedstoneSVE.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */